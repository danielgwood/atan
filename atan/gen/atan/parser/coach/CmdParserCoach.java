
/* Generated By:JavaCC: Do not edit this line. CmdParserCoach.java */
package atan.parser.coach;

//~--- non-JDK imports --------------------------------------------------------

import atan.model.ActionsCoach;
import atan.model.ControllerCoach;

/**
 * 
 * @author author
 */
public class CmdParserCoach implements CmdParserCoachConstants {
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
    }

    private int                   jj_kind       = -1;
    final private int[]           jj_la1        = new int[0];
    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    ActionsCoach                  coach;
    ControllerCoach               controller;
    private int[]                 jj_expentry;
    private int                   jj_gen;
    SimpleCharStream              jj_input_stream;

    /** Next token. */
    public Token jj_nt;
    private int  jj_ntk;

    /** Current token. */
    public Token token;

    /** Generated Token Manager. */
    public CmdParserCoachTokenManager token_source;

    /**
     * Constructor with generated Token Manager. 
     * @param tm
     */
    public CmdParserCoach(CmdParserCoachTokenManager tm) {
        token_source = tm;
        token        = new Token();
        jj_ntk       = -1;
        jj_gen       = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor with InputStream. 
     * @param stream
     */
    public CmdParserCoach(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor. 
     * @param stream
     */
    public CmdParserCoach(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source    = new CmdParserCoachTokenManager(jj_input_stream);
        token           = new Token();
        jj_ntk          = -1;
        jj_gen          = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor with InputStream and supplied encoding 
     * @param stream
     * @param encoding
     */
    public CmdParserCoach(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new CmdParserCoachTokenManager(jj_input_stream);
        token        = new Token();
        jj_ntk       = -1;
        jj_gen       = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * 
     * @param cmd
     * @param controller
     * @param coach
     * @throws ParseException
     */
    public void parseSeeCommand(String cmd, ControllerCoach controller, ActionsCoach coach) throws ParseException {}

    /**
     * 
     * @param cmd
     * @param controller
     * @param coach
     * @throws ParseException
     */
    public void parseHearCommand(String cmd, ControllerCoach controller, ActionsCoach coach) throws ParseException {}

    /**
     * 
     * @param cmd
     * @param controller
     * @param coach
     * @throws ParseException
     */
    public void parseInitCommand(String cmd, ControllerCoach controller, ActionsCoach coach) throws ParseException {}

    /**
     * 
     * @param cmd
     * @param controller
     * @param coach
     * @throws ParseException
     */
    public void parseErrorCommand(String cmd, ControllerCoach controller, ActionsCoach coach) throws ParseException {}

    /**
     * 
     * @param cmd
     * @param controller
     * @param coach
     * @throws ParseException
     */
    public void parseSenseBodyCommand(String cmd, ControllerCoach controller, ActionsCoach coach)
            throws ParseException {}

    /**
     * 
     * @param cmd
     * @param controller
     * @param coach
     * @throws ParseException
     */
    public void parseOkCommand(String cmd, ControllerCoach controller, ActionsCoach coach) throws ParseException {}

    /**
     * 
     * @param cmd
     * @param controller
     * @param coach
     * @throws ParseException
     */
    public void parseWarningCommand(String cmd, ControllerCoach controller, ActionsCoach coach) throws ParseException {}

    /**
     * 
     * @param cmd
     * @param controller
     * @param coach
     * @throws ParseException
     */
    public void parseServerParamCommand(String cmd, ControllerCoach controller, ActionsCoach coach)
            throws ParseException {}

    /**
     * 
     * @param cmd
     * @param controller
     * @param coach
     * @throws ParseException
     */
    public void parsePlayerParamCommand(String cmd, ControllerCoach controller, ActionsCoach coach)
            throws ParseException {}

    /**
     * 
     * @param cmd
     * @param controller
     * @param coach
     * @throws ParseException
     */
    public void parsePlayerTypeCommand(String cmd, ControllerCoach controller, ActionsCoach coach)
            throws ParseException {}

    /**
     * 
     * @param cmd
     * @param controller
     * @param coach
     * @throws ParseException
     */
    public void parseChangePlayerTypeCommand(String cmd, ControllerCoach controller, ActionsCoach coach)
            throws ParseException {}

    /**
     * 
     */
    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] {};
    }

    /**
     * 
     */
    private static void jj_la1_init_1() {
        jj_la1_1 = new int[] {};
    }

    /**
     * 
     */
    private static void jj_la1_init_2() {
        jj_la1_2 = new int[] {};
    }

    /**
     * Reinitialise. 
     * @param stream
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise. 
     * @param stream
     * @param encoding
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token  = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise. 
     * @param stream
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token  = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise. 
     * @param tm
     */
    public void ReInit(CmdParserCoachTokenManager tm) {
        token_source = tm;
        token        = new Token();
        jj_ntk       = -1;
        jj_gen       = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * 
     * @param kind
     * @return
     * @throws ParseException
     */
    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token   = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /**
     * Get the next Token. 
     * @return
     */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token. 
     * @param index
     * @return
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    /**
     * 
     * @return
     */
    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    /**
     * Generate ParseException. 
     * @return
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[88];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind            = -1;
        }
        for (int i = 0; i < 0; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 88; i++) {
            if (la1tokens[i]) {
                jj_expentry    = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {}

    /** Disable tracing. */
    final public void disable_tracing() {}
}
