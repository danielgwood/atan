/* Generated By:JavaCC: Do not edit this line. CmdParserCoach.java */
package atan.parser.coach;

//~--- non-JDK imports --------------------------------------------------------

import atan.model.enums.Errors;
import atan.model.enums.Ok;
import atan.model.enums.PlayMode;
import atan.model.enums.RefereeMessage;
import atan.model.enums.Warning;
import atan.model.enums.ServerParams;

import atan.model.ActionsCoach;
import atan.model.ControllerCoach;

//~--- JDK imports ------------------------------------------------------------

import java.io.StringReader;
import java.util.HashMap;

  public class CmdParserCoach implements CmdParserCoachConstants {

    ControllerCoach controller;
    ActionsCoach coach;

    public void parseSeeCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
                        ReInit(new StringReader(cmd));
                this.controller = controller;
                this.coach = coach;
                startSeeCommand();
    }
    public void parseOkCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
                ReInit(new StringReader(cmd));
                this.controller = controller;
                this.coach = coach;
                startOkCommand();
    }
    public void parseErrorCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
                        ReInit(new StringReader(cmd));
                this.controller = controller;
                this.coach = coach;
                startErrorCommand();
    }
    public void parseWarningCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
                this.controller = controller;
                this.coach = coach;
                startWarningCommand();
    }
    public void parseInitCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
                this.controller = controller;
                this.coach = coach;
                startInitCommand();
    }
    public void parseChangePlayerTypeCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
                this.controller = controller;
                this.coach = coach;
                startCPTCommand();
    }
    public void parseServerParamCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
                this.controller = controller;
                this.coach = coach;
                startServerParamCommand();
    }
    public void parsePlayerParamCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
                this.controller = controller;
                this.coach = coach;
                startPlayerParamCommand();
    }
    public void parsePlayerTypeCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
                this.controller = controller;
                this.coach = coach;
                startPlayerTypeCommand();
    }
    public void parseHearCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
                this.controller = controller;
                this.coach = coach;
                startHearCommand();
    }

//TODO Commands still to implement.
  final public void startSeeCommand() throws ParseException {

  }

  final public void startServerParamCommand() throws ParseException {
     Token audioCutDist=null; Token autoMode=null;Token backDashRate=null;
        Token backPasses=null;Token ballAccelMax=null;Token ballDecay=null;
        Token ballRand=null;Token ballSize=null;Token ballSpeedMax=null;
        Token ballStuckArea=null;Token ballWeight=null;Token catchBanCycle=null;
        Token catchProbability=null;Token catchableAreaL=null;Token catchableAreaW=null;
        Token ckickMargin=null;Token clangAdviceWin=null;Token clangDefineWin=null;
        Token clangDelWin=null;Token clangInfoWin=null;Token clangMessDelay=null;
        Token clangMessPerCycle=null;Token clangMetaWin=null;Token clangRuleWin=null;
        Token clangWinSize=null;Token coach=null;Token coachPort=null;
        Token coachWReferee=null;Token connectWait=null;Token controlRadius=null;
        Token dashAngleStep=null;Token dashPowerRate=null;Token dropBallTime=null;
        Token effortDec=null;Token effortDecThr=null;Token effortInc=null;
        Token effortIncThr=null;Token effortInit=null;Token effortMin=null;
        Token extraHalfTime=null;Token extraStamina=null;Token forbidKickOffOffside=null;
        Token freeKickFaults=null;Token freeformSendPeriod=null;Token freeformWaitPeriod=null;
        Token fullstateL=null;Token fullstateR=null;Token gameLogCompression=null;
        Token gameLogDated=null;Token gameLogDir=null;Token gameLogFixed=null;
        Token gameLogFixedName=null;Token gameLogVersion=null;Token gameLogging=null;
        Token gameOverWait=null;Token goalWidth=null;Token goalieMaxMoves=null;
        Token halfTime=null;Token hearDecay=null;Token hearInc=null;Token hearMax=null;
        Token inertiaMoment=null;Token keepaway=null;Token keepawayLength=null;
        Token keepawayLogDated=null;Token keepawayLogDir=null;Token keepawayLogFixed=null;
        Token keepawayLogFixedName=null;Token keepawayLogging=null;Token keepawayStart=null;
        Token keepawayWidth=null;Token kickOffWait=null;Token kickPowerRate=null;Token kickRand=null;
        Token kickRandFactorL=null;Token kickRandFactorR=null;Token kickableMargin=null;
        Token landmarkFile=null;Token logDateFormat=null;Token logTimes=null;
        Token maxBackTacklePower=null;Token maxDashAngle=null;Token maxDashPower=null;
        Token maxGoalKicks=null;Token maxTacklePower=null;Token maxmoment=null;
        Token maxneckang=null;Token maxneckmoment=null;Token maxpower=null;
        Token minDashAngle=null;Token minDashPower=null;Token minmoment=null;
        Token minneckang=null;Token minneckmoment=null;Token minpower=null;Token nrExtraHalfs=null;
        Token nrNormalHalfs=null;Token offsideActiveAreaSize=null;Token offsideKickMargin=null;
        Token olcoachPort=null;Token oldCoachHear=null;Token penAllowMultKicks=null;
        Token penBeforeSetupWait=null;Token penCoachMovesPlayers=null;Token penDistX=null;
        Token penMaxExtraKicks=null;Token penMaxGoalieDistX=null;Token penNrKicks=null;
        Token penRandomWinner=null;Token penReadyWait=null;Token penSetupWait=null;
        Token penTakenWait=null;Token penaltyShootOuts=null;Token playerAccelMax=null;
        Token playerDecay=null;Token playerRand=null;Token playerSize=null;
        Token playerSpeedMax=null;Token playerSpeedMaxMin=null;Token playerWeight=null;
        Token pointToBan=null;Token pointToDuration=null;Token port=null;Token prandFactorL=null;
        Token prandFactorR=null;Token profile=null;Token properGoalKicks=null;Token quantizeStep=null;
        Token quantizeStepL=null;Token recordMessages=null;Token recoverDec=null;Token recoverDecThr=null;
        Token recoverInit=null;Token recoverMin=null;Token recvStep=null;Token sayCoachCntMax=null;
        Token sayCoachMsgSize=null;Token sayMsgSize=null;Token sendComms=null;Token sendStep=null;
        Token sendViStep=null;Token senseBodyStep=null;Token sideDashRate=null;
        Token simulatorStep=null;Token slowDownFactor=null;Token slownessOnTopForLeftTeam=null;
        Token slownessOnTopForRightTeam=null;Token staminaCapacity=null;Token staminaIncMax=null;
        Token staminaMax=null;Token startGoalL=null;Token startGoalR=null;Token stoppedBallVel=null;
        Token synchMicroSleep=null;Token synchMode=null;Token synchOffset=null;
        Token synchSeeOffset=null;Token tackleBackDist=null;Token tackleCycles=null;
        Token tackleDist=null;Token tackleExponent=null;Token tacklePowerRate=null;
        Token tackleWidth=null;Token teamActuatorNoise=null;Token teamLStart=null;
        Token teamRStart=null;Token textLogCompression=null;Token textLogDated=null;
        Token textLogDir=null;Token textLogFixed=null;Token textLogFixedName=null;
        Token textLogging=null;Token useOffside=null;Token verbose=null;Token visibleAngle=null;
        Token visibleDistance=null;Token windAng=null;Token windDir=null;
        Token windForce=null;Token windNone=null;Token windRand=null;Token windRandom=null;
    jj_consume_token(OB);
    jj_consume_token(AUDIO_CUT_DIST);
    jj_consume_token(SEP);
    audioCutDist = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(AUTO_MODE);
    jj_consume_token(SEP);
    autoMode = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(BACK_DASH_RATE);
    jj_consume_token(SEP);
    backDashRate = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(BACK_PASSES);
    jj_consume_token(SEP);
    backPasses = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(BALL_ACCEL_MAX);
    jj_consume_token(SEP);
    ballAccelMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(BALL_DECAY);
    jj_consume_token(SEP);
    ballDecay = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(BALL_RAND);
    jj_consume_token(SEP);
    ballRand = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(BALL_SIZE);
    jj_consume_token(SEP);
    ballSize = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(BALL_SPEED_MAX);
    jj_consume_token(SEP);
    ballSpeedMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(BALL_STUCK_AREA);
    jj_consume_token(SEP);
    ballStuckArea = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(BALL_WEIGHT);
    jj_consume_token(SEP);
    ballWeight = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CATCH_BAN_CYCLE);
    jj_consume_token(SEP);
    catchBanCycle = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CATCH_PROBABILITY);
    jj_consume_token(SEP);
    catchProbability = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CATCHABLE_AREA_L);
    jj_consume_token(SEP);
    catchableAreaL = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CATCHABLE_AREA_W);
    jj_consume_token(SEP);
    catchableAreaW = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CKICK_MARGIN);
    jj_consume_token(SEP);
    ckickMargin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CLANG_ADVICE_WIN);
    jj_consume_token(SEP);
    clangAdviceWin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CLANG_DEFINE_WIN);
    jj_consume_token(SEP);
    clangDefineWin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CLANG_DEL_WIN);
    jj_consume_token(SEP);
    clangDelWin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CLANG_INFO_WIN);
    jj_consume_token(SEP);
    clangInfoWin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CLANG_MESS_DELAY);
    jj_consume_token(SEP);
    clangMessDelay = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CLANG_MESS_PER_CYCLE);
    jj_consume_token(SEP);
    clangMessPerCycle = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CLANG_META_WIN);
    jj_consume_token(SEP);
    clangMetaWin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CLANG_RULE_WIN);
    jj_consume_token(SEP);
    clangRuleWin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CLANG_WIN_SIZE);
    jj_consume_token(SEP);
    clangWinSize = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(COACH);
    jj_consume_token(SEP);
    coach = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(COACH_PORT);
    jj_consume_token(SEP);
    coachPort = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(COACH_W_REFEREE);
    jj_consume_token(SEP);
    coachWReferee = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CONNECT_WAIT);
    jj_consume_token(SEP);
    connectWait = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(CONTROL_RADIUS);
    jj_consume_token(SEP);
    controlRadius = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(DASH_ANGLE_STEP);
    jj_consume_token(SEP);
    dashAngleStep = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(DASH_POWER_RATE);
    jj_consume_token(SEP);
    dashPowerRate = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(DROP_BALL_TIME);
    jj_consume_token(SEP);
    dropBallTime = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EFFORT_DEC);
    jj_consume_token(SEP);
    effortDec = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EFFORT_DEC_THR);
    jj_consume_token(SEP);
    effortDecThr = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EFFORT_INC);
    jj_consume_token(SEP);
    effortInc = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EFFORT_INC_THR);
    jj_consume_token(SEP);
    effortIncThr = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EFFORT_INIT);
    jj_consume_token(SEP);
    effortInit = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EFFORT_MIN);
    jj_consume_token(SEP);
    effortMin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EXTRA_HALF_TIME);
    jj_consume_token(SEP);
    extraHalfTime = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EXTRA_STAMINA);
    jj_consume_token(SEP);
    extraStamina = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(FORBID_KICK_OFF_OFFSIDE);
    jj_consume_token(SEP);
    forbidKickOffOffside = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(FREE_KICK_FAULTS);
    jj_consume_token(SEP);
    freeKickFaults = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(FREEFORM_SEND_PERIOD);
    jj_consume_token(SEP);
    freeformSendPeriod = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(FREEFORM_WAIT_PERIOD);
    jj_consume_token(SEP);
    freeformWaitPeriod = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(FULLSTATE_L);
    jj_consume_token(SEP);
    fullstateL = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(FULLSTATE_R);
    jj_consume_token(SEP);
    fullstateR = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(GAME_LOG_COMPRESSION);
    jj_consume_token(SEP);
    gameLogCompression = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(GAME_LOG_DATED);
    jj_consume_token(SEP);
    gameLogDated = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(GAME_LOG_DIR);
    jj_consume_token(SEP);
    gameLogDir = jj_consume_token(NAM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(GAME_LOG_FIXED);
    jj_consume_token(SEP);
    gameLogFixed = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(GAME_LOG_FIXED_NAME);
    jj_consume_token(SEP);
    gameLogFixedName = jj_consume_token(NAM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(GAME_LOG_VERSION);
    jj_consume_token(SEP);
    gameLogVersion = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(GAME_LOGGING);
    jj_consume_token(SEP);
    gameLogging = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(GAME_OVER_WAIT);
    jj_consume_token(SEP);
    gameOverWait = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(GOAL_WIDTH);
    jj_consume_token(SEP);
    goalWidth = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(GOALIE_MAX_MOVES);
    jj_consume_token(SEP);
    goalieMaxMoves = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(HALF_TIME);
    jj_consume_token(SEP);
    halfTime = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(HEAR_DECAY);
    jj_consume_token(SEP);
    hearDecay = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(HEAR_INC);
    jj_consume_token(SEP);
    hearInc = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(HEAR_MAX);
    jj_consume_token(SEP);
    hearMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(INERTIA_MOMENT);
    jj_consume_token(SEP);
    inertiaMoment = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KEEPAWAY);
    jj_consume_token(SEP);
    keepaway = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KEEPAWAY_LENGTH);
    jj_consume_token(SEP);
    keepawayLength = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KEEPAWAY_LOG_DATED);
    jj_consume_token(SEP);
    keepawayLogDated = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KEEPAWAY_LOG_DIR);
    jj_consume_token(SEP);
    keepawayLogDir = jj_consume_token(NAM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KEEPAWAY_LOG_FIXED);
    jj_consume_token(SEP);
    keepawayLogFixed = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KEEPAWAY_LOG_FIXED_NAME);
    jj_consume_token(SEP);
    keepawayLogFixedName = jj_consume_token(NAM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KEEPAWAY_LOGGING);
    jj_consume_token(SEP);
    keepawayLogging = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KEEPAWAY_START);
    jj_consume_token(SEP);
    keepawayStart = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KEEPAWAY_WIDTH);
    jj_consume_token(SEP);
    keepawayWidth = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KICK_OFF_WAIT);
    jj_consume_token(SEP);
    kickOffWait = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KICK_POWER_RATE);
    jj_consume_token(SEP);
    kickPowerRate = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KICK_RAND);
    jj_consume_token(SEP);
    kickRand = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KICK_RAND_FACTOR_L);
    jj_consume_token(SEP);
    kickRandFactorL = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KICK_RAND_FACTOR_R);
    jj_consume_token(SEP);
    kickRandFactorR = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KICKABLE_MARGIN);
    jj_consume_token(SEP);
    kickableMargin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(LANDMARK_FILE);
    jj_consume_token(SEP);
    landmarkFile = jj_consume_token(NAM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(LOG_DATE_FORMAT);
    jj_consume_token(SEP);
    logDateFormat = jj_consume_token(NAM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(LOG_TIMES);
    jj_consume_token(SEP);
    logTimes = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MAX_BACK_TACKLE_POWER);
    jj_consume_token(SEP);
    maxBackTacklePower = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MAX_DASH_ANGLE);
    jj_consume_token(SEP);
    maxDashAngle = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MAX_DASH_POWER);
    jj_consume_token(SEP);
    maxDashPower = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MAX_GOAL_KICKS);
    jj_consume_token(SEP);
    maxGoalKicks = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MAX_TACKLE_POWER);
    jj_consume_token(SEP);
    maxTacklePower = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MAXMOMENT);
    jj_consume_token(SEP);
    maxmoment = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MAXNECKANG);
    jj_consume_token(SEP);
    maxneckang = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MAXNECKMOMENT);
    jj_consume_token(SEP);
    maxneckmoment = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MAXPOWER);
    jj_consume_token(SEP);
    maxpower = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MIN_DASH_ANGLE);
    jj_consume_token(SEP);
    minDashAngle = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MIN_DASH_POWER);
    jj_consume_token(SEP);
    minDashPower = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MINMOMENT);
    jj_consume_token(SEP);
    minmoment = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MINNECKANG);
    jj_consume_token(SEP);
    minneckang = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MINNECKMOMENT);
    jj_consume_token(SEP);
    minneckmoment = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(MINPOWER);
    jj_consume_token(SEP);
    minpower = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(NR_EXTRA_HALFS);
    jj_consume_token(SEP);
    nrExtraHalfs = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(NR_NORMAL_HALFS);
    jj_consume_token(SEP);
    nrNormalHalfs = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(OFFSIDE_ACTIVE_AREA_SIZE);
    jj_consume_token(SEP);
    offsideActiveAreaSize = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(OFFSIDE_KICK_MARGIN);
    jj_consume_token(SEP);
    offsideKickMargin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(OLCOACH_PORT);
    jj_consume_token(SEP);
    olcoachPort = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(OLD_COACH_HEAR);
    jj_consume_token(SEP);
    oldCoachHear = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PEN_ALLOW_MULT_KICKS);
    jj_consume_token(SEP);
    penAllowMultKicks = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PEN_BEFORE_SETUP_WAIT);
    jj_consume_token(SEP);
    penBeforeSetupWait = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PEN_COACH_MOVES_PLAYERS);
    jj_consume_token(SEP);
    penCoachMovesPlayers = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PEN_DIST_X);
    jj_consume_token(SEP);
    penDistX = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PEN_MAX_EXTRA_KICKS);
    jj_consume_token(SEP);
    penMaxExtraKicks = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PEN_MAX_GOALIE_DIST_X);
    jj_consume_token(SEP);
    penMaxGoalieDistX = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PEN_NR_KICKS);
    jj_consume_token(SEP);
    penNrKicks = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PEN_RANDOM_WINNER);
    jj_consume_token(SEP);
    penRandomWinner = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PEN_READY_WAIT);
    jj_consume_token(SEP);
    penReadyWait = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PEN_SETUP_WAIT);
    jj_consume_token(SEP);
    penSetupWait = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PEN_TAKEN_WAIT);
    jj_consume_token(SEP);
    penTakenWait = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PENALTY_SHOOT_OUTS);
    jj_consume_token(SEP);
    penaltyShootOuts = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_ACCEL_MAX);
    jj_consume_token(SEP);
    playerAccelMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_DECAY);
    jj_consume_token(SEP);
    playerDecay = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_RAND);
    jj_consume_token(SEP);
    playerRand = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_SIZE);
    jj_consume_token(SEP);
    playerSize = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_SPEED_MAX);
    jj_consume_token(SEP);
    playerSpeedMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_SPEED_MAX_MIN);
    jj_consume_token(SEP);
    playerSpeedMaxMin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_WEIGHT);
    jj_consume_token(SEP);
    playerSpeedMaxMin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(POINT_TO_BAN);
    jj_consume_token(SEP);
    pointToBan = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(POINT_TO_DURATION);
    jj_consume_token(SEP);
    pointToDuration = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PORT);
    jj_consume_token(SEP);
    port = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PRAND_FACTOR_L);
    jj_consume_token(SEP);
    prandFactorL = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PRAND_FACTOR_R);
    jj_consume_token(SEP);
    prandFactorR = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PROFILE);
    jj_consume_token(SEP);
    profile = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PROPER_GOAL_KICKS);
    jj_consume_token(SEP);
    properGoalKicks = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(QUANTIZE_STEP);
    jj_consume_token(SEP);
    quantizeStep = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(QUANTIZE_STEP_L);
    jj_consume_token(SEP);
    quantizeStepL = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(RECORD_MESSAGES);
    jj_consume_token(SEP);
    recordMessages = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(RECOVER_DEC);
    jj_consume_token(SEP);
    recoverDec = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(RECOVER_DEC_THR);
    jj_consume_token(SEP);
    recoverDecThr = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(RECOVER_INIT);
    jj_consume_token(SEP);
    recoverInit = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(RECOVER_MIN);
    jj_consume_token(SEP);
    recoverMin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(RECV_STEP);
    jj_consume_token(SEP);
    recvStep = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SAY_COACH_CNT_MAX);
    jj_consume_token(SEP);
    sayCoachCntMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SAY_COACH_MSG_SIZE);
    jj_consume_token(SEP);
    sayCoachMsgSize = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SAY_MSG_SIZE);
    jj_consume_token(SEP);
    sayMsgSize = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SEND_COMMS);
    jj_consume_token(SEP);
    sendComms = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SEND_STEP);
    jj_consume_token(SEP);
    sendStep = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SEND_VI_STEP);
    jj_consume_token(SEP);
    sendViStep = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SENSE_BODY_STEP);
    jj_consume_token(SEP);
    senseBodyStep = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SIDE_DASH_RATE);
    jj_consume_token(SEP);
    sideDashRate = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SIMULATOR_STEP);
    jj_consume_token(SEP);
    simulatorStep = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SLOW_DOWN_FACTOR);
    jj_consume_token(SEP);
    slowDownFactor = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SLOWNESS_ON_TOP_FOR_LEFT_TEAM);
    jj_consume_token(SEP);
    slownessOnTopForLeftTeam = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SLOWNESS_ON_TOP_FOR_RIGHT_TEAM);
    jj_consume_token(SEP);
    slownessOnTopForRightTeam = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(STAMINA_CAPACITY);
    jj_consume_token(SEP);
    staminaCapacity = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(STAMINA_INC_MAX);
    jj_consume_token(SEP);
    staminaIncMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(STAMINA_MAX);
    jj_consume_token(SEP);
    staminaMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(START_GOAL_L);
    jj_consume_token(SEP);
    startGoalL = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(START_GOAL_R);
    jj_consume_token(SEP);
    startGoalR = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(STOPPED_BALL_VEL);
    jj_consume_token(SEP);
    stoppedBallVel = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SYNCH_MICRO_SLEEP);
    jj_consume_token(SEP);
    synchMicroSleep = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SYNCH_MODE);
    jj_consume_token(SEP);
    synchMode = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SYNCH_OFFSET);
    jj_consume_token(SEP);
    synchOffset = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SYNCH_SEE_OFFSET);
    jj_consume_token(SEP);
    synchSeeOffset = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TACKLE_BACK_DIST);
    jj_consume_token(SEP);
    tackleBackDist = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TACKLE_CYCLES);
    jj_consume_token(SEP);
    tackleCycles = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TACKLE_DIST);
    jj_consume_token(SEP);
    tackleDist = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TACKLE_EXPONENT);
    jj_consume_token(SEP);
    tackleExponent = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TACKLE_POWER_RATE);
    jj_consume_token(SEP);
    tacklePowerRate = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TACKLE_WIDTH);
    jj_consume_token(SEP);
    tackleWidth = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TEAM_ACTUATOR_NOISE);
    jj_consume_token(SEP);
    teamActuatorNoise = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TEAM_L_START);
    jj_consume_token(SEP);
    teamLStart = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TEAM_R_START);
    jj_consume_token(SEP);
    teamRStart = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TEXT_LOG_COMPRESSION);
    jj_consume_token(SEP);
    textLogCompression = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TEXT_LOG_DATED);
    jj_consume_token(SEP);
    textLogDated = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TEXT_LOG_DIR);
    jj_consume_token(SEP);
    textLogDir = jj_consume_token(NAM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TEXT_LOG_FIXED);
    jj_consume_token(SEP);
    textLogFixed = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TEXT_LOG_FIXED_NAME);
    jj_consume_token(SEP);
    textLogFixedName = jj_consume_token(NAM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(TEXT_LOGGING);
    jj_consume_token(SEP);
    textLogging = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(USE_OFFSIDE);
    jj_consume_token(SEP);
    useOffside = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(VERBOSE);
    jj_consume_token(SEP);
    verbose = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(VISIBLE_ANGLE);
    jj_consume_token(SEP);
    visibleAngle = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(VISIBLE_DISTANCE);
    jj_consume_token(SEP);
    visibleDistance = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(WIND_ANG);
    jj_consume_token(SEP);
    windAng = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(WIND_DIR);
    jj_consume_token(SEP);
    windDir = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(WIND_FORCE);
    jj_consume_token(SEP);
    windForce = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(WIND_NONE);
    jj_consume_token(SEP);
    windNone = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(WIND_RAND);
    jj_consume_token(SEP);
    windRand = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(WIND_RANDOM);
    jj_consume_token(SEP);
    windRandom = jj_consume_token(NUM);
    jj_consume_token(CB);
                Double dAudioCutDist = new Double(audioCutDist.image);
                Double dAutoMode = new Double(autoMode.image);
                Double dBackDashRate = new Double(backDashRate.image);
                Double dBackPasses = new Double(backPasses.image);
                Double dBallAccelMax = new Double(ballAccelMax.image);
                Double dBallDecay = new Double(ballDecay.image);
                Double dBallRand = new Double(ballRand.image);
                Double dBallSize = new Double(ballSize.image);
                Double dBallSpeedMax = new Double(ballSpeedMax.image);
                Double dBallStuckArea = new Double(ballStuckArea.image);
                Double dBallWeight = new Double(ballWeight.image);
                Double dCatchBanCycle = new Double(catchBanCycle.image);
                Double dCatchProbability = new Double(catchProbability.image);
                Double dCatchableAreaL = new Double(catchableAreaL.image);
                Double dCatchableAreaW = new Double(catchableAreaW.image);
                Double dCkickMargin = new Double(ckickMargin.image);
                Double dClangAdviceWin = new Double(clangAdviceWin.image);
                Double dClangDefineWin = new Double(clangDefineWin.image);
                Double dClangDelWin = new Double(clangDelWin.image);
                Double dClangInfoWin = new Double(clangInfoWin.image);
                Double dClangMessDelay = new Double(clangMessDelay.image);
                Double dClangMessPerCycle = new Double(clangMessPerCycle.image);
                Double dClangMetaWin = new Double(clangMetaWin.image);
                Double dClangRuleWin = new Double(clangRuleWin.image);
                Double dClangWinSize = new Double(clangWinSize.image);
                Double dCoach = new Double(coach.image);
                Double dCoachPort = new Double(coachPort.image);
                Double dCoachWReferee = new Double(coachWReferee.image);
                Double dConnectWait = new Double(connectWait.image);
                Double dControlRadius = new Double(controlRadius.image);
                Double dDashAngleStep = new Double(dashAngleStep.image);
                Double dDashPowerRate = new Double(dashPowerRate.image);
                Double dDropBallTime = new Double(dropBallTime.image);
                Double dEffortDec = new Double(effortDec.image);
                Double dEffortDecThr = new Double(effortDecThr.image);
                Double dEffortInc = new Double(effortInc.image);
                Double dEffortIncThr = new Double(effortIncThr.image);
                Double dEffortInit = new Double(effortInit.image);
                Double dEffortMin = new Double(effortMin.image);
                Double dExtraHalfTime = new Double(extraHalfTime.image);
                Double dExtraStamina = new Double(extraStamina.image);
                Double dForbidKickOffOffside = new Double(forbidKickOffOffside.image);
                Double dFreeKickFaults = new Double(freeKickFaults.image);
                Double dFreeformSendPeriod = new Double(freeformSendPeriod.image);
                Double dFreeformWaitPeriod = new Double(freeformWaitPeriod.image);
                Double dFullstateL = new Double(fullstateL.image);
                Double dFullstateR = new Double(fullstateR.image);
                Double dGameLogCompression = new Double(gameLogCompression.image);
                Double dGameLogDated = new Double(gameLogDated.image);
                String sGameLogDir = new String(gameLogDir.image);
                Double dGameLogFixed = new Double(gameLogFixed.image);
                String sGameLogFixedName = new String(gameLogFixedName.image);
                Double dGameLogVersion = new Double(gameLogVersion.image);
                Double dGameLogging = new Double(gameLogging.image);
                Double dGameOverWait = new Double(gameOverWait.image);
                Double dGoalWidth = new Double(goalWidth.image);
                Double dGoalieMaxMoves = new Double(goalieMaxMoves.image);
                Double dHalfTime = new Double(halfTime.image);
                Double dHearDecay = new Double(hearDecay.image);
                Double dHearInc = new Double(hearInc.image);
                Double dHearMax = new Double(hearMax.image);
                Double dInertiaMoment = new Double(inertiaMoment.image);
                Double dKeepaway = new Double(keepaway.image);
                Double dKeepawayLength = new Double(keepawayLength.image);
                Double dKeepawayLogDated = new Double(keepawayLogDated.image);
                String sKeepawayLogDir = new String(keepawayLogDir.image);
                Double dKeepawayLogFixed = new Double(keepawayLogFixed.image);
                String sKeepawayLogFixedName = new String(keepawayLogFixedName.image);
                Double dKeepawayLogging = new Double(keepawayLogging.image);
                Double dKeepawayStart = new Double(keepawayStart.image);
                Double dKeepawayWidth = new Double(keepawayWidth.image);
                Double dKickOffWait = new Double(kickOffWait.image);
                Double dKickPowerRate = new Double(kickPowerRate.image);
                Double dKickRand = new Double(kickRand.image);
                Double dKickRandFactorL = new Double(kickRandFactorL.image);
                Double dKickRandFactorR = new Double(kickRandFactorR.image);
                Double dKickableMargin = new Double(kickableMargin.image);
                String sLandmarkFile = new String(landmarkFile.image);
                String sLogDateFormat = new String(logDateFormat.image);
                Double dLogTimes = new Double(logTimes.image);
                Double dMaxBackTacklePower = new Double(maxBackTacklePower.image);
                Double dMaxDashAngle = new Double(maxDashAngle.image);
                Double dMaxDashPower = new Double(maxDashPower.image);
                Double dMaxGoalKicks = new Double(maxGoalKicks.image);
                Double dMaxTacklePower = new Double(maxTacklePower.image);
                Double dMaxmoment = new Double(maxmoment.image);
                Double dMaxneckang = new Double(maxneckang.image);
                Double dMaxneckmoment = new Double(maxneckmoment.image);
                Double dMaxpower = new Double(maxpower.image);
                Double dMinDashAngle = new Double(minDashAngle.image);
                Double dMinDashPower = new Double(minDashPower.image);
                Double dMinmoment = new Double(minmoment.image);
                Double dMinneckang = new Double(minneckang.image);
                Double dMinneckmoment = new Double(minneckmoment.image);
                Double dMinpower = new Double(minpower.image);
                Double dNrExtraHalfs = new Double(nrExtraHalfs.image);
                Double dNrNormalHalfs = new Double(nrNormalHalfs.image);
                Double dOffsideActiveAreaSize = new Double(offsideActiveAreaSize.image);
                Double dOffsideKickMargin = new Double(offsideKickMargin.image);
                Double dOlcoachPort = new Double(olcoachPort.image);
                Double dOldCoachHear = new Double(oldCoachHear.image);
                Double dPenAllowMultKicks = new Double(penAllowMultKicks.image);
                Double dPenBeforeSetupWait = new Double(penBeforeSetupWait.image);
                Double dPenCoachMovesPlayers = new Double(penCoachMovesPlayers.image);
                Double dPenDistX = new Double(penDistX.image);
                Double dPenMaxExtraKicks = new Double(penMaxExtraKicks.image);
                Double dPenMaxGoalieDistX = new Double(penMaxGoalieDistX.image);
                Double dPenNrKicks = new Double(penNrKicks.image);
                Double dPenRandomWinner = new Double(penRandomWinner.image);
                Double dPenReadyWait = new Double(penReadyWait.image);
                Double dPenSetupWait = new Double(penSetupWait.image);
                Double dPenTakenWait = new Double(penTakenWait.image);
                Double dPenaltyShootOuts = new Double(penaltyShootOuts.image);
                Double dPlayerAccelMax = new Double(playerAccelMax.image);
                Double dPlayerDecay = new Double(playerDecay.image);
                Double dPlayerRand = new Double(playerRand.image);
                Double dPlayerSize = new Double(playerSize.image);
                Double dPlayerSpeedMax = new Double(playerSpeedMax.image);
                Double dPlayerSpeedMaxMin = new Double(playerSpeedMaxMin.image);
                Double dPlayerWeight = new Double(playerWeight.image);
                Double dPointToBan = new Double(pointToBan.image);
                Double dPointToDuration = new Double(pointToDuration.image);
                Double dPort = new Double(port.image);
                Double dPrandFactorL = new Double(prandFactorL.image);
                Double dPrandFactorR = new Double(prandFactorR.image);
                Double dProfile = new Double(profile.image);
                Double dProperGoalKicks = new Double(properGoalKicks.image);
                Double dQuantizeStep = new Double(quantizeStep.image);
                Double dQuantizeStepL = new Double(quantizeStepL.image);
                Double dRecordMessages = new Double(recordMessages.image);
                Double dRecoverDec = new Double(recoverDec.image);
                Double dRecoverDecThr = new Double(recoverDecThr.image);
                Double dRecoverInit = new Double(recoverInit.image);
                Double dRecoverMin = new Double(recoverMin.image);
                Double dRecvStep = new Double(recvStep.image);
                Double dSayCoachCntMax = new Double(sayCoachCntMax.image);
                Double dSayCoachMsgSize = new Double(sayCoachMsgSize.image);
                Double dSayMsgSize = new Double(sayMsgSize.image);
                Double dSendComms = new Double(sendComms.image);
                Double dSendStep = new Double(sendStep.image);
                Double dSendViStep = new Double(sendViStep.image);
                Double dSenseBodyStep = new Double(senseBodyStep.image);
                Double dSideDashRate = new Double(sideDashRate.image);
                Double dSimulatorStep = new Double(simulatorStep.image);
                Double dSlowDownFactor = new Double(slowDownFactor.image);
                Double dSlownessOnTopForLeftTeam = new Double(slownessOnTopForLeftTeam.image);
                Double dSlownessOnTopForRightTeam = new Double(slownessOnTopForRightTeam.image);
                Double dStaminaCapacity = new Double(staminaCapacity.image);
                Double dStaminaIncMax = new Double(staminaIncMax.image);
                Double dStaminaMax = new Double(staminaMax.image);
                Double dStartGoalL = new Double(startGoalL.image);
                Double dStartGoalR = new Double(startGoalR.image);
                Double dStoppedBallVel = new Double(stoppedBallVel.image);
                Double dSynchMicroSleep = new Double(synchMicroSleep.image);
                Double dSynchMode = new Double(synchMode.image);
                Double dSynchOffset = new Double(synchOffset.image);
                Double dSynchSeeOffset = new Double(synchSeeOffset.image);
                Double dTackleBackDist = new Double(tackleBackDist.image);
                Double dTackleCycles = new Double(tackleCycles.image);
                Double dTackleDist = new Double(tackleDist.image);
                Double dTackleExponent = new Double(tackleExponent.image);
                Double dTacklePowerRate = new Double(tacklePowerRate.image);
                Double dTackleWidth = new Double(tackleWidth.image);
                Double dTeamActuatorNoise = new Double(teamActuatorNoise.image);
                Double dTeamLStart = new Double(teamLStart.image);
                Double dTeamRStart = new Double(teamRStart.image);
                Double dTextLogCompression = new Double(textLogCompression.image);
                Double dTextLogDated = new Double(textLogDated.image);
                String sTextLogDir = new String(textLogDir.image);
                Double dTextLogFixed = new Double(textLogFixed.image);
                String sTextLogFixedName = new String(textLogFixedName.image);
                Double dTextLogging = new Double(textLogging.image);
                Double dUseOffside = new Double(useOffside.image);
                Double dVerbose = new Double(verbose.image);
                Double dVisibleAngle = new Double(visibleAngle.image);
                Double dVisibleDistance = new Double(visibleDistance.image);
                Double dWindAng = new Double(windAng.image);
                Double dWindDir = new Double(windDir.image);
                Double dWindForce = new Double(windForce.image);
                Double dWindNone = new Double(windNone.image);
                Double dWindRand = new Double(windRand.image);
                Double dWindRandom = new Double(windRandom.image);
        HashMap info                       = new HashMap<ServerParams, Object>();
        info.put(ServerParams.AUDIO_CUT_DIST, dAudioCutDist.doubleValue());
        info.put(ServerParams.AUTO_MODE, dAutoMode.doubleValue());
        info.put(ServerParams.BACK_DASH_RATE, dBackDashRate.doubleValue());
        info.put(ServerParams.BACK_PASSES, dBackPasses.doubleValue());
        info.put(ServerParams.BALL_ACCEL_MAX, dBallAccelMax.doubleValue());
        info.put(ServerParams.BALL_DECAY, dBallDecay.doubleValue());
        info.put(ServerParams.BALL_RAND, dBallRand.doubleValue());
        info.put(ServerParams.BALL_SIZE, dBallSize.doubleValue());
        info.put(ServerParams.BALL_SPEED_MAX, dBallSpeedMax.doubleValue());
        info.put(ServerParams.BALL_STUCK_AREA, dBallStuckArea.doubleValue());
        info.put(ServerParams.BALL_WEIGHT, dBallWeight.doubleValue());
        info.put(ServerParams.CATCH_BAN_CYCLE, dCatchBanCycle.doubleValue());
        info.put(ServerParams.CATCH_PROBABILITY, dCatchProbability.doubleValue());
        info.put(ServerParams.CATCHABLE_AREA_L, dCatchableAreaL.doubleValue());
        info.put(ServerParams.CATCHABLE_AREA_W, dCatchableAreaW.doubleValue());
        info.put(ServerParams.CKICK_MARGIN, dCkickMargin.doubleValue());
        info.put(ServerParams.CLANG_ADVICE_WIN, dClangAdviceWin.doubleValue());
        info.put(ServerParams.CLANG_DEFINE_WIN, dClangDefineWin.doubleValue());
        info.put(ServerParams.CLANG_DEL_WIN, dClangDelWin.doubleValue());
        info.put(ServerParams.CLANG_INFO_WIN, dClangInfoWin.doubleValue());
        info.put(ServerParams.CLANG_MESS_DELAY, dClangMessDelay.doubleValue());
        info.put(ServerParams.CLANG_MESS_PER_CYCLE, dClangMessPerCycle.doubleValue());
        info.put(ServerParams.CLANG_META_WIN, dClangMetaWin.doubleValue());
        info.put(ServerParams.CLANG_RULE_WIN, dClangRuleWin.doubleValue());
        info.put(ServerParams.CLANG_WIN_SIZE, dClangWinSize.doubleValue());
        info.put(ServerParams.COACH, dCoach.doubleValue());
        info.put(ServerParams.COACH_PORT, dCoachPort.doubleValue());
        info.put(ServerParams.COACH_W_REFEREE, dCoachWReferee.doubleValue());
        info.put(ServerParams.CONNECT_WAIT, dConnectWait.doubleValue());
        info.put(ServerParams.CONTROL_RADIUS, dControlRadius.doubleValue());
        info.put(ServerParams.DASH_ANGLE_STEP, dDashAngleStep.doubleValue());
        info.put(ServerParams.DASH_POWER_RATE, dDashPowerRate.doubleValue());
        info.put(ServerParams.DROP_BALL_TIME, dDropBallTime.doubleValue());
        info.put(ServerParams.EFFORT_DEC, dEffortDec.doubleValue());
        info.put(ServerParams.EFFORT_DEC_THR, dEffortDecThr.doubleValue());
        info.put(ServerParams.EFFORT_INC, dEffortInc.doubleValue());
        info.put(ServerParams.EFFORT_INC_THR, dEffortIncThr.doubleValue());
        info.put(ServerParams.EFFORT_INIT, dEffortInit.doubleValue());
        info.put(ServerParams.EFFORT_MIN, dEffortMin.doubleValue());
        info.put(ServerParams.EXTRA_HALF_TIME, dExtraHalfTime.doubleValue());
        info.put(ServerParams.EXTRA_STAMINA, dExtraStamina.doubleValue());
        info.put(ServerParams.FORBID_KICK_OFF_OFFSIDE, dForbidKickOffOffside.doubleValue());
        info.put(ServerParams.FREE_KICK_FAULTS, dFreeKickFaults.doubleValue());
        info.put(ServerParams.FREEFORM_SEND_PERIOD, dFreeformSendPeriod.doubleValue());
        info.put(ServerParams.FREEFORM_WAIT_PERIOD, dFreeformWaitPeriod.doubleValue());
        info.put(ServerParams.FULLSTATE_L, dFullstateL.doubleValue());
        info.put(ServerParams.FULLSTATE_R, dFullstateR.doubleValue());
        info.put(ServerParams.GAME_LOG_COMPRESSION, dGameLogCompression.doubleValue());
        info.put(ServerParams.GAME_LOG_FIXED_NAME, sGameLogFixedName.trim());
        info.put(ServerParams.GAME_LOG_VERSION, dGameLogVersion.doubleValue());
        info.put(ServerParams.GAME_LOGGING, dGameLogging.doubleValue());
        info.put(ServerParams.GAME_LOG_DATED, dGameLogDated.doubleValue());
        info.put(ServerParams.GAME_LOG_DIR, sGameLogDir.trim());
        info.put(ServerParams.GAME_LOG_FIXED, dGameLogFixed.doubleValue());
        info.put(ServerParams.GAME_OVER_WAIT, dGameOverWait.doubleValue());
        info.put(ServerParams.GOAL_WIDTH, dGoalWidth.doubleValue());
        info.put(ServerParams.GOALIE_MAX_MOVES, dGoalieMaxMoves.doubleValue());
        info.put(ServerParams.HALF_TIME, dHalfTime.doubleValue());
        info.put(ServerParams.HEAR_DECAY, dHearDecay.doubleValue());
        info.put(ServerParams.HEAR_INC, dHearInc.doubleValue());
        info.put(ServerParams.HEAR_MAX, dHearMax.doubleValue());
        info.put(ServerParams.INERTIA_MOMENT, dInertiaMoment.doubleValue());
        info.put(ServerParams.KEEPAWAY, dKeepaway.doubleValue());
        info.put(ServerParams.KEEPAWAY_LENGTH, dKeepawayLength.doubleValue());
        info.put(ServerParams.KEEPAWAY_LOG_DATED, dKeepawayLogDated.doubleValue());
        info.put(ServerParams.KEEPAWAY_LOG_DIR, sKeepawayLogDir.trim());
        info.put(ServerParams.KEEPAWAY_LOG_FIXED, dKeepawayLogFixed.doubleValue());
        info.put(ServerParams.KEEPAWAY_LOG_FIXED_NAME, sKeepawayLogFixedName.trim());
        info.put(ServerParams.KEEPAWAY_LOGGING, dKeepawayLogging.doubleValue());
        info.put(ServerParams.KEEPAWAY_START, dKeepawayStart.doubleValue());
        info.put(ServerParams.KEEPAWAY_WIDTH, dKeepawayWidth.doubleValue());
        info.put(ServerParams.KICK_OFF_WAIT, dKickOffWait.doubleValue());
        info.put(ServerParams.KICK_POWER_RATE, dKickPowerRate.doubleValue());
        info.put(ServerParams.KICK_RAND, dKickRand.doubleValue());
        info.put(ServerParams.KICK_RAND_FACTOR_L, dKickRandFactorL.doubleValue());
        info.put(ServerParams.KICK_RAND_FACTOR_R, dKickRandFactorR.doubleValue());
        info.put(ServerParams.KICKABLE_MARGIN, dKickableMargin.doubleValue());
        info.put(ServerParams.LANDMARK_FILE, sLandmarkFile.trim());
        info.put(ServerParams.LOG_DATE_FORMAT, sLogDateFormat.trim());
        info.put(ServerParams.LOG_TIMES, dLogTimes.doubleValue());
        info.put(ServerParams.MAX_BACK_TACKLE_POWER, dMaxBackTacklePower.doubleValue());
        info.put(ServerParams.MAX_DASH_ANGLE, dMaxDashAngle.doubleValue());
        info.put(ServerParams.MAX_DASH_POWER, dMaxDashPower.doubleValue());
        info.put(ServerParams.MAX_GOAL_KICKS, dMaxGoalKicks.doubleValue());
        info.put(ServerParams.MAX_TACKLE_POWER, dMaxTacklePower.doubleValue());
        info.put(ServerParams.MAXMOMENT, dMaxmoment.doubleValue());
        info.put(ServerParams.MAXNECKANG, dMaxneckang.doubleValue());
        info.put(ServerParams.MAXNECKMOMENT, dMaxneckmoment.doubleValue());
        info.put(ServerParams.MAXPOWER, dMaxpower.doubleValue());
        info.put(ServerParams.MIN_DASH_ANGLE, dMinDashAngle.doubleValue());
        info.put(ServerParams.MIN_DASH_POWER, dMinDashPower.doubleValue());
        info.put(ServerParams.MINMOMENT, dMinmoment.doubleValue());
        info.put(ServerParams.MINNECKANG, dMinneckang.doubleValue());
        info.put(ServerParams.MINNECKMOMENT, dMinneckmoment.doubleValue());
        info.put(ServerParams.MINPOWER, dMinpower.doubleValue());
        info.put(ServerParams.NR_EXTRA_HALFS, dNrExtraHalfs.doubleValue());
        info.put(ServerParams.NR_NORMAL_HALFS, dNrNormalHalfs.doubleValue());
        info.put(ServerParams.OFFSIDE_ACTIVE_AREA_SIZE, dOffsideActiveAreaSize.doubleValue());
        info.put(ServerParams.OFFSIDE_KICK_MARGIN, dOffsideKickMargin.doubleValue());
        info.put(ServerParams.OLCOACH_PORT, dOlcoachPort.doubleValue());
        info.put(ServerParams.OLD_COACH_HEAR, dOldCoachHear.doubleValue());
        info.put(ServerParams.PEN_ALLOW_MULT_KICKS, dPenAllowMultKicks.doubleValue());
        info.put(ServerParams.PEN_BEFORE_SETUP_WAIT, dPenBeforeSetupWait.doubleValue());
        info.put(ServerParams.PEN_COACH_MOVES_PLAYERS, dPenCoachMovesPlayers.doubleValue());
        info.put(ServerParams.PEN_DIST_X, dPenDistX.doubleValue());
        info.put(ServerParams.PEN_MAX_EXTRA_KICKS, dPenMaxExtraKicks.doubleValue());
        info.put(ServerParams.PEN_MAX_GOALIE_DIST_X, dPenMaxGoalieDistX.doubleValue());
        info.put(ServerParams.PEN_NR_KICKS, dPenNrKicks.doubleValue());
        info.put(ServerParams.PEN_RANDOM_WINNER, dPenRandomWinner.doubleValue());
        info.put(ServerParams.PEN_READY_WAIT, dPenReadyWait.doubleValue());
        info.put(ServerParams.PEN_SETUP_WAIT, dPenSetupWait.doubleValue());
        info.put(ServerParams.PEN_TAKEN_WAIT, dPenTakenWait.doubleValue());
        info.put(ServerParams.PENALTY_SHOOT_OUTS, dPenaltyShootOuts.doubleValue());
        info.put(ServerParams.PLAYER_ACCEL_MAX, dPlayerAccelMax.doubleValue());
        info.put(ServerParams.PLAYER_DECAY, dPlayerDecay.doubleValue());
        info.put(ServerParams.PLAYER_RAND, dPlayerRand.doubleValue());
        info.put(ServerParams.PLAYER_SIZE, dPlayerSize.doubleValue());
        info.put(ServerParams.PLAYER_SPEED_MAX, dPlayerSpeedMax.doubleValue());
        info.put(ServerParams.PLAYER_SPEED_MAX_MIN, dPlayerSpeedMaxMin.doubleValue());
        info.put(ServerParams.PLAYER_WEIGHT, dPlayerWeight.doubleValue());
        info.put(ServerParams.POINT_TO_BAN, dPointToBan.doubleValue());
        info.put(ServerParams.POINT_TO_DURATION, dPointToDuration.doubleValue());
        info.put(ServerParams.PORT, dPort.doubleValue());
        info.put(ServerParams.PRAND_FACTOR_L, dPrandFactorL.doubleValue());
        info.put(ServerParams.PRAND_FACTOR_R, dPrandFactorR.doubleValue());
        info.put(ServerParams.PROFILE, dProfile.doubleValue());
        info.put(ServerParams.PROPER_GOAL_KICKS, dProperGoalKicks.doubleValue());
        info.put(ServerParams.QUANTIZE_STEP, dQuantizeStep.doubleValue());
        info.put(ServerParams.QUANTIZE_STEP_L, dQuantizeStepL.doubleValue());
        info.put(ServerParams.RECORD_MESSAGES, dRecordMessages.doubleValue());
        info.put(ServerParams.RECOVER_DEC, dRecoverDec.doubleValue());
        info.put(ServerParams.RECOVER_DEC_THR, dRecoverDecThr.doubleValue());
        info.put(ServerParams.RECOVER_INIT, dRecoverInit.doubleValue());
        info.put(ServerParams.RECOVER_MIN, dRecoverMin.doubleValue());
        info.put(ServerParams.RECV_STEP, dRecvStep.doubleValue());
        info.put(ServerParams.SAY_COACH_CNT_MAX, dSayCoachCntMax.doubleValue());
        info.put(ServerParams.SAY_COACH_MSG_SIZE, dSayCoachMsgSize.doubleValue());
        info.put(ServerParams.SAY_MSG_SIZE, dSayMsgSize.doubleValue());
        info.put(ServerParams.SEND_COMMS, dSendComms.doubleValue());
        info.put(ServerParams.SEND_STEP, dSendStep.doubleValue());
        info.put(ServerParams.SEND_VI_STEP, dSendViStep.doubleValue());
        info.put(ServerParams.SENSE_BODY_STEP, dSenseBodyStep.doubleValue());
        info.put(ServerParams.SIDE_DASH_RATE, dSideDashRate.doubleValue());
        info.put(ServerParams.SIMULATOR_STEP, dSimulatorStep.doubleValue());
        info.put(ServerParams.SLOW_DOWN_FACTOR, dSlowDownFactor.doubleValue());
        info.put(ServerParams.SLOWNESS_ON_TOP_FOR_LEFT_TEAM, dSlownessOnTopForLeftTeam.doubleValue());
        info.put(ServerParams.SLOWNESS_ON_TOP_FOR_RIGHT_TEAM, dSlownessOnTopForRightTeam.doubleValue());
        info.put(ServerParams.STAMINA_CAPACITY, dStaminaCapacity.doubleValue());
        info.put(ServerParams.STAMINA_INC_MAX, dStaminaIncMax.doubleValue());
        info.put(ServerParams.STAMINA_MAX, dStaminaMax.doubleValue());
        info.put(ServerParams.START_GOAL_L, dStartGoalL.doubleValue());
        info.put(ServerParams.START_GOAL_R, dStartGoalR.doubleValue());
        info.put(ServerParams.STOPPED_BALL_VEL, dStoppedBallVel.doubleValue());
        info.put(ServerParams.SYNCH_MICRO_SLEEP, dSynchMicroSleep.doubleValue());
        info.put(ServerParams.SYNCH_MODE, dSynchMode.doubleValue());
        info.put(ServerParams.SYNCH_OFFSET, dSynchOffset.doubleValue());
        info.put(ServerParams.SYNCH_SEE_OFFSET, dSynchSeeOffset.doubleValue());
        info.put(ServerParams.TACKLE_BACK_DIST, dTackleBackDist.doubleValue());
        info.put(ServerParams.TACKLE_CYCLES, dTackleCycles.doubleValue());
        info.put(ServerParams.TACKLE_DIST, dTackleDist.doubleValue());
        info.put(ServerParams.TACKLE_EXPONENT, dTackleExponent.doubleValue());
        info.put(ServerParams.TACKLE_POWER_RATE, dTacklePowerRate.doubleValue());
        info.put(ServerParams.TACKLE_WIDTH, dTackleWidth.doubleValue());
        info.put(ServerParams.TEAM_ACTUATOR_NOISE, dTeamActuatorNoise.doubleValue());
        info.put(ServerParams.TEAM_L_START, dTeamLStart.doubleValue());
        info.put(ServerParams.TEAM_R_START, dTeamRStart.doubleValue());
        info.put(ServerParams.TEXT_LOG_COMPRESSION, dTextLogCompression.doubleValue());
        info.put(ServerParams.TEXT_LOG_DATED, dTextLogDated.doubleValue());
        info.put(ServerParams.TEXT_LOG_DIR, sTextLogDir.trim());
        info.put(ServerParams.TEXT_LOG_FIXED, dTextLogFixed.doubleValue());
        info.put(ServerParams.TEXT_LOG_FIXED_NAME, sTextLogFixedName.trim());
        info.put(ServerParams.TEXT_LOGGING, dTextLogging.doubleValue());
        info.put(ServerParams.USE_OFFSIDE, dUseOffside.doubleValue());
        info.put(ServerParams.VERBOSE, dVerbose.doubleValue());
        info.put(ServerParams.VISIBLE_ANGLE, dVisibleAngle.doubleValue());
        info.put(ServerParams.VISIBLE_DISTANCE, dVisibleDistance.doubleValue());
        info.put(ServerParams.WIND_ANG, dWindAng.doubleValue());
        info.put(ServerParams.WIND_DIR, dWindDir.doubleValue());
        info.put(ServerParams.WIND_FORCE, dWindForce.doubleValue());
        info.put(ServerParams.WIND_NONE, dWindNone.doubleValue());
        info.put(ServerParams.WIND_RAND, dWindRand.doubleValue());
        info.put(ServerParams.WIND_RANDOM, dWindRandom.doubleValue());
        controller.infoServerParam(info);
  }

  final public void startCPTCommand() throws ParseException {
     Token unum=null; Token type=null;
    unum = jj_consume_token(NUM);
    if (jj_2_1(2)) {
      type = jj_consume_token(NUM);
    } else {
      ;
    }
        Integer iUnum = 0;
        Integer iType = 0;

        if(type != null){
                        iUnum = new Integer(unum.image);
                        iType = new Integer(type.image);
                        controller.infoCPTOwn(iUnum.intValue(), iType.intValue());
                }else{
                  iUnum = new Integer(unum.image);
                  controller.infoCPTOther(iUnum.intValue());
                }
  }

  final public void startPlayerParamCommand() throws ParseException {
     Token allowMultDefaultType=null; Token dashPowerRateDeltaMax=null;
     Token dashPowerRateDeltaMin=null; Token effortMaxDeltaFactor=null;
     Token effortMinDeltaFactor=null; Token extraStaminaDeltaMax=null;
     Token extraStaminaDeltaMin=null; Token inertiaMomentDeltaFactor=null;
     Token kickRandDeltaFactor=null; Token kickableMarginDeltaMax=null;
     Token kickableMarginDeltaMin=null; Token newDashPowerRateDeltaMax=null;
     Token newDashPowerRateDeltaMin=null; Token newStaminaIncMaxDeltaFactor=null;
     Token playerDecayDeltaMax=null; Token playerDecayDeltaMin=null;
     Token playerSizeDeltaFactor=null; Token playerSpeedMaxDeltaMax=null;
     Token playerSpeedMaxDeltaMin=null; Token playerTypes=null; Token ptMax=null;
     Token randomSeed=null; Token staminaIncMaxDeltaFactor=null; Token subsMax=null;
    jj_consume_token(OB);
    jj_consume_token(ALLOW_MULT_DEFAULT_TYPE);
    jj_consume_token(SEP);
    allowMultDefaultType = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(DASH_POWER_RATE_DELTA_MAX);
    jj_consume_token(SEP);
    dashPowerRateDeltaMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(DASH_POWER_RATE_DELTA_MIN);
    jj_consume_token(SEP);
    dashPowerRateDeltaMin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EFFORT_MAX_DELTA_FACTOR);
    jj_consume_token(SEP);
    effortMaxDeltaFactor = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EFFORT_MIN_DELTA_FACTOR);
    jj_consume_token(SEP);
    effortMinDeltaFactor = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EXTRA_STAMINA_DELTA_MAX);
    jj_consume_token(SEP);
    extraStaminaDeltaMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EXTRA_STAMINA_DELTA_MIN);
    jj_consume_token(SEP);
    extraStaminaDeltaMin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(INERTIA_MOMENT_DELTA_FACTOR);
    jj_consume_token(SEP);
    inertiaMomentDeltaFactor = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KICK_RAND_DELTA_FACTOR);
    jj_consume_token(SEP);
    kickRandDeltaFactor = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KICKABLE_MARGIN_DELTA_MAX);
    jj_consume_token(SEP);
    kickableMarginDeltaMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KICKABLE_MARGIN_DELTA_MIN);
    jj_consume_token(SEP);
    kickableMarginDeltaMin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(NEW_DASH_POWER_RATE_DELTA_MAX);
    jj_consume_token(SEP);
    newDashPowerRateDeltaMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(NEW_DASH_POWER_RATE_DELTA_MIN);
    jj_consume_token(SEP);
    newDashPowerRateDeltaMin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(NEW_STAMINA_INC_MAX_DELTA_FACTOR);
    jj_consume_token(SEP);
    newStaminaIncMaxDeltaFactor = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_DECAY_DELTA_MAX);
    jj_consume_token(SEP);
    playerDecayDeltaMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_DECAY_DELTA_MIN);
    jj_consume_token(SEP);
    playerDecayDeltaMin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_SIZE_DELTA_FACTOR);
    jj_consume_token(SEP);
    playerSizeDeltaFactor = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_SPEED_MAX_DELTA_MAX);
    jj_consume_token(SEP);
    playerSpeedMaxDeltaMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_SPEED_MAX_DELTA_MIN);
    jj_consume_token(SEP);
    playerSpeedMaxDeltaMin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_TYPES);
    jj_consume_token(SEP);
    playerTypes = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PT_MAX);
    jj_consume_token(SEP);
    ptMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(RANDOM_SEED);
    jj_consume_token(SEP);
    randomSeed = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(STAMINA_INC_MAX_DELTA_FACTOR);
    jj_consume_token(SEP);
    staminaIncMaxDeltaFactor = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(SUBS_MAX);
    jj_consume_token(SEP);
    subsMax = jj_consume_token(NUM);
    jj_consume_token(CB);
                Double dAllowMultDefaultType = new Double(allowMultDefaultType.image);
                Double dDashPowerRateDeltaMax = new Double(dashPowerRateDeltaMax.image);
                Double dDashPowerRateDeltaMin = new Double(dashPowerRateDeltaMin.image);
                Double dEffortMaxDeltaFactor = new Double(effortMaxDeltaFactor.image);
                Double dEffortMinDeltaFactor = new Double(effortMinDeltaFactor.image);
                Double dExtraStaminaDeltaMax = new Double(extraStaminaDeltaMax.image);
                Double dExtraStaminaDeltaMin = new Double(extraStaminaDeltaMin.image);
                Double dInertiaMomentDeltaFactor = new Double(inertiaMomentDeltaFactor.image);
                Double dKickRandDeltaFactor = new Double(kickRandDeltaFactor.image);
                Double dKickableMarginDeltaMax = new Double(kickableMarginDeltaMax.image);
                Double dKickableMarginDeltaMin = new Double(kickableMarginDeltaMin.image);
                Double dNewDashPowerRateDeltaMax = new Double(newDashPowerRateDeltaMax.image);
                Double dNewDashPowerRateDeltaMin = new Double(newDashPowerRateDeltaMin.image);
                Double dNewStaminaIncMaxDeltaFactor = new Double(newStaminaIncMaxDeltaFactor.image);
                Double dPlayerDecayDeltaMax = new Double(playerDecayDeltaMax.image);
                Double dPlayerDecayDeltaMin = new Double(playerDecayDeltaMin.image);
                Double dPlayerTypes = new Double(playerTypes.image);
                Double dPtMax = new Double(ptMax.image);
                Double dRandomSeed = new Double(randomSeed.image);
                Double dStaminaIncMaxDeltaFactor = new Double(staminaIncMaxDeltaFactor.image);
                Double dSubsMax = new Double(subsMax.image);
                controller.infoPlayerParam(
                  dAllowMultDefaultType.doubleValue(), dDashPowerRateDeltaMax.doubleValue(),
                  dDashPowerRateDeltaMin.doubleValue(), dEffortMaxDeltaFactor.doubleValue(),
                  dEffortMinDeltaFactor.doubleValue(), dExtraStaminaDeltaMax.doubleValue(),
                  dExtraStaminaDeltaMin.doubleValue(), dInertiaMomentDeltaFactor.doubleValue(),
                  dKickRandDeltaFactor.doubleValue(), dKickableMarginDeltaMax.doubleValue(),
                  dKickableMarginDeltaMin.doubleValue(),
                  dNewDashPowerRateDeltaMax.doubleValue(), dNewDashPowerRateDeltaMin.doubleValue(),
                  dNewStaminaIncMaxDeltaFactor.doubleValue(), dPlayerDecayDeltaMax.doubleValue(),
                  dPlayerDecayDeltaMin.doubleValue(), dPlayerTypes.doubleValue(), dPtMax.doubleValue(),
                  dRandomSeed.doubleValue(), dStaminaIncMaxDeltaFactor.doubleValue(), dSubsMax.doubleValue());
  }

  final public void startPlayerTypeCommand() throws ParseException {
     Token id=null; Token playerSpeedMax=null; Token staminaIncMax=null; Token playerDecay=null;
     Token inertiaMoment=null; Token dashPowerRate=null; Token playerSize=null;
     Token kickableMargin=null; Token kickRand=null; Token extraStamina=null;
     Token effortMax=null; Token effortMin=null;
    jj_consume_token(OB);
    jj_consume_token(ID);
    jj_consume_token(SEP);
    id = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_SPEED_MAX);
    jj_consume_token(SEP);
    playerSpeedMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(STAMINA_INC_MAX);
    jj_consume_token(SEP);
    staminaIncMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_DECAY);
    jj_consume_token(SEP);
    playerDecay = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(INERTIA_MOMENT);
    jj_consume_token(SEP);
    inertiaMoment = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(DASH_POWER_RATE);
    jj_consume_token(SEP);
    dashPowerRate = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(PLAYER_SIZE);
    jj_consume_token(SEP);
    playerSize = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KICKABLE_MARGIN);
    jj_consume_token(SEP);
    kickableMargin = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(KICK_RAND);
    jj_consume_token(SEP);
    kickRand = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EXTRA_STAMINA);
    jj_consume_token(SEP);
    extraStamina = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EFFORT_MAX);
    jj_consume_token(SEP);
    effortMax = jj_consume_token(NUM);
    jj_consume_token(CB);
    jj_consume_token(OB);
    jj_consume_token(EFFORT_MIN);
    jj_consume_token(SEP);
    effortMin = jj_consume_token(NUM);
    jj_consume_token(CB);
                Integer iid = new Integer(id.image);
                Double dPlayerSpeedMax = new Double(playerSpeedMax.image);
                Double dStaminaIncMax = new Double(staminaIncMax.image);
                Double dPlayerDecay = new Double(playerDecay.image);
                Double dInertiaMoment = new Double(inertiaMoment.image);
                Double dDashPowerRate = new Double(dashPowerRate.image);
                Double dPlayerSize = new Double(playerSize.image);
                Double dKickableMargin = new Double(kickableMargin.image);
                Double dKickRand = new Double(kickRand.image);
                Double dExtraStamina = new Double(extraStamina.image);
                Double dEffortMax = new Double(effortMax.image);
                Double dEffortMin = new Double(effortMin.image);
                controller.infoPlayerType(
                  iid.intValue(), dPlayerSpeedMax.doubleValue(), dStaminaIncMax.doubleValue(),
                  dPlayerDecay.doubleValue(), dInertiaMoment.doubleValue(), dDashPowerRate.doubleValue(),
                  dPlayerSize.doubleValue(), dKickableMargin.doubleValue(), dKickRand.doubleValue(),
                  dExtraStamina.doubleValue(), dEffortMax.doubleValue(), dEffortMin.doubleValue());
  }

// Basic init command.
  final public void startInitCommand() throws ParseException {
   Token side=null;
    if (jj_2_2(2)) {
      side = jj_consume_token(L);
    } else if (jj_2_3(2)) {
      side = jj_consume_token(R);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      coach.setTeamEast(side.image.charAt(0) == 'r');
  }

// Simple enum commands.
  final public void startErrorCommand() throws ParseException {
   Errors error = null;
    error = error();
        controller.infoHearError(error);
  }

  final public void startOkCommand() throws ParseException {
     Ok ok = null;
    ok = ok();
            controller.infoHearOk(ok);
  }

  final public void startWarningCommand() throws ParseException {
     Warning warning = null;
    warning = warning();
            controller.infoHearWarning(warning);
  }

  final public void startHearCommand() throws ParseException {
   Token num;Token msg;
    jj_consume_token(NUM);
    jj_consume_token(SEP);
    if (jj_2_4(2)) {
      jj_consume_token(SELF);
    } else if (jj_2_5(2)) {
      jj_consume_token(REFEREE);
      jj_consume_token(SEP);
      hearReferee();
    } else if (jj_2_6(2)) {
      num = jj_consume_token(NUM);
      jj_consume_token(SEP);
      msg = jj_consume_token(NAM);
        Double dNum = new Double(num.image);
        controller.infoHearPlayer(dNum.doubleValue(), msg.image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void hearReferee() throws ParseException {
   PlayMode playMode=null; RefereeMessage refereeMessage=null;
    if (jj_2_7(2)) {
      playMode = playMode();
      controller.infoHearPlayMode(playMode);
    } else if (jj_2_8(2)) {
      refereeMessage = refereeMessage();
      controller.infoHearReferee(refereeMessage);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Enum Switches
  final public Warning warning() throws ParseException {
    if (jj_2_9(2)) {
      jj_consume_token(NO_TEAM_FOUND);
        {if (true) return Warning.NO_TEAM_FOUND;}
    } else if (jj_2_10(2)) {
      jj_consume_token(NO_SUCH_PLAYER);
        {if (true) return Warning.NO_SUCH_PLAYER;}
    } else if (jj_2_11(2)) {
      jj_consume_token(CANNOT_SUB_WHILE_PLAYON);
        {if (true) return Warning.CANNOT_SUB_WHILE_PLAYON;}
    } else if (jj_2_12(2)) {
      jj_consume_token(NO_SUBS_LEFT);
        {if (true) return Warning.NO_SUBS_LEFT;}
    } else if (jj_2_13(2)) {
      jj_consume_token(MAX_OF_THAT_TYPE_ON_FIELD);
        {if (true) return Warning.MAX_OF_THAT_TYPE_ON_FIELD;}
    } else if (jj_2_14(2)) {
      jj_consume_token(CANNOT_CHANGE_GOALIE);
        {if (true) return Warning.CANNOT_CHANGE_GOALIE;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Ok ok() throws ParseException {
    if (jj_2_15(2)) {
      jj_consume_token(MOVE);
        {if (true) return Ok.MOVE;}
    } else if (jj_2_16(2)) {
      jj_consume_token(CHANGE_MODE);
        {if (true) return Ok.CHANGE_MODE;}
    } else if (jj_2_17(2)) {
      jj_consume_token(CHECK_BALL);
        {if (true) return Ok.CHECK_BALL;}
    } else if (jj_2_18(2)) {
      jj_consume_token(START);
        {if (true) return Ok.START;}
    } else if (jj_2_19(2)) {
      jj_consume_token(RECOVER);
        {if (true) return Ok.RECOVER;}
    } else if (jj_2_20(2)) {
      jj_consume_token(EAR);
        {if (true) return Ok.EAR;}
    } else if (jj_2_21(2)) {
      jj_consume_token(SAY);
        {if (true) return Ok.SAY;}
    } else if (jj_2_22(2)) {
      jj_consume_token(CHANGE_PLAYER_TYPE);
        {if (true) return Ok.CHANGE_PLAYER_TYPE;}
    } else if (jj_2_23(2)) {
      jj_consume_token(LOOK);
        {if (true) return Ok.LOOK;}
    } else if (jj_2_24(2)) {
      jj_consume_token(TEAM_NAMES);
        {if (true) return Ok.TEAM_NAMES;}
    } else if (jj_2_25(2)) {
      jj_consume_token(TEAM_GRAPHIC);
        {if (true) return Ok.TEAM_GRAPHIC;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Errors error() throws ParseException {
    if (jj_2_26(2)) {
      jj_consume_token(ILLEGAL_MODE);
      {if (true) return Errors.ILLEGAL_MODE;}
    } else if (jj_2_27(2)) {
      jj_consume_token(ILLEGAL_COMMAND_FORM);
      {if (true) return Errors.ILLEGAL_COMMAND_FORM;}
    } else if (jj_2_28(2)) {
      jj_consume_token(ILLEGAL_OBJECT_FORM);
      {if (true) return Errors.ILLEGAL_OBJECT_FORM;}
    } else if (jj_2_29(2)) {
      jj_consume_token(NO_MORE_TEAM_OR_PLAYER);
      {if (true) return Errors.NO_MORE_TEAM_OR_PLAYER;}
    } else if (jj_2_30(2)) {
      jj_consume_token(NO_MORE_TEAM_OR_PLAYER_OR_GOALIE);
      {if (true) return Errors.NO_MORE_TEAM_OR_PLAYER_OR_GOALIE;}
    } else if (jj_2_31(2)) {
      jj_consume_token(NO_MORE_PLAYER_OR_GOALIE_OR_ILLEGAL_CLIENT_VERSION);
      {if (true) return Errors.NO_MORE_PLAYER_OR_GOALIE_OR_ILLEGAL_CLIENT_VERSION;}
    } else if (jj_2_32(2)) {
      jj_consume_token(RECONNECT);
      {if (true) return Errors.RECONNECT;}
    } else if (jj_2_33(2)) {
      jj_consume_token(UNKNOWN_COMMAND);
      {if (true) return Errors.UNKNOWN_COMMAND;}
    } else if (jj_2_34(2)) {
      jj_consume_token(TOO_MANY_MOVES);
      {if (true) return Errors.TOO_MANY_MOVES;}
    } else if (jj_2_35(2)) {
      jj_consume_token(SAID_TOO_MANY_MESSAGES);
      {if (true) return Errors.SAID_TOO_MANY_MESSAGES;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PlayMode playMode() throws ParseException {
    if (jj_2_36(2)) {
      jj_consume_token(BEFORE_KICK_OFF);
      {if (true) return PlayMode.BEFORE_KICK_OFF;}
    } else if (jj_2_37(2)) {
      jj_consume_token(TIME_OVER);
      {if (true) return PlayMode.TIME_OVER;}
    } else if (jj_2_38(2)) {
      jj_consume_token(PLAY_ON);
      {if (true) return PlayMode.PLAY_ON;}
    } else if (jj_2_39(2)) {
      jj_consume_token(KICK_OFF_L);
      if (coach.isTeamEast())
        {if (true) return PlayMode.KICK_OFF_OTHER;}
      else
        {if (true) return PlayMode.KICK_OFF_OWN;}
    } else if (jj_2_40(2)) {
      jj_consume_token(KICK_OFF_R);
      if (!coach.isTeamEast())
        {if (true) return PlayMode.KICK_OFF_OTHER;}
      else
        {if (true) return PlayMode.KICK_OFF_OWN;}
    } else if (jj_2_41(2)) {
      jj_consume_token(KICK_IN_L);
      if (coach.isTeamEast())
        {if (true) return PlayMode.KICK_IN_OTHER;}
      else
        {if (true) return PlayMode.KICK_IN_OWN;}
    } else if (jj_2_42(2)) {
      jj_consume_token(KICK_IN_R);
      if (!coach.isTeamEast())
        {if (true) return PlayMode.KICK_IN_OTHER;}
      else
        {if (true) return PlayMode.KICK_IN_OWN;}
    } else if (jj_2_43(2)) {
      jj_consume_token(FREE_KICK_R);
      if (!coach.isTeamEast())
        {if (true) return PlayMode.FREE_KICK_OTHER;}
      else
        {if (true) return PlayMode.FREE_KICK_OWN;}
    } else if (jj_2_44(2)) {
      jj_consume_token(FREE_KICK_L);
      if (coach.isTeamEast())
        {if (true) return PlayMode.FREE_KICK_OTHER;}
      else
        {if (true) return PlayMode.FREE_KICK_OWN;}
    } else if (jj_2_45(2)) {
      jj_consume_token(FREE_KICK_FAULT_R);
      if (!coach.isTeamEast())
        {if (true) return PlayMode.FREE_KICK_FAULT_OTHER;}
      else
        {if (true) return PlayMode.FREE_KICK_FAULT_OWN;}
    } else if (jj_2_46(2)) {
      jj_consume_token(FREE_KICK_FAULT_L);
      if (coach.isTeamEast())
        {if (true) return PlayMode.FREE_KICK_FAULT_OTHER;}
      else
        {if (true) return PlayMode.FREE_KICK_FAULT_OWN;}
    } else if (jj_2_47(2)) {
      jj_consume_token(CORNER_KICK_R);
      if (!coach.isTeamEast())
        {if (true) return PlayMode.CORNER_KICK_OTHER;}
      else
        {if (true) return PlayMode.CORNER_KICK_OWN;}
    } else if (jj_2_48(2)) {
      jj_consume_token(CORNER_KICK_L);
      if (coach.isTeamEast())
        {if (true) return PlayMode.CORNER_KICK_OTHER;}
      else
        {if (true) return PlayMode.CORNER_KICK_OWN;}
    } else if (jj_2_49(2)) {
      jj_consume_token(GOAL_KICK_R);
      if (!coach.isTeamEast())
        {if (true) return PlayMode.GOAL_KICK_OTHER;}
      else
        {if (true) return PlayMode.GOAL_KICK_OWN;}
    } else if (jj_2_50(2)) {
      jj_consume_token(GOAL_KICK_L);
      if (coach.isTeamEast())
        {if (true) return PlayMode.GOAL_KICK_OTHER;}
      else
        {if (true) return PlayMode.GOAL_KICK_OWN;}
    } else if (jj_2_51(2)) {
      jj_consume_token(GOAL_R);
      if (!coach.isTeamEast())
        {if (true) return PlayMode.GOAL_OTHER;}
      else
        {if (true) return PlayMode.GOAL_OWN;}
    } else if (jj_2_52(2)) {
      jj_consume_token(GOAL_L);
      if (coach.isTeamEast())
        {if (true) return PlayMode.GOAL_OTHER;}
      else
        {if (true) return PlayMode.GOAL_OWN;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public RefereeMessage refereeMessage() throws ParseException {
    if (jj_2_53(2)) {
      jj_consume_token(OFFSIDE_R);
      if (!coach.isTeamEast())
        {if (true) return RefereeMessage.OFFSIDE_OTHER;}
      else
        {if (true) return RefereeMessage.OFFSIDE_OWN;}
    } else if (jj_2_54(2)) {
      jj_consume_token(OFFSIDE_L);
      if (coach.isTeamEast())
        {if (true) return RefereeMessage.OFFSIDE_OTHER;}
      else
        {if (true) return RefereeMessage.OFFSIDE_OWN;}
    } else if (jj_2_55(2)) {
      jj_consume_token(FOUL_R);
      if (!coach.isTeamEast())
        {if (true) return RefereeMessage.FOUL_OTHER;}
      else
        {if (true) return RefereeMessage.FOUL_OWN;}
    } else if (jj_2_56(2)) {
      jj_consume_token(FOUL_L);
      if (coach.isTeamEast())
        {if (true) return RefereeMessage.FOUL_OTHER;}
      else
        {if (true) return RefereeMessage.FOUL_OWN;}
    } else if (jj_2_57(2)) {
      jj_consume_token(HALF_TIME);
        {if (true) return RefereeMessage.HALF_TIME;}
    } else if (jj_2_58(2)) {
      jj_consume_token(DROP_BALL);
        {if (true) return RefereeMessage.DROP_BALL;}
    } else if (jj_2_59(2)) {
      jj_consume_token(TIME_UP);
        {if (true) return RefereeMessage.TIME_UP;}
    } else if (jj_2_60(2)) {
      jj_consume_token(TIME_UP_WITHOUT_A_TEAM);
        {if (true) return RefereeMessage.TIME_UP_WITHOUT_A_TEAM;}
    } else if (jj_2_61(2)) {
      jj_consume_token(TIME_EXTENDED);
        {if (true) return RefereeMessage.TIME_EXTENDED;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_3_17() {
    if (jj_scan_token(CHECK_BALL)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(TIME_UP)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(CHANGE_MODE)) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(DROP_BALL)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(KICK_IN_R)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(MOVE)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(HALF_TIME)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(KICK_IN_L)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(CANNOT_CHANGE_GOALIE)) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(FOUL_L)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(MAX_OF_THAT_TYPE_ON_FIELD)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(KICK_OFF_R)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(NO_SUBS_LEFT)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(FOUL_R)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(CANNOT_SUB_WHILE_PLAYON)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(KICK_OFF_L)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(NO_SUCH_PLAYER)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(OFFSIDE_L)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(PLAY_ON)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(NO_TEAM_FOUND)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(TIME_OVER)) return true;
    return false;
  }

  private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(OFFSIDE_R)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(BEFORE_KICK_OFF)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(SAID_TOO_MANY_MESSAGES)) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(GOAL_L)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(TOO_MANY_MOVES)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(UNKNOWN_COMMAND)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(NUM)) return true;
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(GOAL_R)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(REFEREE)) return true;
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(SELF)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(RECONNECT)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(NO_MORE_PLAYER_OR_GOALIE_OR_ILLEGAL_CLIENT_VERSION)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(GOAL_KICK_L)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(NO_MORE_TEAM_OR_PLAYER_OR_GOALIE)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(NO_MORE_TEAM_OR_PLAYER)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(GOAL_KICK_R)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(ILLEGAL_OBJECT_FORM)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(ILLEGAL_COMMAND_FORM)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(CORNER_KICK_L)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(ILLEGAL_MODE)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(R)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(CORNER_KICK_R)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(TEAM_GRAPHIC)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(TEAM_NAMES)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(FREE_KICK_FAULT_L)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(LOOK)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(L)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(CHANGE_PLAYER_TYPE)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(FREE_KICK_FAULT_R)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(SAY)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(EAR)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(FREE_KICK_L)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(RECOVER)) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(TIME_EXTENDED)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(START)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(TIME_UP_WITHOUT_A_TEAM)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(FREE_KICK_R)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CmdParserCoachTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
      jj_la1_init_8();
      jj_la1_init_9();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {};
   }
   private static void jj_la1_init_8() {
      jj_la1_8 = new int[] {};
   }
   private static void jj_la1_init_9() {
      jj_la1_9 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[61];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CmdParserCoach(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CmdParserCoach(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CmdParserCoachTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CmdParserCoach(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CmdParserCoachTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CmdParserCoach(CmdParserCoachTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CmdParserCoachTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[296];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 296; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 61; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
