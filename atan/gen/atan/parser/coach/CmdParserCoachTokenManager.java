
/* Generated By:JavaCC: Do not edit this line. CmdParserCoachTokenManager.java */
package atan.parser.coach;

//~--- non-JDK imports --------------------------------------------------------

import atan.model.ActionsCoach;
import atan.model.ControllerCoach;
import atan.model.enums.Errors;
import atan.model.enums.Ok;
import atan.model.enums.PlayMode;
import atan.model.enums.RefereeMessage;
import atan.model.enums.ServerParams;
import atan.model.enums.Warning;

import atan.parser.objects.ObjName;
import atan.parser.objects.ObjNameBall;
import atan.parser.objects.ObjNameFlagGoalLeft;
import atan.parser.objects.ObjNameFlagGoalRight;
import atan.parser.objects.ObjNameNull;
import atan.parser.objects.ObjNamePlayerEast;
import atan.parser.objects.ObjNamePlayerWest;

//~--- JDK imports ------------------------------------------------------------

import java.io.StringReader;

import java.util.HashMap;

/** Token Manager. */
public class CmdParserCoachTokenManager implements CmdParserCoachConstants {
    static final int[] jjnextStates = {30, 37, };

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, null, null, "\147\157\141\154\151\145", null, "\163\145\154\146",
        "\166\151\145\167\137\155\157\144\145", "\150\151\147\150", "\154\157\167", "\167\151\144\145",
        "\156\141\162\162\157\167", "\156\157\162\155\141\154", "\163\164\141\155\151\156\141", "\163\160\145\145\144",
        "\150\145\141\144\137\141\156\147\154\145", "\153\151\143\153", "\144\141\163\150", "\164\165\162\156",
        "\163\141\171", "\145\171\145\40\157\156", "\145\171\145\40\157\146\146",
        "\164\165\162\156\137\156\145\143\153", "\142\145\146\157\162\145\137\153\151\143\153\137\157\146\146",
        "\164\151\155\145\137\157\166\145\162", "\160\154\141\171\137\157\156", "\144\162\157\160\137\142\141\154\154",
        "\153\151\143\153\137\157\146\146\137\154", "\153\151\143\153\137\157\146\146\137\162",
        "\153\151\143\153\137\151\156\137\154", "\153\151\143\153\137\151\156\137\162",
        "\146\162\145\145\137\153\151\143\153\137\162", "\146\162\145\145\137\153\151\143\153\137\154",
        "\146\162\145\145\137\153\151\143\153\137\146\141\165\154\164\137\162",
        "\146\162\145\145\137\153\151\143\153\137\146\141\165\154\164\137\154",
        "\143\157\162\156\145\162\137\153\151\143\153\137\162", "\143\157\162\156\145\162\137\153\151\143\153\137\154",
        "\147\157\141\154\137\153\151\143\153\137\162", "\147\157\141\154\137\153\151\143\153\137\154", null, null,
        "\146\157\165\154\137\162", "\146\157\165\154\137\154", "\157\146\146\163\151\144\145\137\162",
        "\157\146\146\163\151\144\145\137\154", "\150\141\154\146\137\164\151\155\145", "\164\151\155\145\137\165\160",
        "\164\151\155\145\137\165\160\137\167\151\164\150\157\165\164\137\141\137\164\145\141\155",
        "\164\151\155\145\137\145\170\164\145\156\144\145\144", "\151\154\154\145\147\141\154\137\155\157\144\145",
        "\151\154\154\145\147\141\154\137\143\157\155\155\141\156\144\137\146\157\162\155",
        "\151\154\154\145\147\141\154\137\157\142\152\145\143\164\137\146\157\162\155",
        "\156\157\137\155\157\162\145\137\164\145\141\155\137\157\162\137\160\154\141\171\145\162",
        "\156\157\137\155\157\162\145\137\164\145\141\155\137\157\162\137\160\154\141\171\145\162\137\157\162\137\147\157\141\154\151\145",
        "\156\157\137\155\157\162\145\137\160\154\141\171\145\162\137\157\162\137\147\157\141\154\151\145\137\157\162\137\151\154\154\145\147\141\154\137\143\154\151\145\156\164\137\166\145\162\163\151\157\156",
        "\162\145\143\157\156\156\145\143\164", "\165\156\153\156\157\167\156\137\143\157\155\155\141\156\144",
        "\164\157\157\137\155\141\156\171\137\155\157\166\145\163",
        "\163\141\151\144\137\164\157\157\137\155\141\156\171\137\155\145\163\163\141\147\145\163", "\155\157\166\145",
        "\143\150\141\156\147\145\137\155\157\144\145", "\143\150\145\143\153\137\142\141\154\154",
        "\163\164\141\162\164", "\162\145\143\157\166\145\162", "\145\141\162",
        "\143\150\141\156\147\145\137\160\154\141\171\145\162\137\164\171\160\145", "\154\157\157\153",
        "\164\145\141\155\137\156\141\155\145\163", "\164\145\141\155\137\147\162\141\160\150\151\143",
        "\156\157\137\164\145\141\155\137\146\157\165\156\144",
        "\156\157\137\163\165\143\150\137\160\154\141\171\145\162",
        "\143\141\156\156\157\164\137\163\165\142\137\167\150\151\154\145\137\160\154\141\171\157\156",
        "\156\157\137\163\165\142\163\137\154\145\146\164",
        "\155\141\170\137\157\146\137\164\150\141\164\137\164\171\160\145\137\157\156\137\146\151\145\154\144",
        "\143\141\156\156\157\164\137\143\150\141\156\147\145\137\147\157\141\154\151\145",
        "\143\150\141\156\147\145\137\166\151\145\167", "\143\141\164\143\150", "\151\144",
        "\160\154\141\171\145\162\137\163\160\145\145\144\137\155\141\170",
        "\163\164\141\155\151\156\141\137\151\156\143\137\155\141\170",
        "\160\154\141\171\145\162\137\144\145\143\141\171", "\151\156\145\162\164\151\141\137\155\157\155\145\156\164",
        "\160\154\141\171\145\162\137\163\151\172\145", "\153\151\143\153\141\142\154\145\137\155\141\162\147\151\156",
        "\153\151\143\153\137\162\141\156\144", "\145\170\164\162\141\137\163\164\141\155\151\156\141",
        "\145\146\146\157\162\164\137\155\141\170", "\145\146\146\157\162\164\137\155\151\156",
        "\141\154\154\157\167\137\155\165\154\164\137\144\145\146\141\165\154\164\137\164\171\160\145",
        "\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145\137\144\145\154\164\141\137\155\141\170",
        "\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145\137\144\145\154\164\141\137\155\151\156",
        "\145\146\146\157\162\164\137\155\141\170\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\145\146\146\157\162\164\137\155\151\156\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\145\170\164\162\141\137\163\164\141\155\151\156\141\137\144\145\154\164\141\137\155\141\170",
        "\145\170\164\162\141\137\163\164\141\155\151\156\141\137\144\145\154\164\141\137\155\151\156",
        "\151\156\145\162\164\151\141\137\155\157\155\145\156\164\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\153\151\143\153\137\162\141\156\144\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\153\151\143\153\141\142\154\145\137\155\141\162\147\151\156\137\144\145\154\164\141\137\155\141\170",
        "\153\151\143\153\141\142\154\145\137\155\141\162\147\151\156\137\144\145\154\164\141\137\155\151\156",
        "\156\145\167\137\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145\137\144\145\154\164\141\137\155\141\170",
        "\156\145\167\137\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145\137\144\145\154\164\141\137\155\151\156",
        "\156\145\167\137\163\164\141\155\151\156\141\137\151\156\143\137\155\141\170\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\160\154\141\171\145\162\137\144\145\143\141\171\137\144\145\154\164\141\137\155\141\170",
        "\160\154\141\171\145\162\137\144\145\143\141\171\137\144\145\154\164\141\137\155\151\156",
        "\160\154\141\171\145\162\137\163\151\172\145\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\160\154\141\171\145\162\137\163\160\145\145\144\137\155\141\170\137\144\145\154\164\141\137\155\141\170",
        "\160\154\141\171\145\162\137\163\160\145\145\144\137\155\141\170\137\144\145\154\164\141\137\155\151\156",
        "\160\154\141\171\145\162\137\164\171\160\145\163", "\160\164\137\155\141\170",
        "\162\141\156\144\157\155\137\163\145\145\144",
        "\163\164\141\155\151\156\141\137\151\156\143\137\155\141\170\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\163\165\142\163\137\155\141\170", "\141\165\144\151\157\137\143\165\164\137\144\151\163\164",
        "\141\165\164\157\137\155\157\144\145", "\142\141\143\153\137\144\141\163\150\137\162\141\164\145",
        "\142\141\143\153\137\160\141\163\163\145\163", "\142\141\154\154\137\141\143\143\145\154\137\155\141\170",
        "\142\141\154\154\137\144\145\143\141\171", "\142\141\154\154\137\162\141\156\144",
        "\142\141\154\154\137\163\151\172\145", "\142\141\154\154\137\163\160\145\145\144\137\155\141\170",
        "\142\141\154\154\137\163\164\165\143\153\137\141\162\145\141", "\142\141\154\154\137\167\145\151\147\150\164",
        "\143\141\164\143\150\137\142\141\156\137\143\171\143\154\145",
        "\143\141\164\143\150\137\160\162\157\142\141\142\151\154\151\164\171",
        "\143\141\164\143\150\141\142\154\145\137\141\162\145\141\137\154",
        "\143\141\164\143\150\141\142\154\145\137\141\162\145\141\137\167",
        "\143\153\151\143\153\137\155\141\162\147\151\156",
        "\143\154\141\156\147\137\141\144\166\151\143\145\137\167\151\156",
        "\143\154\141\156\147\137\144\145\146\151\156\145\137\167\151\156",
        "\143\154\141\156\147\137\144\145\154\137\167\151\156",
        "\143\154\141\156\147\137\151\156\146\157\137\167\151\156",
        "\143\154\141\156\147\137\155\145\163\163\137\144\145\154\141\171",
        "\143\154\141\156\147\137\155\145\163\163\137\160\145\162\137\143\171\143\154\145",
        "\143\154\141\156\147\137\155\145\164\141\137\167\151\156",
        "\143\154\141\156\147\137\162\165\154\145\137\167\151\156",
        "\143\154\141\156\147\137\167\151\156\137\163\151\172\145", "\143\157\141\143\150",
        "\143\157\141\143\150\137\160\157\162\164", "\143\157\141\143\150\137\167\137\162\145\146\145\162\145\145",
        "\143\157\156\156\145\143\164\137\167\141\151\164", "\143\157\156\164\162\157\154\137\162\141\144\151\165\163",
        "\144\141\163\150\137\141\156\147\154\145\137\163\164\145\160",
        "\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145",
        "\144\162\157\160\137\142\141\154\154\137\164\151\155\145", "\145\146\146\157\162\164\137\144\145\143",
        "\145\146\146\157\162\164\137\144\145\143\137\164\150\162", "\145\146\146\157\162\164\137\151\156\143",
        "\145\146\146\157\162\164\137\151\156\143\137\164\150\162", "\145\146\146\157\162\164\137\151\156\151\164",
        "\145\170\164\162\141\137\150\141\154\146\137\164\151\155\145",
        "\146\157\162\142\151\144\137\153\151\143\153\137\157\146\146\137\157\146\146\163\151\144\145",
        "\146\162\145\145\137\153\151\143\153\137\146\141\165\154\164\163",
        "\146\162\145\145\146\157\162\155\137\163\145\156\144\137\160\145\162\151\157\144",
        "\146\162\145\145\146\157\162\155\137\167\141\151\164\137\160\145\162\151\157\144",
        "\146\165\154\154\163\164\141\164\145\137\154", "\146\165\154\154\163\164\141\164\145\137\162",
        "\147\141\155\145\137\154\157\147\137\143\157\155\160\162\145\163\163\151\157\156",
        "\147\141\155\145\137\154\157\147\137\144\141\164\145\144", "\147\141\155\145\137\154\157\147\137\144\151\162",
        "\147\141\155\145\137\154\157\147\137\146\151\170\145\144",
        "\147\141\155\145\137\154\157\147\137\146\151\170\145\144\137\156\141\155\145",
        "\147\141\155\145\137\154\157\147\137\166\145\162\163\151\157\156",
        "\147\141\155\145\137\154\157\147\147\151\156\147", "\147\141\155\145\137\157\166\145\162\137\167\141\151\164",
        "\147\157\141\154\137\167\151\144\164\150", "\147\157\141\154\151\145\137\155\141\170\137\155\157\166\145\163",
        "\150\145\141\162\137\144\145\143\141\171", "\150\145\141\162\137\151\156\143",
        "\150\145\141\162\137\155\141\170", "\153\145\145\160\141\167\141\171",
        "\153\145\145\160\141\167\141\171\137\154\145\156\147\164\150",
        "\153\145\145\160\141\167\141\171\137\154\157\147\137\144\141\164\145\144",
        "\153\145\145\160\141\167\141\171\137\154\157\147\137\144\151\162",
        "\153\145\145\160\141\167\141\171\137\154\157\147\137\146\151\170\145\144",
        "\153\145\145\160\141\167\141\171\137\154\157\147\137\146\151\170\145\144\137\156\141\155\145",
        "\153\145\145\160\141\167\141\171\137\154\157\147\147\151\156\147",
        "\153\145\145\160\141\167\141\171\137\163\164\141\162\164",
        "\153\145\145\160\141\167\141\171\137\167\151\144\164\150",
        "\153\151\143\153\137\157\146\146\137\167\141\151\164",
        "\153\151\143\153\137\160\157\167\145\162\137\162\141\164\145",
        "\153\151\143\153\137\162\141\156\144\137\146\141\143\164\157\162\137\154",
        "\153\151\143\153\137\162\141\156\144\137\146\141\143\164\157\162\137\162",
        "\154\141\156\144\155\141\162\153\137\146\151\154\145",
        "\154\157\147\137\144\141\164\145\137\146\157\162\155\141\164", "\154\157\147\137\164\151\155\145\163",
        "\155\141\170\137\142\141\143\153\137\164\141\143\153\154\145\137\160\157\167\145\162",
        "\155\141\170\137\144\141\163\150\137\141\156\147\154\145",
        "\155\141\170\137\144\141\163\150\137\160\157\167\145\162",
        "\155\141\170\137\147\157\141\154\137\153\151\143\153\163",
        "\155\141\170\137\164\141\143\153\154\145\137\160\157\167\145\162", "\155\141\170\155\157\155\145\156\164",
        "\155\141\170\156\145\143\153\141\156\147", "\155\141\170\156\145\143\153\155\157\155\145\156\164",
        "\155\141\170\160\157\167\145\162", "\155\151\156\137\144\141\163\150\137\141\156\147\154\145",
        "\155\151\156\137\144\141\163\150\137\160\157\167\145\162", "\155\151\156\155\157\155\145\156\164",
        "\155\151\156\156\145\143\153\141\156\147", "\155\151\156\156\145\143\153\155\157\155\145\156\164",
        "\155\151\156\160\157\167\145\162", "\156\162\137\145\170\164\162\141\137\150\141\154\146\163",
        "\156\162\137\156\157\162\155\141\154\137\150\141\154\146\163",
        "\157\146\146\163\151\144\145\137\141\143\164\151\166\145\137\141\162\145\141\137\163\151\172\145",
        "\157\146\146\163\151\144\145\137\153\151\143\153\137\155\141\162\147\151\156",
        "\157\154\143\157\141\143\150\137\160\157\162\164", "\157\154\144\137\143\157\141\143\150\137\150\145\141\162",
        "\160\145\156\137\141\154\154\157\167\137\155\165\154\164\137\153\151\143\153\163",
        "\160\145\156\137\142\145\146\157\162\145\137\163\145\164\165\160\137\167\141\151\164",
        "\160\145\156\137\143\157\141\143\150\137\155\157\166\145\163\137\160\154\141\171\145\162\163",
        "\160\145\156\137\144\151\163\164\137\170",
        "\160\145\156\137\155\141\170\137\145\170\164\162\141\137\153\151\143\153\163",
        "\160\145\156\137\155\141\170\137\147\157\141\154\151\145\137\144\151\163\164\137\170",
        "\160\145\156\137\156\162\137\153\151\143\153\163",
        "\160\145\156\137\162\141\156\144\157\155\137\167\151\156\156\145\162",
        "\160\145\156\137\162\145\141\144\171\137\167\141\151\164",
        "\160\145\156\137\163\145\164\165\160\137\167\141\151\164",
        "\160\145\156\137\164\141\153\145\156\137\167\141\151\164",
        "\160\145\156\141\154\164\171\137\163\150\157\157\164\137\157\165\164\163",
        "\160\154\141\171\145\162\137\141\143\143\145\154\137\155\141\170",
        "\160\154\141\171\145\162\137\162\141\156\144",
        "\160\154\141\171\145\162\137\163\160\145\145\144\137\155\141\170\137\155\151\156",
        "\160\154\141\171\145\162\137\167\145\151\147\150\164", "\160\157\151\156\164\137\164\157\137\142\141\156",
        "\160\157\151\156\164\137\164\157\137\144\165\162\141\164\151\157\156", "\160\157\162\164",
        "\160\162\141\156\144\137\146\141\143\164\157\162\137\154",
        "\160\162\141\156\144\137\146\141\143\164\157\162\137\162", "\160\162\157\146\151\154\145",
        "\160\162\157\160\145\162\137\147\157\141\154\137\153\151\143\153\163",
        "\161\165\141\156\164\151\172\145\137\163\164\145\160",
        "\161\165\141\156\164\151\172\145\137\163\164\145\160\137\154",
        "\162\145\143\157\162\144\137\155\145\163\163\141\147\145\163", "\162\145\143\157\166\145\162\137\144\145\143",
        "\162\145\143\157\166\145\162\137\144\145\143\137\164\150\162",
        "\162\145\143\157\166\145\162\137\151\156\151\164", "\162\145\143\157\166\145\162\137\155\151\156",
        "\162\145\143\166\137\163\164\145\160", "\163\141\171\137\143\157\141\143\150\137\143\156\164\137\155\141\170",
        "\163\141\171\137\143\157\141\143\150\137\155\163\147\137\163\151\172\145",
        "\163\141\171\137\155\163\147\137\163\151\172\145", "\163\145\156\144\137\143\157\155\155\163",
        "\163\145\156\144\137\163\164\145\160", "\163\145\156\144\137\166\151\137\163\164\145\160",
        "\163\145\156\163\145\137\142\157\144\171\137\163\164\145\160",
        "\163\151\144\145\137\144\141\163\150\137\162\141\164\145",
        "\163\151\155\165\154\141\164\157\162\137\163\164\145\160",
        "\163\154\157\167\137\144\157\167\156\137\146\141\143\164\157\162",
        "\163\154\157\167\156\145\163\163\137\157\156\137\164\157\160\137\146\157\162\137\154\145\146\164\137\164\145\141\155",
        "\163\154\157\167\156\145\163\163\137\157\156\137\164\157\160\137\146\157\162\137\162\151\147\150\164\137\164\145\141\155",
        "\163\164\141\155\151\156\141\137\143\141\160\141\143\151\164\171",
        "\163\164\141\155\151\156\141\137\155\141\170", "\163\164\141\162\164\137\147\157\141\154\137\154",
        "\163\164\141\162\164\137\147\157\141\154\137\162",
        "\163\164\157\160\160\145\144\137\142\141\154\154\137\166\145\154",
        "\163\171\156\143\150\137\155\151\143\162\157\137\163\154\145\145\160",
        "\163\171\156\143\150\137\155\157\144\145", "\163\171\156\143\150\137\157\146\146\163\145\164",
        "\163\171\156\143\150\137\163\145\145\137\157\146\146\163\145\164",
        "\164\141\143\153\154\145\137\142\141\143\153\137\144\151\163\164",
        "\164\141\143\153\154\145\137\143\171\143\154\145\163", "\164\141\143\153\154\145\137\144\151\163\164",
        "\164\141\143\153\154\145\137\145\170\160\157\156\145\156\164",
        "\164\141\143\153\154\145\137\160\157\167\145\162\137\162\141\164\145",
        "\164\141\143\153\154\145\137\167\151\144\164\150",
        "\164\145\141\155\137\141\143\164\165\141\164\157\162\137\156\157\151\163\145",
        "\164\145\141\155\137\154\137\163\164\141\162\164", "\164\145\141\155\137\162\137\163\164\141\162\164",
        "\164\145\170\164\137\154\157\147\137\143\157\155\160\162\145\163\163\151\157\156",
        "\164\145\170\164\137\154\157\147\137\144\141\164\145\144", "\164\145\170\164\137\154\157\147\137\144\151\162",
        "\164\145\170\164\137\154\157\147\137\146\151\170\145\144",
        "\164\145\170\164\137\154\157\147\137\146\151\170\145\144\137\156\141\155\145",
        "\164\145\170\164\137\154\157\147\147\151\156\147", "\165\163\145\137\157\146\146\163\151\144\145",
        "\166\145\162\142\157\163\145", "\166\151\163\151\142\154\145\137\141\156\147\154\145",
        "\166\151\163\151\142\154\145\137\144\151\163\164\141\156\143\145", "\167\151\156\144\137\141\156\147",
        "\167\151\156\144\137\144\151\162", "\167\151\156\144\137\146\157\162\143\145",
        "\167\151\156\144\137\156\157\156\145", "\167\151\156\144\137\162\141\156\144",
        "\167\151\156\144\137\162\141\156\144\157\155", "\143", "\164", "\162", "\50", "\51", "\40", null, null,
    };
    static final long[] jjtoSkip  = {0x1eL, 0x0L, 0x0L, 0x0L, 0x0L, };
    static final long[] jjtoToken = {0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL,
                                     0x3ffffffffffL, };

    /** Lexer state names. */
    public static final String[] lexStateNames = {"DEFAULT", };
    int                          curLexState   = 0;

    /** Debug output. */
    public java.io.PrintStream debugStream     = System.out;
    int                        defaultLexState = 0;
    private final int[]        jjrounds        = new int[38];
    private final int[]        jjstateSet      = new int[76];
    /**
     *
     */
    protected char             curChar;
    /**
     *
     */
    protected SimpleCharStream input_stream;
    int                        jjmatchedKind;
    int                        jjmatchedPos;
    int                        jjnewStateCnt;
    int                        jjround;

    /**
     * Constructor. 
     * @param stream
     */
    public CmdParserCoachTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag) {
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }
        input_stream = stream;
    }

    /**
     * Constructor. 
     * @param stream
     * @param lexState
     */
    public CmdParserCoachTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Set debug output. 
     * @param ds
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    /**
     * 
     * @param pos
     * @param active0
     * @param active1
     * @param active2
     * @param active3
     * @param active4
     * @return
     */
    private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3,
            long active4) {
        switch (pos) {
            case 0 :
                if ((active0 & 0x8070060051000000L) != 0L || (active1 & 0x7268cL) != 0L || (active2 & 0xffffeL) != 0L
                        || (active4 & 0xc00fffe00L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x180000000400L) != 0L || (active2 & 0x1ff800000000L) != 0L) {
                    jjmatchedKind = 9;
                    return 30;
                }
                if ((active0 & 0x5f8e001f0eff7000L) != 0L || (active1 & 0xf00ffffea8d853L) != 0L
                        || (active2 & 0x1fffe0001ff00000L) != 0L || (active3 & 0xfff03000001fffffL) != 0L
                        || (active4 & 0x3ff0001ffL) != 0L) {
                    jjmatchedKind = 297;
                    return 22;
                }
                if ((active0 & 0x181e000000000L) != 0L || (active2 & 0x7e0000000L) != 0L) {
                    jjmatchedKind = 6;
                    return 22;
                }
                if ((active0 & 0x80000000L) != 0L || (active1 & 0x7f00001500000L) != 0L
                        || (active3 & 0xfffffe00000L) != 0L) {
                    jjmatchedKind = 7;
                    return 22;
                }
                if ((active0 & 0x8000L) != 0L || (active1 & 0x100L) != 0L || (active2 & 0xe000000000000000L) != 0L) {
                    jjmatchedKind = 8;
                    return 22;
                }
                if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x8000000000020L) != 0L
                        || (active3 & 0xfc00000000000L) != 0L || (active4 & 0x1000000000L) != 0L) {
                    return 10;
                }
                if ((active0 & 0x20000000L) != 0L || (active1 & 0xff00000000000000L) != 0L || (active2 & 0x1L) != 0L) {
                    jjmatchedKind = 5;
                    return 22;
                }
                return -1;
            case 1 :
                if ((active1 & 0x80000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x180000000400L) != 0L || (active2 & 0x180000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 1;
                    return 29;
                }
                if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x20L) != 0L
                        || (active3 & 0xfc00000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 1;
                    return 9;
                }
                if ((active0 & 0xdfff87fffffff000L) != 0L || (active1 & 0xfffffffffff7ffdfL) != 0L
                        || (active2 & 0xffffe7ffffffffffL) != 0L || (active3 & 0xfff03fffffffffffL) != 0L
                        || (active4 & 0x3ffffffffL) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 1;
                    return 22;
                }
                return -1;
            case 2 :
                if ((active0 & 0x2008000L) != 0L || (active1 & 0x40L) != 0L || (active3 & 0x70000000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xffff87fffdff7000L) != 0L || (active1 & 0xfffffffffff7ffbfL) != 0L
                        || (active2 & 0xffffe7ffffffffffL) != 0L || (active3 & 0xff8fffffffffffffL) != 0L
                        || (active4 & 0x3ffffffffL) != 0L) {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 2;
                    }
                    return 22;
                }
                if ((active0 & 0x180000000400L) != 0L || (active2 & 0x180000000000L) != 0L) {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 2;
                    }
                    return 28;
                }
                return -1;
            case 3 :
                if ((active0 & 0x1e11c15000L) != 0L || (active1 & 0x1c186000102L) != 0L
                        || (active2 & 0x1e00000000300000L) != 0L || (active3 & 0x8000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x180000000400L) != 0L || (active2 & 0x180000000000L) != 0L) {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 3;
                    }
                    return 27;
                }
                if ((active0 & 0xffff87e1e03e2000L) != 0L || (active1 & 0xfffffe3e79f7febdL) != 0L
                        || (active2 & 0xe1ffe7ffffcfffffL) != 0L || (active3 & 0xffffff7fffffffffL) != 0L
                        || (active4 & 0x3ffffffffL) != 0L) {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 3;
                    }
                    return 22;
                }
                if ((active0 & 0xc000000L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 2;
                    }
                    return -1;
                }
                return -1;
            case 4 :
                if ((active0 & 0x100000L) != 0L || (active1 & 0x40010L) != 0L || (active2 & 0x3801eL) != 0L
                        || (active4 & 0xcL) != 0L) {
                    return 22;
                }
                if ((active0 & 0xc000000L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x180000000000L) != 0L || (active2 & 0x80000000000L) != 0L) {
                    if (jjmatchedPos != 4) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 4;
                    }
                    return 26;
                }
                if ((active0 & 0xffff87fff02e2400L) != 0L || (active1 & 0xfffffffffff3feadL) != 0L
                        || (active2 & 0xfffff7fffffc7fe1L) != 0L || (active3 & 0xffffff7fffffffffL) != 0L
                        || (active4 & 0x3fffffff3L) != 0L) {
                    if (jjmatchedPos != 4) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 4;
                    }
                    return 22;
                }
                return -1;
            case 5 :
                if ((active0 & 0x1800000060400L) != 0L || (active1 & 0x4000000000000L) != 0L
                        || (active2 & 0x100000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xc000000L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 2;
                    }
                    return -1;
                }
                if ((active0 & 0xfffe1ffff0282000L) != 0L || (active1 & 0xfffbfffffff3feadL) != 0L
                        || (active2 & 0xffffefffffff7fffL) != 0L || (active3 & 0xffffff7fffffffffL) != 0L
                        || (active4 & 0x3ffffffffL) != 0L) {
                    if (jjmatchedPos != 5) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 5;
                    }
                    return 22;
                }
                return -1;
            case 6 :
                if ((active0 & 0x30000080080000L) != 0L || (active1 & 0x10000000200020L) != 0L
                        || (active3 & 0x7840000000000L) != 0L || (active4 & 0x2000003L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xffce1fff70202000L) != 0L || (active1 & 0xffebffffffd3fe8dL) != 0L
                        || (active2 & 0xffffffffffff7fffL) != 0L || (active3 & 0xfff87b7fffffffffL) != 0L
                        || (active4 & 0x3fdfffffcL) != 0L) {
                    if (jjmatchedPos != 6) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 6;
                    }
                    return 22;
                }
                if ((active0 & 0x8000000L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 2;
                    }
                    return -1;
                }
                return -1;
            case 7 :
                if ((active1 & 0x20000000000000L) != 0L || (active2 & 0x1ffc00000000000L) != 0L
                        || (active3 & 0x4100L) != 0L || (active4 & 0x30000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xffee1fff70202000L) != 0L || (active1 & 0xffdbfffffff3fe8dL) != 0L
                        || (active2 & 0xfe003fffffff7fffL) != 0L || (active3 & 0xfffffb7fffffbeffL) != 0L
                        || (active4 & 0x3cdffffffL) != 0L) {
                    if (jjmatchedPos != 7) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 7;
                    }
                    return 22;
                }
                return -1;
            case 8 :
                if ((active0 & 0x200e001950002000L) != 0L || (active1 & 0x3080004004000000L) != 0L
                        || (active2 & 0x9800000000400000L) != 0L || (active3 & 0x108000000000820L) != 0L
                        || (active4 & 0x380000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xdfe01fe620200000L) != 0L || (active1 & 0xcf5bffbffbf3fe8dL) != 0L
                        || (active2 & 0x67fe3fffffbf7fffL) != 0L || (active3 & 0xfef7fb7fffffb6dfL) != 0L
                        || (active4 & 0x4dffffffL) != 0L) {
                    if (jjmatchedPos != 8) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 8;
                    }
                    return 22;
                }
                return -1;
            case 9 :
                if ((active0 & 0x600200000L) != 0L || (active1 & 0x800000630000208L) != 0L
                        || (active2 & 0x280007810000L) != 0L || (active3 & 0x80000001001040L) != 0L
                        || (active4 & 0x40000040L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xdfe01fe020000000L) != 0L || (active1 & 0xc75bfff9cbf3fc85L) != 0L
                        || (active2 & 0x7ffe17fff87e7fffL) != 0L || (active3 & 0xfe77fb7ffeffa69fL) != 0L
                        || (active4 & 0x20dffffbfL) != 0L) {
                    if (jjmatchedPos != 9) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 9;
                    }
                    return 22;
                }
                return -1;
            case 10 :
                if ((active0 & 0x186000000000L) != 0L || (active1 & 0x208400001020004L) != 0L
                        || (active2 & 0x608000001L) != 0L || (active3 & 0x5800400000000L) != 0L
                        || (active4 & 0x201000802L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xdfe0078020000000L) != 0L || (active1 & 0xc553bfffcaf1fc81L) != 0L
                        || (active2 & 0x7ffe17f9f57e7ffeL) != 0L || (active3 & 0xfe727b7bfeffa69fL) != 0L
                        || (active4 & 0xcfff7bdL) != 0L) {
                    if (jjmatchedPos != 10) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 10;
                    }
                    return 22;
                }
                return -1;
            case 11 :
                if ((active0 & 0x80000000000000L) != 0L || (active1 & 0x2300000404400L) != 0L
                        || (active2 & 0x22000040020L) != 0L || (active3 & 0x242002008080000L) != 0L
                        || (active4 & 0x93408cL) != 0L) {
                    return 22;
                }
                if ((active0 & 0xdf60078020000000L) != 0L || (active1 & 0xc551cfffcab1b881L) != 0L
                        || (active2 & 0x7ffe15d9f57a7fdeL) != 0L || (active3 & 0xfc317b5bf6f7a69fL) != 0L
                        || (active4 & 0xc6cb731L) != 0L) {
                    if (jjmatchedPos != 11) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 11;
                    }
                    return 22;
                }
                return -1;
            case 12 :
                if ((active0 & 0x40060000000000L) != 0L || (active1 & 0x1808000800L) != 0L
                        || (active2 & 0x2200000000000100L) != 0L || (active3 & 0x301000002080L) != 0L
                        || (active4 & 0x4000400L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xdf20018020000000L) != 0L || (active1 & 0xc551ffe7c2b1b081L) != 0L
                        || (active2 & 0x5dfe15d9f57a7edeL) != 0L || (active3 & 0xfc314b4bf6f7861fL) != 0L
                        || (active4 & 0x86cb331L) != 0L) {
                    if (jjmatchedPos != 12) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 12;
                    }
                    return 22;
                }
                return -1;
            case 13 :
                if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x4540002000801000L) != 0L
                        || (active2 & 0x18004d005487200L) != 0L || (active3 & 0x18000300e010860eL) != 0L
                        || (active4 & 0x680000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x5f20018020000000L) != 0L || (active1 & 0x8011ffdfc231a081L) != 0L
                        || (active2 & 0x5c7e1109f0320cdeL) != 0L || (active3 & 0xe431684b16e70011L) != 0L
                        || (active4 & 0x804b331L) != 0L) {
                    if (jjmatchedPos != 13) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 13;
                    }
                    return 22;
                }
                return -1;
            case 14 :
                if ((active0 & 0x1f20018000000000L) != 0L || (active1 & 0x1fe7e4011a081L) != 0L
                        || (active2 & 0x187c1189e0000cdcL) != 0L || (active3 & 0xe030084b16e60011L) != 0L
                        || (active4 & 0x844a331L) != 0L) {
                    if (jjmatchedPos != 14) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 14;
                    }
                    return 22;
                }
                if ((active0 & 0x4000000020000000L) != 0L || (active1 & 0x8010018182200000L) != 0L
                        || (active2 & 0x4402000010320002L) != 0L || (active3 & 0x401600000010000L) != 0L
                        || (active4 & 0x1000L) != 0L) {
                    return 22;
                }
                return -1;
            case 15 :
                if ((active1 & 0x1800000100000L) != 0L || (active2 & 0x481100400004d8L) != 0L
                        || (active3 & 0x2000000a00000010L) != 0L || (active4 & 0x8000311L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1f20018000000000L) != 0L || (active1 & 0x107fffc001a081L) != 0L
                        || (active2 & 0x18340089a0000804L) != 0L || (active3 & 0xc030084116e60001L) != 0L
                        || (active4 & 0x44a020L) != 0L) {
                    if (jjmatchedPos != 15) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 15;
                    }
                    return 22;
                }
                return -1;
            case 16 :
                if ((active0 & 0x18000000000L) != 0L || (active2 & 0x4L) != 0L || (active3 & 0x10084010000000L) != 0L
                        || (active4 & 0x2020L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1f20000000000000L) != 0L || (active1 & 0x11ffffc001a081L) != 0L
                        || (active2 & 0x18340089a0000800L) != 0L || (active3 & 0xc020000906e60001L) != 0L
                        || (active4 & 0x448000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 16;
                    return 22;
                }
                return -1;
            case 17 :
                if ((active1 & 0x80L) != 0L || (active2 & 0x1834000000000000L) != 0L
                        || (active3 & 0x20000100000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1f20000000000000L) != 0L || (active1 & 0x11ffffc001a001L) != 0L
                        || (active2 & 0x89a0000800L) != 0L || (active3 & 0xc000000806e60001L) != 0L
                        || (active4 & 0x448000L) != 0L) {
                    if (jjmatchedPos != 17) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 17;
                    }
                    return 22;
                }
                return -1;
            case 18 :
                if ((active0 & 0x200000000000000L) != 0L || (active2 & 0x8000000000L) != 0L
                        || (active3 & 0x2040000L) != 0L || (active4 & 0x408000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1d20000000000000L) != 0L || (active1 & 0x11ffffc001a001L) != 0L
                        || (active2 & 0x200009a0000800L) != 0L || (active3 & 0xc000000804e20001L) != 0L
                        || (active4 & 0x40000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 18;
                    return 22;
                }
                return -1;
            case 19 :
                if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x10000L) != 0L
                        || (active2 & 0x980000800L) != 0L || (active3 & 0x800200000L) != 0L
                        || (active4 & 0x40000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1c20000000000000L) != 0L || (active1 & 0x11ffffc000a001L) != 0L
                        || (active2 & 0x20000020000000L) != 0L || (active3 & 0xc000000004c20001L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 19;
                    return 22;
                }
                return -1;
            case 20 :
                if ((active3 & 0x4400001L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1c20000000000000L) != 0L || (active1 & 0x11ffffc000a001L) != 0L
                        || (active2 & 0x20000020000000L) != 0L || (active3 & 0xc000000000820000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 20;
                    return 22;
                }
                return -1;
            case 21 :
                if ((active0 & 0xc20000000000000L) != 0L || (active1 & 0x304000000001L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x11cfbfc000a000L) != 0L
                        || (active2 & 0x20000020000000L) != 0L || (active3 & 0xc000000000820000L) != 0L) {
                    if (jjmatchedPos != 21) {
                        jjmatchedKind = 297;
                        jjmatchedPos  = 21;
                    }
                    return 22;
                }
                return -1;
            case 22 :
                if ((active1 & 0x1e40002000L) != 0L || (active2 & 0x20000020000000L) != 0L
                        || (active3 & 0x800000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0x11cfa180008000L) != 0L
                        || (active3 & 0xc000000000020000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 22;
                    return 22;
                }
                return -1;
            case 23 :
                if ((active1 & 0x400000000000L) != 0L || (active3 & 0x20000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0x118fa180008000L) != 0L
                        || (active3 & 0xc000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 23;
                    return 22;
                }
                return -1;
            case 24 :
                if ((active1 & 0x18180008000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0x118e2000000000L) != 0L
                        || (active3 & 0xc000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 24;
                    return 22;
                }
                return -1;
            case 25 :
                if ((active1 & 0x1800000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0x100e2000000000L) != 0L
                        || (active3 & 0xc000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 25;
                    return 22;
                }
                return -1;
            case 26 :
                if ((active1 & 0x2000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0x100e0000000000L) != 0L
                        || (active3 & 0xc000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 26;
                    return 22;
                }
                return -1;
            case 27 :
                if ((active1 & 0x10000000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0xe0000000000L) != 0L
                        || (active3 & 0xc000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 27;
                    return 22;
                }
                return -1;
            case 28 :
                if ((active1 & 0x60000000000L) != 0L || (active3 & 0x4000000000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0x80000000000L) != 0L
                        || (active3 & 0x8000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 28;
                    return 22;
                }
                return -1;
            case 29 :
                if ((active3 & 0x8000000000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0x80000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 29;
                    return 22;
                }
                return -1;
            case 30 :
                if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0x80000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 30;
                    return 22;
                }
                return -1;
            case 31 :
                if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x80000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 31;
                    return 22;
                }
                return -1;
            case 32 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 32;
                    return 22;
                }
                return -1;
            case 33 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 33;
                    return 22;
                }
                return -1;
            case 34 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 34;
                    return 22;
                }
                return -1;
            case 35 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 35;
                    return 22;
                }
                return -1;
            case 36 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 36;
                    return 22;
                }
                return -1;
            case 37 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 37;
                    return 22;
                }
                return -1;
            case 38 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 38;
                    return 22;
                }
                return -1;
            case 39 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 39;
                    return 22;
                }
                return -1;
            case 40 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 40;
                    return 22;
                }
                return -1;
            case 41 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 41;
                    return 22;
                }
                return -1;
            case 42 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 42;
                    return 22;
                }
                return -1;
            case 43 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 43;
                    return 22;
                }
                return -1;
            case 44 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 44;
                    return 22;
                }
                return -1;
            case 45 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 45;
                    return 22;
                }
                return -1;
            case 46 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 46;
                    return 22;
                }
                return -1;
            case 47 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 47;
                    return 22;
                }
                return -1;
            case 48 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    jjmatchedKind = 297;
                    jjmatchedPos  = 48;
                    return 22;
                }
                return -1;
            default :
                return -1;
        }
    }

    /**
     * 
     * @param pos
     * @param active0
     * @param active1
     * @param active2
     * @param active3
     * @param active4
     * @return
     */
    private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
    }

    /**
     * 
     * @param pos
     * @param kind
     * @return
     */
    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos  = pos;
        return pos + 1;
    }

    /**
     * 
     * @return
     */
    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 32 :
                return jjStopAtPos(0, 295);
            case 40 :
                return jjStopAtPos(0, 293);
            case 41 :
                return jjStopAtPos(0, 294);
            case 97 :
                return jjMoveStringLiteralDfa1_0(0x0L, 0xc0000040000000L, 0x0L, 0x0L, 0x0L);
            case 98 :
                return jjMoveStringLiteralDfa1_0(0x20000000L, 0xff00000000000000L, 0x1L, 0x0L, 0x0L);
            case 99 :
                jjmatchedKind = 290;
                return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x7208cL, 0xffffeL, 0x0L, 0x0L);
            case 100 :
                return jjMoveStringLiteralDfa1_0(0x100800000L, 0x180000000L, 0x700000L, 0x0L, 0x0L);
            case 101 :
                return jjMoveStringLiteralDfa1_0(0xc000000L, 0x1e38000040L, 0x1f800000L, 0x0L, 0x0L);
            case 102 :
                return jjMoveStringLiteralDfa1_0(0x181e000000000L, 0x0L, 0x7e0000000L, 0x0L, 0x0L);
            case 103 :
                return jjMoveStringLiteralDfa1_0(0x180000000400L, 0x0L, 0x1ff800000000L, 0x0L, 0x0L);
            case 104 :
                return jjMoveStringLiteralDfa1_0(0x8000000204000L, 0x0L, 0xe00000000000L, 0x0L, 0x0L);
            case 105 :
                return jjMoveStringLiteralDfa1_0(0x380000000000000L, 0x2000880000L, 0x0L, 0x0L, 0x0L);
            case 107 :
                return jjMoveStringLiteralDfa1_0(0x1e00400000L, 0x1c006000000L, 0x1fff000000000000L, 0x0L, 0x0L);
            case 108 :
                return jjMoveStringLiteralDfa1_0(0x8000L, 0x100L, 0xe000000000000000L, 0x0L, 0x0L);
            case 109 :
                return jjMoveStringLiteralDfa1_0(0x0L, 0x8002L, 0x0L, 0x7fffL, 0x0L);
            case 110 :
                return jjMoveStringLiteralDfa1_0(0x1c00000000060000L, 0xe0000005800L, 0x0L, 0x18000L, 0x0L);
            case 111 :
                return jjMoveStringLiteralDfa1_0(0x6000000000000L, 0x0L, 0x0L, 0x1e0000L, 0x0L);
            case 112 :
                return jjMoveStringLiteralDfa1_0(0x80000000L, 0x7f00001500000L, 0x0L, 0xfffffe00000L, 0x0L);
            case 113 :
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x300000000000L, 0x0L);
            case 114 :
                jjmatchedKind = 292;
                return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x8000000000020L, 0x0L, 0xfc00000000000L, 0x0L);
            case 115 :
                return jjMoveStringLiteralDfa1_0(0x2181000L, 0x30000000200011L, 0x0L, 0xfff0000000000000L, 0x1ffL);
            case 116 :
                jjmatchedKind = 291;
                return jjMoveStringLiteralDfa1_0(0x8070000051000000L, 0x600L, 0x0L, 0x0L, 0xfffe00L);
            case 117 :
                return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L, 0x0L, 0x1000000L);
            case 118 :
                return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L, 0x0L, 0x0L, 0xe000000L);
            case 119 :
                return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L, 0x0L, 0x0L, 0x3f0000000L);
            default :
                return jjMoveNfa_0(0, 0);
        }
    }

    /**
     * 
     * @param active0
     * @param active1
     * @param active2
     * @param active3
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4);
            return 1;
        }
        switch (curChar) {
            case 97 :
                return jjMoveStringLiteralDfa2_0(active0, 0x8000002820000L, active1, 0xff0800018005a041L, active2,
                                                 0x200007f80030001fL, active3, 0x700000000001ffL, active4, 0x7e00L);
            case 100 :
                if ((active1 & 0x80000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 83, 22);
                }
                break;
            case 101 :
                return jjMoveStringLiteralDfa2_0(active0, 0x2000000020201000L, active1, 0xe0000000620L, active2,
                                                 0x1ffe00000000000L, active3, 0x78fc001ffe00000L, active4, 0x2ff8000L);
            case 102 :
                return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000L, active1, 0x630000000L, active2, 0xf800000L,
                                                 active3, 0x60000L, active4, 0L);
            case 104 :
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2008cL, active2, 0L, active3, 0L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa2_0(active0, 0x70001e40416000L, active1, 0x1c006000000L, active2,
                                                 0x1e00000000000000L, active3, 0x1800000000007e00L, active4,
                                                 0x3fc000000L);
            case 107 :
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L, active4, 0L);
            case 108 :
                return jjMoveStringLiteralDfa2_0(active0, 0x380000080000000L, active1, 0x3f00041500000L, active2,
                                                 0x7fc0L, active3, 0xe000001e00180000L, active4, 0L);
            case 110 :
                return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x2000800000L, active2, 0L,
                                                 active3, 0L, active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa2_0(active0, 0x9c019e0000048400L, active1, 0x5902L, active2,
                                                 0xc0001800200f8000L, active3, 0xe000000000L, active4, 0L);
            case 112 :
                return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L, active2, 0L, active3, 0L, active4,
                                                 0L);
            case 114 :
                return jjMoveStringLiteralDfa2_0(active0, 0x1e100000000L, active1, 0L, active2, 0x1c0400000L, active3,
                                                 0xf0000018000L, active4, 0L);
            case 115 :
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4,
                                                 0x1000000L);
            case 116 :
                return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x14000000200010L, active2, 0L, active3,
                                                 0L, active4, 0x1fL);
            case 117 :
                return jjMoveStringLiteralDfa2_0(active0, 0x11000000L, active1, 0xe0000000000000L, active2,
                                                 0x600000000L, active3, 0x300000000000L, active4, 0L);
            case 120 :
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1808000000L, active2, 0x10000000L, active3,
                                                 0L, active4, 0L);
            case 121 :
                return jjMoveStringLiteralDfa2_0(active0, 0xc000000L, active1, 0L, active2, 0L, active3, 0L, active4,
                                                 0x1e0L);
            default :
                break;
        }
        return jjStartNfa_0(0, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(0, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4);
            return 2;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa3_0(active0, 0x1c00000000000000L, active1, 0x4000000005800L, active2, 0L,
                                                 active3, 0x18000L, active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa3_0(active0, 0x180080280400L, active1, 0x13f00001720694L, active2,
                                                 0xf8000003ffc0L, active3, 0x331e00000000L, active4, 0x3800fL);
            case 98 :
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa3_0(active0, 0x2000001e00400000L, active1, 0x30001c006000020L, active2,
                                                 0x1e00000000000000L, active3, 0xfc00000080000L, active4, 0x7e00L);
            case 100 :
                return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x40000000000000L, active2, 0L, active3,
                                                 0x800000000100000L, active4, 0L);
            case 101 :
                return jjMoveStringLiteralDfa3_0(active0, 0x1e00c102000L, active1, 0x2000800008L, active2,
                                                 0x1ff0001c0000000L, active3, 0L, active4, 0x1000000L);
            case 102 :
                return jjMoveStringLiteralDfa3_0(active0, 0x6000020000000L, active1, 0x630000000L, active2, 0xf800000L,
                                                 active3, 0x60000L, active4, 0L);
            case 103 :
                return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L, active2, 0xc000000000000000L, active3,
                                                 0L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L, active2, 0x20L, active3, 0x6000000000L,
                                                 active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            case 108 :
                return jjMoveStringLiteralDfa3_0(active0, 0x388000000001000L, active1, 0xfc00000040000000L, active2,
                                                 0x600000001L, active3, 0L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa3_0(active0, 0x70000040000000L, active1, 0L, active2, 0x7f800000000L,
                                                 active3, 0x1000000000000000L, active4, 0L);
            case 110 :
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000012000L, active2, 0x20000000000c0000L,
                                                 active3, 0x7800001ffe07e00L, active4, 0x3f00001e0L);
            case 111 :
                return jjMoveStringLiteralDfa3_0(active0, 0x8000000100000000L, active1, 0x100L, active2, 0x400000L,
                                                 active3, 0xe0000c0000000000L, active4, 0x10L);
            case 114 :
                if ((active1 & 0x40L) != 0L) {
                    return jjStartNfaWithStates_0(2, 70, 22);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x60011060000L, active1, 0L, active2, 0x20000000L, active3,
                                                 0x8000000000L, active4, 0x2000000L);
            case 115 :
                return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0x180000000L, active2, 0x300000L,
                                                 active3, 0L, active4, 0xc000000L);
            case 116 :
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80001808040000L, active2, 0x1000001eL,
                                                 active3, 0L, active4, 0L);
            case 117 :
                return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L);
            case 119 :
                if ((active0 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 15, 22);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xe0000000000L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            case 120 :
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0x1ffL, active4,
                                                 0xfc0000L);
            case 121 :
                if ((active0 & 0x2000000L) != 0L) {
                    jjmatchedKind = 25;
                    jjmatchedPos  = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x70000000000000L,
                                                 active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(1, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(1, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4);
            return 3;
        }
        switch (curChar) {
            case 32 :
                return jjMoveStringLiteralDfa4_0(active0, 0xc000000L, active1, 0L, active2, 0L, active3, 0L, active4,
                                                 0L);
            case 95 :
                return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0xe0000008000L, active2,
                                                 0xc000000000000000L, active3, 0x700000fff0061fL, active4, 0x1000000L);
            case 97 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4,
                                                 0L);
            case 98 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4,
                                                 0x2000000L);
            case 99 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40008L, active2, 0x3803eL, active3, 0L,
                                                 active4, 0x1e0L);
            case 100 :
                return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x8000000000001L, active2,
                                                 0x2000000000000000L, active3, 0x380000000000000L, active4,
                                                 0x3f0000000L);
            case 101 :
                if ((active0 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 16, 22);
                } else if ((active1 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(3, 65, 22);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x3f001e040100000L, active1, 0L, active2, 0x7f9c0000000L,
                                                 active3, 0x800000000008000L, active4, 0L);
            case 102 :
                if ((active0 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 12, 22);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3,
                                                 0x40000000000L, active4, 0L);
            case 104 :
                if ((active0 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 14, 22);
                } else if ((active0 & 0x800000L) != 0L) {
                    jjmatchedKind = 23;
                    jjmatchedPos  = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x180000000L, active2, 0x300000L, active3, 0L,
                                                 active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L,
                                                 active4, 0xc000000L);
            case 107 :
                if ((active0 & 0x400000L) != 0L) {
                    jjmatchedKind = 22;
                    jjmatchedPos  = 3;
                } else if ((active1 & 0x100L) != 0L) {
                    return jjStartNfaWithStates_0(3, 72, 22);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x1e00000000L, active1, 0x30001c006000000L, active2,
                                                 0x1e00000000000000L, active3, 0L, active4, 0x7e00L);
            case 108 :
                return jjMoveStringLiteralDfa4_0(active0, 0x1980000000400L, active1, 0xfc00000000000000L, active2,
                                                 0x180600000001L, active3, 0L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa4_0(active0, 0x1c000000000c0000L, active1, 0x14000000200600L, active2, 0L,
                                                 active3, 0x820L, active4, 0x38003L);
            case 110 :
                if ((active0 & 0x1000000L) != 0L) {
                    jjmatchedKind = 24;
                    jjmatchedPos  = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x4000060010000000L, active1, 0x32084L, active2, 0x47fc0L,
                                                 active3, 0x3360000130c0L, active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa4_0(active0, 0x2000000020000000L, active1, 0x80000670000020L, active2,
                                                 0xf800000L, active3, 0x7c00000080000L, active4, 0L);
            case 112 :
                return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L, active2, 0x1ff000000400000L,
                                                 active3, 0x80000004100L, active4, 0x10L);
            case 114 :
                return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0x3808800010L, active2, 0xe00010000000L,
                                                 active3, 0L, active4, 0xcL);
            case 115 :
                return jjMoveStringLiteralDfa4_0(active0, 0x6000000000000L, active1, 0x20000000005000L, active2, 0L,
                                                 active3, 0x400000000060000L, active4, 0L);
            case 116 :
                if ((active3 & 0x8000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 231, 22);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L, active2, 0x80000L, active3, 0L, active4,
                                                 0xfc0000L);
            case 117 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000000L,
                                                 active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000L,
                                                 active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L, active2, 0L, active3,
                                                 0xe000000000000000L, active4, 0L);
            case 121 :
                return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x3f00001500000L, active2, 0L, active3,
                                                 0x1e00000000L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(2, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(2, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4);
            return 4;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa5_0(active0, 0x7999ffd0202000L, active1, 0xffa0004184000601L, active2,
                                                 0x1e00eff840700001L, active3, 0x2b88000000000000L, active4,
                                                 0x3f0ff8000L);
            case 97 :
                return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0x401980a000000L, active2,
                                                 0x1ff000010000000L, active3, 0x280000L, active4, 0L);
            case 98 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400001L, active4,
                                                 0xc000000L);
            case 99 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x30000000900000L,
                                                 active4, 0L);
            case 100 :
                if ((active0 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 20, 22);
                }
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x60000000000L, active2, 0x4000000000000000L,
                                                 active3, 0x30001000606L, active4, 0L);
            case 101 :
                return jjMoveStringLiteralDfa5_0(active0, 0x60000000000L, active1, 0x3f00001500800L, active2, 0x40000L,
                                                 active3, 0x400081e000030c0L, active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x180000000L, active3, 0L, active4,
                                                 0L);
            case 103 :
                return jjMoveStringLiteralDfa5_0(active0, 0x380000000000000L, active1, 0x20084L, active2, 0x7fc0L,
                                                 active3, 0x8L, active4, 0L);
            case 104 :
                if ((active1 & 0x40000L) != 0L) {
                    jjmatchedKind = 82;
                    jjmatchedPos  = 4;
                } else if ((active2 & 0x8000L) != 0L) {
                    jjmatchedKind = 143;
                    jjmatchedPos  = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x3001eL, active3, 0L, active4,
                                                 0x1e0L);
            case 105 :
                return jjMoveStringLiteralDfa5_0(active0, 0x6000000080400L, active1, 0x10000000200000L, active2,
                                                 0x100020000000L, active3, 0x40000060000L, active4, 0x3L);
            case 107 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L, active2, 0x20L, active3, 0L, active4, 0L);
            case 108 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000100000000L,
                                                 active4, 0x7e00L);
            case 109 :
                return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L, active2,
                                                 0x2000000000000000L, active3, 0x40000006000000L, active4, 0L);
            case 110 :
                return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3,
                                                 0xc000000008000000L, active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa5_0(active0, 0x5c0000000c020000L, active1, 0x4800000001a000L, active2, 0L,
                                                 active3, 0x14920L, active4, 0x3000000L);
            case 112 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10L);
            case 114 :
                return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x630000000L, active2, 0xf880000L,
                                                 active3, 0x400030000000L, active4, 0L);
            case 115 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000L, active2, 0x600000000L, active3,
                                                 0x40000000L, active4, 0L);
            case 116 :
                if ((active1 & 0x10L) != 0L) {
                    jjmatchedKind = 68;
                    jjmatchedPos  = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000800000L, active2, 0x8000000000000000L,
                                                 active3, 0x306080000010L, active4, 0xcL);
            case 117 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x5000L, active2, 0L, active3, 0L, active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0x7800000000000L,
                                                 active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L, active4,
                                                 0L);
            case 120 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(3, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(3, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4);
            return 5;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40001848000008L, active2, 0x10037fe6L,
                                                 active3, 0x400036000000000L, active4, 0x1ecL);
            case 97 :
                return jjMoveStringLiteralDfa6_0(active0, 0x8380000000200000L, active1, 0x400060000000800L, active2,
                                                 0x6000000000100018L, active3, 0x1000000096000617L, active4,
                                                 0x10008000L);
            case 98 :
                return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0x18002004000L, active2, 0x400000L,
                                                 active3, 0L, active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L, active2, 0x40000L, active3,
                                                 0x800000000830c0L, active4, 0L);
            case 100 :
                return jjMoveStringLiteralDfa6_0(active0, 0x6000000000000L, active1, 0x900000000000000L, active2,
                                                 0x200020000000L, active3, 0x2800400000060000L, active4, 0x20000000L);
            case 101 :
                if ((active0 & 0x400L) != 0L) {
                    jjmatchedKind = 10;
                    jjmatchedPos  = 5;
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x40000020000000L, active1, 0x200a4L, active2,
                                                 0x100000000000L, active3, 0xc007800060400000L, active4, 0x7e10L);
            case 102 :
                return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0x8000L, active2, 0L, active3, 0L,
                                                 active4, 0x41000000L);
            case 103 :
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa6_0(active0, 0x1800000000L, active1, 0x2000800000L, active2,
                                                 0x8000400000000000L, active3, 0x300001000000L, active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa6_0(active0, 0x19e000000000L, active1, 0L, active2, 0x40000000L, active3,
                                                 0L, active4, 0L);
            case 108 :
                if ((active0 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 18, 22);
                } else if ((active0 & 0x1000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 48, 22);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x3f800000000L, active3,
                                                 0x40000200000L, active4, 0xcfd0000L);
            case 109 :
                return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0xa8000000000000L, active2,
                                                 0x800000000000L, active3, 0x820L, active4, 0L);
            case 110 :
                if ((active0 & 0x4000000L) != 0L) {
                    return jjStopAtPos(5, 26);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x2000000010080000L, active1, 0x10000000200200L, active2, 0L,
                                                 active3, 0L, active4, 0x80000003L);
            case 111 :
                return jjMoveStringLiteralDfa6_0(active0, 0x6c0000000L, active1, 0L, active2, 0x200040180080000L,
                                                 active3, 0x30000000900008L, active4, 0L);
            case 112 :
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000180000000L, active2, 0x400000000200000L,
                                                 active3, 0L, active4, 0L);
            case 114 :
                if ((active0 & 0x800000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 47, 22);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x1c00060000000000L, active1, 0x1003f04005500000L, active2,
                                                 0x1800000000000000L, active3, 0x81e08010000L, active4, 0x300020000L);
            case 115 :
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xe000000000000000L, active2, 0L, active3,
                                                 0x148000000000000L, active4, 0x2000000L);
            case 116 :
                return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x80630012001L, active2,
                                                 0x60f800000L, active3, 0x100008000L, active4, 0L);
            case 117 :
                return jjMoveStringLiteralDfa6_0(active0, 0x30000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000000L,
                                                 active4, 0L);
            case 119 :
                if ((active0 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 17, 22);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L, active2,
                                                 0x1ff080000000001L, active3, 0x4100L, active4, 0L);
            case 120 :
                if ((active1 & 0x4000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 114, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(4, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(4, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4);
            return 6;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa7_0(active0, 0x60020000000L, active1, 0xbf0063153a084L, active2,
                                                 0x10002f800000L, active3, 0x481e08000000L, active4, 0x37e00L);
            case 97 :
                if ((active0 & 0x80000L) != 0L) {
                    jjmatchedKind = 19;
                    jjmatchedPos  = 6;
                }
                return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x1330086004a00200L, active2,
                                                 0x19ff800600400040L, active3, 0x830000020900008L, active4,
                                                 0x300000003L);
            case 98 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L, active2, 0x1aL, active3,
                                                 0x400000000000000L, active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x440000000000000L, active2, 0L, active3, 0x11L,
                                                 active4, 0x8000L);
            case 100 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x180L, active3, 0L, active4,
                                                 0x10L);
            case 101 :
                if ((active3 & 0x40000000000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 234, 22);
                } else if ((active4 & 0x2000000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 281, 22);
                }
                return jjMoveStringLiteralDfa7_0(active0, 0x3c06000010000000L, active1, 0x800000000000000L, active2,
                                                 0x200000000001L, active3, 0x64920L, active4, 0xc000000L);
            case 102 :
                if ((active0 & 0x8000000L) != 0L) {
                    return jjStopAtPos(6, 27);
                }
                return jjMoveStringLiteralDfa7_0(active0, 0x600000000L, active1, 0L, active2, 0x200000000000000L,
                                                 active3, 0x30000400000L, active4, 0x1000000L);
            case 103 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000000L,
                                                 active4, 0xcL);
            case 104 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L, active2, 0x10000000L, active3,
                                                 0x80000L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa7_0(active0, 0x819e000000000L, active1, 0x2000000000000000L, active2,
                                                 0x80040000200L, active3, 0x200000000000000L, active4, 0x20000000L);
            case 107 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800030c0L, active4,
                                                 0L);
            case 108 :
                return jjMoveStringLiteralDfa7_0(active0, 0x380000000000000L, active1, 0x18002000000L, active2,
                                                 0x80000L, active3, 0x200000L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000800L, active2, 0x8000000000001c20L,
                                                 active3, 0x10000L, active4, 0x60L);
            case 110 :
                if ((active0 & 0x80000000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 31, 22);
                }
                return jjMoveStringLiteralDfa7_0(active0, 0xc000001800200000L, active1, 0L, active2, 0x400000100000L,
                                                 active3, 0x10000000L, active4, 0x10000000L);
            case 111 :
                return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0x80000180000001L, active2,
                                                 0x40003f800200000L, active3, 0x2080000000000000L, active4,
                                                 0xc0fc0080L);
            case 112 :
                if ((active0 & 0x10000000000000L) != 0L) {
                    jjmatchedKind = 52;
                    jjmatchedPos  = 6;
                }
                return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0x4000000000000000L, active2,
                                                 0x10004L, active3, 0L, active4, 0L);
            case 114 :
                if ((active1 & 0x20L) != 0L) {
                    jjmatchedKind = 69;
                    jjmatchedPos  = 6;
                }
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L, active2, 0x2000000180002000L, active3,
                                                 0x7800000008000L, active4, 0L);
            case 115 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x61808004000L, active2, 0L, active3,
                                                 0xc000000001000606L, active4, 0x100L);
            case 116 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000000L, active2,
                                                 0x4000000000040000L, active3, 0x1108006040000000L, active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L, active2, 0x40000000000L, active3,
                                                 0L, active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x24000L, active3, 0L, active4, 0L);
            case 120 :
                return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3,
                                                 0x6000000L, active4, 0L);
            case 121 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4,
                                                 0L);
            case 122 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x300000000000L,
                                                 active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(5, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(5, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4);
            return 7;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa8_0(active0, 0x5fa6001800000000L, active1, 0x10002000a05800L, active2,
                                                 0xe0000L, active3, 0x2478001060e0000L, active4, 0xc000013L);
            case 97 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x408L, active2, 0x10000022L, active3,
                                                 0x30200019040L, active4, 0L);
            case 98 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L);
            case 99 :
                if ((active2 & 0x400000000000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 174, 22);
                }
                return jjMoveStringLiteralDfa8_0(active0, 0x200019e010000000L, active1, 0xc00000000010000L, active2,
                                                 0x200040000000L, active3, 0x30000000900000L, active4, 0x400L);
            case 100 :
                return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0x80300000400000L, active2, 0x80001800040L,
                                                 active3, 0x30000000L, active4, 0x800L);
            case 101 :
                return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0x4000018002000000L, active2,
                                                 0xc000040000001d80L, active3, 0x108300080000000L, active4, 0x1100L);
            case 102 :
                return jjMoveStringLiteralDfa8_0(active0, 0x600000000L, active1, 0L, active2, 0x200000000000000L,
                                                 active3, 0L, active4, 0x80L);
            case 103 :
                if ((active4 & 0x10000000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 284, 22);
                }
                return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L, active2, 0x3f800100000L, active3,
                                                 0x80000000000L, active4, 0xfc0000L);
            case 104 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x60000000000L, active2, 0L, active3, 0x606L,
                                                 active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xe004001L, active3, 0L, active4,
                                                 0x20L);
            case 107 :
                return jjMoveStringLiteralDfa8_0(active0, 0x60020000000L, active1, 0L, active2, 0x2000000020000000L,
                                                 active3, 0x8000011L, active4, 0L);
            case 108 :
                return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0L, active2, 0x400018L, active3, 0x8L,
                                                 active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0x80630000204L, active2,
                                                 0x100180000000L, active3, 0x80400000002080L, active4, 0L);
            case 110 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000004004000000L, active2,
                                                 0x1800000000000200L, active3, 0x820L, active4, 0x380000000L);
            case 111 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L, active2, 0x10000L, active3,
                                                 0x1400006000600000L, active4, 0x4cL);
            case 112 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L, active4,
                                                 0x2000L);
            case 114 :
                if ((active3 & 0x100L) != 0L) {
                    return jjStartNfaWithStates_0(7, 200, 22);
                } else if ((active3 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 206, 22);
                } else if ((active4 & 0x20000000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 285, 22);
                }
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0x400000000L,
                                                 active4, 0x40000000L);
            case 115 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x309c00001102000L, active2, 0L, active3,
                                                 0xc800000800000000L, active4, 0x1030000L);
            case 116 :
                return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0x2001808008000L, active2,
                                                 0x600000000L, active3, 0x1000000L, active4, 0x8000L);
            case 117 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8040000040000000L, active2, 0x2000L, active3,
                                                 0x40000000L, active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x180000000L, active2, 0x400000000200000L,
                                                 active3, 0x2000001000000000L, active4, 0x4000L);
            case 120 :
                if ((active1 & 0x20000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 117, 22);
                } else if ((active2 & 0x800000000000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 175, 22);
                }
                break;
            case 121 :
                if ((active2 & 0x1000000000000L) != 0L) {
                    jjmatchedKind = 176;
                    jjmatchedPos  = 7;
                }
                return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L, active2,
                                                 0x1fe000000000000L, active3, 0L, active4, 0L);
            case 122 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(6, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(6, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4);
            return 8;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa9_0(active0, 0x8000000600000000L, active1, 0x78002000001L, active2,
                                                 0x63fe01f980000000L, active3, 0xc00030600100860fL, active4, 0x7c0000L);
            case 97 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800001a18000000L, active2, 0x300000000000L,
                                                 active3, 0x400020000L, active4, 0x400020cL);
            case 98 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10L);
            case 99 :
                return jjMoveStringLiteralDfa9_0(active0, 0x4100000000000000L, active1, 0x8000000000000000L, active2,
                                                 0L, active3, 0x30200000000L, active4, 0x40000021L);
            case 100 :
                if ((active1 & 0x4000000L) != 0L) {
                    jjmatchedKind = 90;
                    jjmatchedPos  = 8;
                } else if ((active1 & 0x1000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 124, 22);
                } else if ((active4 & 0x100000000L) != 0L) {
                    jjmatchedKind = 288;
                    jjmatchedPos  = 8;
                }
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000L, active2, 0x1800000000000000L,
                                                 active3, 0x401800000000000L, active4, 0x208000040L);
            case 101 :
                if ((active0 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 13, 22);
                } else if ((active0 & 0x8000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 51, 22);
                } else if ((active1 & 0x80000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 119, 22);
                } else if ((active1 & 0x2000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 125, 22);
                } else if ((active4 & 0x80000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 287, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0x4408300180400200L, active2,
                                                 0x400000601a00018L, active3, 0x401002000000L, active4, 0x100L);
            case 102 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L, active2, 0x280L, active3, 0L, active4,
                                                 0x80L);
            case 103 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x20000000001L, active3,
                                                 0x4000000L, active4, 0x800000L);
            case 104 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000018000L, active2, 0L, active3,
                                                 0x830000000900000L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa9_0(active0, 0x60020000000L, active1, 0x10480421220000L, active2,
                                                 0x20000000L, active3, 0x2000008000000L, active4, 0x1004800L);
            case 107 :
                if ((active0 & 0x10000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 28, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0x19e000000000L, active1, 0L, active2, 0x40000000L, active3,
                                                 0x40000L, active4, 0L);
            case 108 :
                if ((active0 & 0x100000000L) != 0L) {
                    jjmatchedKind = 32;
                    jjmatchedPos  = 8;
                } else if ((active0 & 0x800000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 35, 22);
                } else if ((active0 & 0x4000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 50, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0x40004088L, active2, 0x10502100L,
                                                 active3, 0x10010L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0x2000800000L, active2, 0L,
                                                 active3, 0x84000000000000L, active4, 0x2L);
            case 110 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0xe004002L, active3,
                                                 0x2000000080001040L, active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0x4L, active2, 0x4L, active3,
                                                 0x80010002080L, active4, 0x2000L);
            case 112 :
                if ((active3 & 0x8000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 243, 22);
                } else if ((active3 & 0x100000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 248, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0x1800000101400L, active2, 0L,
                                                 active3, 0x840080000L, active4, 0L);
            case 114 :
                if ((active0 & 0x40000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 30, 22);
                } else if ((active0 & 0x1000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 36, 22);
                } else if ((active0 & 0x2000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 49, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x400000b0020L, active3,
                                                 0x1000000000400000L, active4, 0L);
            case 115 :
                if ((active2 & 0x8000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 191, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000000L, active2, 0xc00L, active3,
                                                 0x240000100000000L, active4, 0L);
            case 116 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 61, 22);
                } else if ((active3 & 0x20L) != 0L) {
                    return jjStartNfaWithStates_0(8, 197, 22);
                } else if ((active3 & 0x800L) != 0L) {
                    return jjStartNfaWithStates_0(8, 203, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0xc00000000000000L, active1, 0x40000000000000L, active2,
                                                 0x80000001000L, active3, 0L, active4, 0x30000L);
            case 117 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L, active4,
                                                 0x8000L);
            case 118 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0L, active2, 0x40000L, active3,
                                                 0x200000L, active4, 0L);
            case 120 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000L);
            case 121 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3,
                                                 0x20000000L, active4, 0x400L);
            default :
                break;
        }
        return jjStartNfa_0(7, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(7, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4);
            return 9;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa10_0(active0, 0x19e000000000L, active1, 0x140004000000000L, active2,
                                                  0x180004064040411aL, active3, 0x38300000e0b10000L, active4, 0x100L);
            case 97 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x18080L, active2, 0xc1000L, active3,
                                                  0x80000000202L, active4, 0x38013L);
            case 98 :
                return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L, active1, 0x2000L, active2, 0x4L,
                                                  active3, 0x2000000000L, active4, 0L);
            case 99 :
                if ((active2 & 0x800000L) != 0L) {
                    jjmatchedKind = 151;
                    jjmatchedPos  = 9;
                } else if ((active2 & 0x2000000L) != 0L) {
                    jjmatchedKind = 153;
                    jjmatchedPos  = 9;
                }
                return jjMoveStringLiteralDfa10_0(active0, 0x60020000000L, active1, 0x300000400000L, active2,
                                                  0x825000000L, active3, 0x208020000L, active4, 0x40600L);
            case 100 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000000004L, active2, 0x3000000000L,
                                                  active3, 0x4000000000L, active4, 0x1184000L);
            case 101 :
                if ((active0 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 21, 22);
                } else if ((active4 & 0x40L) != 0L) {
                    return jjStartNfaWithStates_0(9, 262, 22);
                } else if ((active4 & 0x40000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 286, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0xc00000000000000L, active1, 0x209800000124000L, active2,
                                                  0x122000L, active3, 0x1800800400010L, active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x600000c010000000L, active3, 0L,
                                                  active4, 0x600000L);
            case 103 :
                if ((active3 & 0x40L) != 0L) {
                    return jjStartNfaWithStates_0(9, 198, 22);
                } else if ((active3 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 204, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L, active4, 0L);
            case 104 :
                if ((active2 & 0x80000000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 171, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L, active2, 0x1L, active3, 0x100008000L,
                                                  active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L, active1, 0L, active2, 0x200080000c0L,
                                                  active3, 0x44001000040000L, active4, 0x8800000L);
            case 107 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3,
                                                  0x8L, active4, 0L);
            case 108 :
                if ((active0 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 33, 22);
                } else if ((active1 & 0x8L) != 0L) {
                    return jjStartNfaWithStates_0(9, 67, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L, active1, 0x400000000001000L, active2,
                                                  0x7e000000000000L, active3, 0L, active4, 0xcL);
            case 109 :
                return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0x1980a000001L, active2, 0L,
                                                  active3, 0x10002080L, active4, 0L);
            case 110 :
                if ((active1 & 0x20000000L) != 0L) {
                    jjmatchedKind = 93;
                    jjmatchedPos  = 9;
                }
                return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0x10080400200000L, active2, 0L,
                                                  active3, 0x2000400000000L, active4, 0x4000000L);
            case 111 :
                return jjMoveStringLiteralDfa10_0(active0, 0x4180000000000000L, active1, 0x2000800800L, active2,
                                                  0x200L, active3, 0xc000000004080000L, active4, 0x200000000L);
            case 112 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2060000000000L, active2, 0L, active3, 0x404L,
                                                  active4, 0x1000L);
            case 114 :
                if ((active0 & 0x400000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 34, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x180000000L, active2, 0x400000000200000L,
                                                  active3, 0L, active4, 0x20L);
            case 115 :
                if ((active1 & 0x200L) != 0L) {
                    return jjStartNfaWithStates_0(9, 73, 22);
                } else if ((active3 & 0x80000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 247, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x80000080000c00L, active3,
                                                  0x700000000000L, active4, 0x880L);
            case 116 :
                if ((active2 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 144, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3,
                                                  0x200030000000001L, active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x10000000000L, active3, 0L,
                                                  active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x300000100000000L, active3, 0L,
                                                  active4, 0x2000L);
            case 120 :
                if ((active1 & 0x10000000L) != 0L) {
                    jjmatchedKind = 92;
                    jjmatchedPos  = 9;
                } else if ((active3 & 0x1000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 216, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000L, active2, 0x100000000000L,
                                                  active3, 0x2000000L, active4, 0L);
            case 121 :
                if ((active1 & 0x800000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 123, 22);
                } else if ((active2 & 0x200000000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 173, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L,
                                                  active4, 0L);
            case 122 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400001000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(8, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(8, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4);
            return 10;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xc4000007c0002000L, active2,
                                                  0x400100015303e00L, active3, 0x400000010400010L, active4, 0xcL);
            case 97 :
                return jjMoveStringLiteralDfa11_0(active0, 0x1c00000000000000L, active1, 0x398002401001L, active2,
                                                  0x20000110000001cL, active3, 0x2004008001L, active4, 0x80000L);
            case 99 :
                if ((active3 & 0x800000000000L) != 0L) {
                    jjmatchedKind = 239;
                    jjmatchedPos  = 10;
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000000200000L, active2, 0x42L, active3,
                                                  0x11000000040000L, active4, 0L);
            case 100 :
                if ((active1 & 0x8000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 115, 22);
                } else if ((active3 & 0x400000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 226, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0xc0000000000000L, active1, 0x40004000000000L, active2,
                                                  0x80000L, active3, 0L, active4, 0L);
            case 101 :
                if ((active1 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(10, 66, 22);
                } else if ((active1 & 0x1000000L) != 0L) {
                    jjmatchedKind = 88;
                    jjmatchedPos  = 10;
                } else if ((active4 & 0x1000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 280, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x3c00000100000L, active2, 0x2010080000000L,
                                                  active3, 0x200000a00002080L, active4, 0x2080L);
            case 102 :
                return jjMoveStringLiteralDfa11_0(active0, 0x18000000000L, active1, 0x4000L, active2,
                                                  0x1800000040020000L, active3, 0x2000000000000000L, active4, 0L);
            case 103 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000L,
                                                  active4, 0x4000000L);
            case 104 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x110000L, active4,
                                                  0L);
            case 105 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1808000400L, active2, 0x210000e000040020L,
                                                  active3, 0x2000000000008L, active4, 0x700000L);
            case 106 :
                return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa11_0(active0, 0x60020000000L, active1, 0L, active2, 0x20000000L, active3,
                                                  0x8000000L, active4, 0x200L);
            case 108 :
                if ((active0 & 0x4000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 38, 22);
                } else if ((active0 & 0x100000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 44, 22);
                } else if ((active2 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 161, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000000L,
                                                  active4, 0x410L);
            case 109 :
                if ((active4 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 289, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0x4100000000000000L, active1, 0x2000800000L, active2, 0L,
                                                  active3, 0x20000000a00000L, active4, 0L);
            case 110 :
                if ((active3 & 0x4000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 242, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000L, active2, 0x20000000080L, active3,
                                                  0xc000000000000202L, active4, 0x800000L);
            case 111 :
                return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0x60000000000L, active2,
                                                  0x407c000800000000L, active3, 0x30100000404L, active4, 0x41120L);
            case 112 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1L);
            case 114 :
                if ((active0 & 0x2000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 37, 22);
                } else if ((active0 & 0x80000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 43, 22);
                } else if ((active2 & 0x400000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 162, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3,
                                                  0x800000000080000L, active4, 0x30000L);
            case 115 :
                if ((active1 & 0x200000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 121, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x4000L, active3,
                                                  0x1000400000000000L, active4, 0x8000000L);
            case 116 :
                if ((active2 & 0x1L) != 0L) {
                    return jjStartNfaWithStates_0(10, 128, 22);
                } else if ((active2 & 0x8000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 155, 22);
                } else if ((active4 & 0x800L) != 0L) {
                    return jjStartNfaWithStates_0(10, 267, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active1, 0x8000L, active2,
                                                  0x80000000400000L, active3, 0x300002020000L, active4, 0xc000L);
            case 117 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0x4000000000L,
                                                  active4, 0L);
            case 119 :
                if ((active1 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 81, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x40000000100L, active3,
                                                  0xe0000000L, active4, 0L);
            case 120 :
                if ((active4 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(10, 257, 22);
                }
                break;
            case 121 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0L);
            case 122 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000000L,
                                                  active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(9, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(9, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4);
            return 11;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa12_0(active0, 0x60020000000L, active1, 0x10480000208000L, active2,
                                                  0x20000000L, active3, 0xc001080000000000L, active4, 0x220L);
            case 97 :
                return jjMoveStringLiteralDfa12_0(active0, 0x18000000000L, active1, 0x8100000000000000L, active2,
                                                  0x1880040040000000L, active3, 0x28004000e0010000L, active4, 0x1L);
            case 98 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0L);
            case 99 :
                if ((active1 & 0x400L) != 0L) {
                    return jjStartNfaWithStates_0(11, 74, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x9L, active4, 0L);
            case 100 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1800640100000L, active2, 0x100000000000400L,
                                                  active3, 0x800000000L, active4, 0L);
            case 101 :
                if ((active0 & 0x80000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 55, 22);
                } else if ((active3 & 0x40000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 246, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0x240000000000000L, active1, 0x6000800080L, active2,
                                                  0x200c0L, active3, 0x300000100000L, active4, 0x400L);
            case 102 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100L);
            case 103 :
                if ((active2 & 0x20000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 169, 22);
                } else if ((active4 & 0x800000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 279, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000L, active2, 0x7c000000000000L, active3,
                                                  0x202L, active4, 0L);
            case 104 :
                if ((active4 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 270, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3,
                                                  0x1000000000L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000000000000L, active2, 0x200000100484100L,
                                                  active3, 0x20000L, active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L, active4,
                                                  0L);
            case 108 :
                if ((active4 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(11, 258, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3,
                                                  0x204008000L, active4, 0x4000010L);
            case 109 :
                return jjMoveStringLiteralDfa12_0(active0, 0x4d00000000000000L, active1, 0x4400000000000000L, active2,
                                                  0x100800000000L, active3, 0L, active4, 0x40000L);
            case 110 :
                if ((active2 & 0x20L) != 0L) {
                    return jjStartNfaWithStates_0(11, 133, 22);
                } else if ((active3 & 0x2000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 229, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1808000801L, active2, 0x2000080000000L,
                                                  active3, 0x10000000002080L, active4, 0x1000L);
            case 111 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100800000L,
                                                  active4, 0x8000L);
            case 112 :
                if ((active3 & 0x200000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 249, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0x10L, active4,
                                                  0L);
            case 114 :
                if ((active2 & 0x2000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 165, 22);
                } else if ((active4 & 0x8L) != 0L) {
                    return jjStartNfaWithStates_0(11, 259, 22);
                } else if ((active4 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 276, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x18182000000L, active2, 0x4400010000200018L,
                                                  active3, 0x34002000000L, active4, 0x2000L);
            case 115 :
                if ((active1 & 0x2000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 113, 22);
                } else if ((active3 & 0x8000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 219, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x100000L, active3,
                                                  0x420000000400000L, active4, 0L);
            case 116 :
                if ((active1 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 78, 22);
                } else if ((active2 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 146, 22);
                } else if ((active3 & 0x80000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 211, 22);
                } else if ((active3 & 0x2000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 241, 22);
                } else if ((active4 & 0x80L) != 0L) {
                    return jjStartNfaWithStates_0(11, 263, 22);
                } else if ((active4 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 272, 22);
                } else if ((active4 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 273, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x1015000000L, active3,
                                                  0x1000000000000000L, active4, 0x8080000L);
            case 117 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000L, active4,
                                                  0L);
            case 118 :
                return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x60000002000L, active2, 0x3200L, active3,
                                                  0x10000404L, active4, 0L);
            case 120 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0xc000000000L, active3, 0L,
                                                  active4, 0x600000L);
            case 121 :
                if ((active1 & 0x400000L) != 0L) {
                    jjmatchedKind = 86;
                    jjmatchedPos  = 11;
                }
                return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L, active1, 0x300000001000L, active2,
                                                  0x2L, active3, 0L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(10, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(10, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(11, active0, active1, active2, active3, active4);
            return 12;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa13_0(active0, 0xc00000000000000L, active1, 0x1b00000100000L, active2,
                                                  0x3c0000000000c0L, active3, 0x30a00040000L, active4, 0x2010L);
            case 97 :
                if ((active1 & 0x8000000L) != 0L) {
                    jjmatchedKind = 91;
                    jjmatchedPos  = 12;
                }
                return jjMoveStringLiteralDfa13_0(active0, 0x4100000000000000L, active1, 0x4400001980000000L, active2,
                                                  0x400000000200000L, active3, 0x4002100000L, active4, 0x8000000L);
            case 99 :
                return jjMoveStringLiteralDfa13_0(active0, 0x200000000000000L, active1, 0L, active2,
                                                  0x1800000000000002L, active3, 0x2000000000000000L, active4, 0x1L);
            case 100 :
                if ((active0 & 0x40000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 54, 22);
                } else if ((active1 & 0x800L) != 0L) {
                    return jjStartNfaWithStates_0(12, 75, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000000000L, active2, 0x80000000L, active3,
                                                  0L, active4, 0x200L);
            case 101 :
                if ((active2 & 0x2000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 189, 22);
                } else if ((active4 & 0x4000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 282, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0x9000000000000000L, active1, 0x60640011000L, active2,
                                                  0xd000000c18L, active3, 0x1000000000400404L, active4, 0x681000L);
            case 102 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L, active4,
                                                  0x100L);
            case 103 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x18002000000L, active2, 0x42000000000000L,
                                                  active3, 0x20400000000000L, active4, 0L);
            case 104 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000L, active2, 0x5000000L, active3, 0L,
                                                  active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000000000L, active2, 0x40010003204L,
                                                  active3, 0xf4000000L, active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000009L,
                                                  active4, 0L);
            case 108 :
                if ((active0 & 0x40000000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 42, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0x210202L,
                                                  active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000000200000L, active2,
                                                  0x4000000000400000L, active3, 0L, active4, 0L);
            case 110 :
                if ((active2 & 0x100L) != 0L) {
                    return jjStartNfaWithStates_0(12, 136, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000800000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa13_0(active0, 0x20000020000000L, active1, 0L, active2, 0x100020000000L,
                                                  active3, 0x10L, active4, 0L);
            case 112 :
                if ((active3 & 0x100000000000L) != 0L) {
                    jjmatchedKind = 236;
                    jjmatchedPos  = 12;
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x800000000L, active3,
                                                  0x200000000000L, active4, 0x40000L);
            case 114 :
                if ((active0 & 0x20000000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 41, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000000000080L, active2,
                                                  0x80000000020000L, active3, 0L, active4, 0x8000L);
            case 115 :
                if ((active4 & 0x400L) != 0L) {
                    return jjStartNfaWithStates_0(12, 266, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000000000000L, active2, 0x10000000000L,
                                                  active3, 0L, active4, 0x20L);
            case 116 :
                if ((active2 & 0x200000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 185, 22);
                } else if ((active3 & 0x80L) != 0L) {
                    return jjStartNfaWithStates_0(12, 199, 22);
                } else if ((active3 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 205, 22);
                } else if ((active3 & 0x1000000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 228, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000000008000L, active2,
                                                  0x100000100100000L, active3, 0xcc11000100000000L, active4, 0L);
            case 117 :
                return jjMoveStringLiteralDfa13_0(active0, 0x18000000000L, active1, 0L, active2, 0x40080000L, active3,
                                                  0L, active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x820000L, active4,
                                                  0L);
            case 121 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L);
            case 122 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(11, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(11, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(12, active0, active1, active2, active3, active4);
            return 13;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1800010081L, active2, 0x180000000L, active3,
                                                  0x30200102000000L, active4, 0x8000L);
            case 97 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10000000200000L, active2,
                                                  0x4000000000000018L, active3, 0L, active4, 0L);
            case 100 :
                if ((active2 & 0x1000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 164, 22);
                } else if ((active2 & 0x4000000000L) != 0L) {
                    jjmatchedKind = 166;
                    jjmatchedPos  = 13;
                } else if ((active4 & 0x80000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 275, 22);
                } else if ((active4 & 0x200000L) != 0L) {
                    jjmatchedKind = 277;
                    jjmatchedPos  = 13;
                }
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x300000000000L, active2, 0xc008000000000L,
                                                  active3, 0L, active4, 0x400000L);
            case 101 :
                if ((active1 & 0x100000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 120, 22);
                } else if ((active2 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 142, 22);
                } else if ((active2 & 0x400000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 150, 22);
                } else if ((active3 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(13, 193, 22);
                } else if ((active3 & 0x200L) != 0L) {
                    return jjStartNfaWithStates_0(13, 201, 22);
                } else if ((active3 & 0x800000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 251, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8000400000000000L, active2, 0x120000L,
                                                  active3, 0x400400004820000L, active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa14_0(active0, 0x20000000L, active1, 0x40000000L, active2,
                                                  0x30000020000000L, active3, 0x10000L, active4, 0L);
            case 104 :
                if ((active2 & 0x100000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 184, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000L,
                                                  active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x18002002000L, active2, 0x40010000000000L,
                                                  active3, 0x80000000000L, active4, 0x201L);
            case 108 :
                if ((active3 & 0x10000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 232, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0x18000000000L, active1, 0x600000000L, active2, 0x40000406L,
                                                  active3, 0x1L, active4, 0x20L);
            case 109 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1800000100000L, active2, 0x10000000L,
                                                  active3, 0xa00040000L, active4, 0L);
            case 110 :
                if ((active2 & 0x200L) != 0L) {
                    return jjStartNfaWithStates_0(13, 137, 22);
                } else if ((active2 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 140, 22);
                } else if ((active2 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 141, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0x4100000000000000L, active1, 0x80000000000L, active2, 0L,
                                                  active3, 0x10000000L, active4, 0x8001000L);
            case 111 :
                return jjMoveStringLiteralDfa14_0(active0, 0xc00000000000000L, active1, 0L, active2, 0L, active3,
                                                  0xc000000000000000L, active4, 0L);
            case 112 :
                if ((active3 & 0x1000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 252, 22);
                }
                break;
            case 114 :
                if ((active1 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 76, 22);
                } else if ((active2 & 0x1000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 152, 22);
                } else if ((active2 & 0x4000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 154, 22);
                } else if ((active3 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(13, 194, 22);
                } else if ((active3 & 0x400L) != 0L) {
                    return jjStartNfaWithStates_0(13, 202, 22);
                } else if ((active3 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 212, 22);
                } else if ((active3 & 0x20000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 233, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000000L, active1, 0x60000000000L, active2,
                                                  0x800000800L, active3, 0L, active4, 0x42000L);
            case 115 :
                if ((active0 & 0x8000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 63, 22);
                } else if ((active2 & 0x80000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 147, 22);
                } else if ((active3 & 0x8L) != 0L) {
                    return jjStartNfaWithStates_0(13, 195, 22);
                } else if ((active3 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 207, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100L);
            case 116 :
                if ((active1 & 0x800000L) != 0L) {
                    jjmatchedKind = 87;
                    jjmatchedPos  = 13;
                } else if ((active1 & 0x40000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 118, 22);
                } else if ((active2 & 0x40000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 170, 22);
                } else if ((active2 & 0x80000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 183, 22);
                } else if ((active3 & 0x20000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 221, 22);
                } else if ((active3 & 0x40000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 222, 22);
                } else if ((active3 & 0x80000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 223, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0x200000000000000L, active1, 0x6180000000L, active2,
                                                  0x1c02000000200000L, active3, 0x2000004000600000L, active4, 0L);
            case 117 :
                return jjMoveStringLiteralDfa14_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0L,
                                                  active4, 0x10L);
            case 119 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0xc0L, active3, 0x10L, active4,
                                                  0L);
            case 120 :
                if ((active1 & 0x400000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 122, 22);
                } else if ((active1 & 0x4000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 126, 22);
                }
                break;
            case 121 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(12, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(12, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(13, active0, active1, active2, active3, active4);
            return 14;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa15_0(active0, 0x1200000000000000L, active1, 0x62000000000L, active2,
                                                  0x8000000818L, active3, 0x4220000L, active4, 0x400000L);
            case 97 :
                if ((active1 & 0x8000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 127, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1804040100000L, active2, 0x4000000000400L,
                                                  active3, 0xa00040000L, active4, 0x2000L);
            case 99 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x80000000000L, active2, 0L, active3,
                                                  0x80000000000L, active4, 0x8000000L);
            case 100 :
                if ((active0 & 0x4000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 62, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0x100000000000000L, active1, 0x1800000000L, active2, 0L,
                                                  active3, 0L, active4, 0L);
            case 101 :
                if ((active2 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(14, 129, 22);
                } else if ((active2 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 145, 22);
                } else if ((active2 & 0x200000L) != 0L) {
                    jjmatchedKind = 149;
                    jjmatchedPos  = 14;
                } else if ((active2 & 0x10000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 156, 22);
                } else if ((active2 & 0x400000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 186, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x300180000000L, active2, 0x100800000000L,
                                                  active3, 0x11L, active4, 0x40130L);
            case 102 :
                if ((active0 & 0x20000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 29, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4,
                                                  0L);
            case 103 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L, active4,
                                                  0L);
            case 104 :
                if ((active2 & 0x2000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 177, 22);
                }
                break;
            case 105 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x380000000000c4L, active3,
                                                  0x4000000000L, active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000L, active4,
                                                  0L);
            case 108 :
                if ((active3 & 0x200000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 237, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x400000002000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0x10000000000000L,
                                                  active4, 0L);
            case 110 :
                if ((active1 & 0x2000000L) != 0L) {
                    jjmatchedKind = 89;
                    jjmatchedPos  = 14;
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x18000000000L, active2, 0x40000000000000L,
                                                  active3, 0x10000000L, active4, 0x8000L);
            case 111 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x1800010000000000L, active3,
                                                  0x2000000100000000L, active4, 0L);
            case 112 :
                if ((active2 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 148, 22);
                } else if ((active3 & 0x400000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 250, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8000L, active2, 0x180000000L, active3,
                                                  0xc000000000000000L, active4, 0L);
            case 114 :
                if ((active3 & 0x1000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 240, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0xc00000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 115 :
                if ((active3 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 208, 22);
                } else if ((active3 & 0x400000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 238, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000800000L,
                                                  active4, 0x200L);
            case 116 :
                if ((active2 & 0x4000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 190, 22);
                } else if ((active4 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 268, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0x20018000000000L, active1, 0x600000080L, active2,
                                                  0x40000000L, active3, 0L, active4, 0x1L);
            case 117 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L, active4,
                                                  0L);
            case 120 :
                if ((active1 & 0x200000L) != 0L) {
                    jjmatchedKind = 85;
                    jjmatchedPos  = 14;
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(13, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(13, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(14, active0, active1, active2, active3, active4);
            return 15;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa16_0(active0, 0xd20018000000000L, active1, 0x1009c180000000L, active2,
                                                  0x20000000L, active3, 0xc000000000800001L, active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x600000000L, active2, 0L, active3,
                                                  0x10000000020000L, active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0L);
            case 100 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3,
                                                  0x4000000L, active4, 0L);
            case 101 :
                if ((active4 & 0x8000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 283, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x180000a001L, active2, 0x180000000L, active3,
                                                  0x10000000L, active4, 0x20L);
            case 102 :
                return jjMoveStringLiteralDfa16_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 103 :
                if ((active2 & 0x40000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 182, 22);
                }
                break;
            case 105 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000002000000L,
                                                  active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000200000L,
                                                  active4, 0L);
            case 108 :
                if ((active2 & 0x8L) != 0L) {
                    return jjStartNfaWithStates_0(15, 131, 22);
                } else if ((active4 & 0x10L) != 0L) {
                    return jjStartNfaWithStates_0(15, 260, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x300000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 110 :
                if ((active2 & 0x40L) != 0L) {
                    return jjStartNfaWithStates_0(15, 134, 22);
                } else if ((active2 & 0x80L) != 0L) {
                    return jjStartNfaWithStates_0(15, 135, 22);
                } else if ((active2 & 0x10000000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 168, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L,
                                                  active4, 0x400000L);
            case 111 :
                return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000000L, active1, 0x10000L, active2, 0L,
                                                  active3, 0x4000000000L, active4, 0x8000L);
            case 112 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L, active4,
                                                  0L);
            case 114 :
                if ((active2 & 0x8000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 179, 22);
                } else if ((active3 & 0x10L) != 0L) {
                    return jjStartNfaWithStates_0(15, 196, 22);
                } else if ((active3 & 0x2000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 253, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x60000000000L, active2, 0x1800000000000000L,
                                                  active3, 0x40000L, active4, 0L);
            case 115 :
                if ((active2 & 0x40000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 158, 22);
                } else if ((active2 & 0x100000000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 172, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L,
                                                  active4, 0x40000L);
            case 116 :
                if ((active4 & 0x100L) != 0L) {
                    return jjStartNfaWithStates_0(15, 264, 22);
                } else if ((active4 & 0x200L) != 0L) {
                    return jjStartNfaWithStates_0(15, 265, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x400000000000L, active2, 0x4000000000004L,
                                                  active3, 0L, active4, 0x2000L);
            case 117 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3,
                                                  0x100000000L, active4, 0L);
            case 119 :
                if ((active2 & 0x10L) != 0L) {
                    return jjStartNfaWithStates_0(15, 132, 22);
                }
                break;
            case 120 :
                if ((active1 & 0x100000L) != 0L) {
                    jjmatchedKind = 84;
                    jjmatchedPos  = 15;
                } else if ((active3 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 225, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1800000000000L, active2, 0x30000000000000L,
                                                  active3, 0x800000000L, active4, 0L);
            case 121 :
                if ((active2 & 0x400L) != 0L) {
                    return jjStartNfaWithStates_0(15, 138, 22);
                } else if ((active4 & 0x1L) != 0L) {
                    return jjStartNfaWithStates_0(15, 256, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(14, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(14, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(15, active0, active1, active2, active3, active4);
            return 16;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x180060000a000L, active2, 0x1800000000000000L,
                                                  active3, 0x800400000L, active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa17_0(active0, 0x20000000000000L, active1, 0x460000010000L, active2,
                                                  0x8000000000L, active3, 0L, active4, 0x400000L);
            case 99 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000L, active4,
                                                  0L);
            case 100 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x10018180000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 101 :
                if ((active4 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 269, 22);
                }
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x2000000000L, active2, 0x34000000000000L,
                                                  active3, 0L, active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa17_0(active0, 0x100000000000000L, active1, 0x4000000000L, active2, 0L,
                                                  active3, 0xc000000000000000L, active4, 0L);
            case 103 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L, active4,
                                                  0L);
            case 105 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4200000L, active4,
                                                  0x8000L);
            case 108 :
                if ((active0 & 0x10000000000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 40, 22);
                }
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x1840000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x80000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 110 :
                if ((active3 & 0x4000000000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 230, 22);
                }
                break;
            case 111 :
                return jjMoveStringLiteralDfa17_0(active0, 0x200000000000000L, active1, 0L, active2, 0x20000000L,
                                                  active3, 0L, active4, 0L);
            case 112 :
                if ((active4 & 0x20L) != 0L) {
                    return jjStartNfaWithStates_0(16, 261, 22);
                }
                return jjMoveStringLiteralDfa17_0(active0, 0xc00000000000000L, active1, 0x80L, active2, 0L, active3,
                                                  0x800001L, active4, 0L);
            case 114 :
                if ((active0 & 0x8000000000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 39, 22);
                } else if ((active3 & 0x10000000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 220, 22);
                }
                return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x180000000L,
                                                  active3, 0x20000L, active4, 0L);
            case 115 :
                if ((active3 & 0x80000000000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 235, 22);
                }
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x1L, active2, 0x800000000L, active3, 0L,
                                                  active4, 0x40000L);
            case 116 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x300000000000L, active2, 0L, active3,
                                                  0x100000000L, active4, 0L);
            case 120 :
                if ((active3 & 0x10000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 244, 22);
                }
                break;
            case 121 :
                if ((active2 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(16, 130, 22);
                }
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0L);
            case 122 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000000L,
                                                  active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(15, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(15, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(16, active0, active1, active2, active3, active4);
            return 17;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa18_0(active0, 0x1020000000000000L, active1, 0x400000000000L, active2, 0L,
                                                  active3, 0L, active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x384000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0x200000L,
                                                  active4, 0L);
            case 100 :
                if ((active2 & 0x4000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(17, 178, 22);
                } else if ((active2 & 0x10000000000000L) != 0L) {
                    jjmatchedKind = 180;
                    jjmatchedPos  = 17;
                }
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x1800000000000L, active2, 0x20000000000000L,
                                                  active3, 0L, active4, 0L);
            case 101 :
                if ((active1 & 0x80L) != 0L) {
                    return jjStartNfaWithStates_0(17, 71, 22);
                } else if ((active3 & 0x20000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(17, 245, 22);
                }
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x10018180000000L, active2, 0L, active3,
                                                  0x20000L, active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x600000000L, active2, 0x20000000L, active3,
                                                  0L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x980000000L, active3, 0x40000L,
                                                  active4, 0x40000L);
            case 107 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000L, active4,
                                                  0L);
            case 108 :
                if ((active2 & 0x800000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(17, 187, 22);
                }
                return jjMoveStringLiteralDfa18_0(active0, 0xc00000000000000L, active1, 0x2000010000L, active2, 0L,
                                                  active3, 0x800000L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3,
                                                  0x800000000L, active4, 0x400000L);
            case 111 :
                return jjMoveStringLiteralDfa18_0(active0, 0x100000000000000L, active1, 0x8000L, active2, 0L, active3,
                                                  0xc000000000000001L, active4, 0L);
            case 112 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L, active4, 0L);
            case 114 :
                if ((active2 & 0x1000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(17, 188, 22);
                }
                return jjMoveStringLiteralDfa18_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 115 :
                if ((active3 & 0x100000000L) != 0L) {
                    return jjStartNfaWithStates_0(17, 224, 22);
                }
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0x4000000L,
                                                  active4, 0x8000L);
            case 116 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x61840000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L, active4,
                                                  0L);
            default :
                break;
        }
        return jjStartNfa_0(16, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(16, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(17, active0, active1, active2, active3, active4);
            return 18;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x300040000000L, active2, 0x20000000000000L,
                                                  active3, 0L, active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa19_0(active0, 0xc00000000000000L, active1, 0x1e00000001L, active2, 0L,
                                                  active3, 0xc20000L, active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 101 :
                if ((active2 & 0x8000000000L) != 0L) {
                    return jjStartNfaWithStates_0(18, 167, 22);
                } else if ((active4 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(18, 271, 22);
                } else if ((active4 & 0x400000L) != 0L) {
                    return jjStartNfaWithStates_0(18, 278, 22);
                }
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x1860000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x400000000000L, active2, 0x20000000L, active3,
                                                  0L, active4, 0L);
            case 103 :
                return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0x800000000L,
                                                  active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000L, active4,
                                                  0L);
            case 108 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x10018180002000L, active2, 0x800L, active3,
                                                  0L, active4, 0L);
            case 109 :
                if ((active0 & 0x200000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(18, 57, 22);
                }
                break;
            case 110 :
                if ((active3 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(18, 210, 22);
                }
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0L, active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x980000000L, active3, 0L,
                                                  active4, 0x40000L);
            case 114 :
                return jjMoveStringLiteralDfa19_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3,
                                                  0xc000000000000000L, active4, 0L);
            case 115 :
                if ((active3 & 0x2000000L) != 0L) {
                    return jjStartNfaWithStates_0(18, 217, 22);
                }
                break;
            case 116 :
                return jjMoveStringLiteralDfa19_0(active0, 0x20000000000000L, active1, 0x2000000000L, active2, 0L,
                                                  active3, 0x4000000L, active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L, active4, 0L);
            case 120 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x80000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(17, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(17, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(18, active0, active1, active2, active3, active4);
            return 19;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0xe1800008000L, active2, 0L, active3,
                                                  0xc000000004020000L, active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x402000002000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x600000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 100 :
                if ((active2 & 0x80000000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 159, 22);
                } else if ((active2 & 0x100000000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 160, 22);
                }
                break;
            case 101 :
                if ((active1 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 80, 22);
                } else if ((active2 & 0x800L) != 0L) {
                    return jjStartNfaWithStates_0(19, 139, 22);
                }
                return jjMoveStringLiteralDfa20_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3, 0x1L,
                                                  active4, 0L);
            case 103 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L, active4,
                                                  0L);
            case 108 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x1800000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 109 :
                if ((active0 & 0x100000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 56, 22);
                }
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x300000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 110 :
                if ((active2 & 0x800000000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 163, 22);
                } else if ((active3 & 0x800000000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 227, 22);
                } else if ((active4 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 274, 22);
                }
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L,
                                                  active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa20_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 115 :
                if ((active3 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 213, 22);
                }
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4,
                                                  0L);
            case 116 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x1001c1c0000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 121 :
                return jjMoveStringLiteralDfa20_0(active0, 0xc00000000000000L, active1, 0L, active2, 0L, active3,
                                                  0x800000L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(18, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(18, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(19, active0, active1, active2, active3, 0L);
            return 20;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L);
            case 97 :
                return jjMoveStringLiteralDfa21_0(active0, 0x1020000000000000L, active1, 0x10118180000000L, active2,
                                                  0x20000000000000L, active3, 0L);
            case 99 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x400000000000L, active2, 0L, active3, 0L);
            case 100 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0xe0000000000L, active2, 0L, active3, 0L);
            case 101 :
                return jjMoveStringLiteralDfa21_0(active0, 0xc00000000000000L, active1, 0x1L, active2, 0L, active3,
                                                  0x800000L);
            case 102 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0L);
            case 105 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x200000000000L, active2, 0x20000000L, active3,
                                                  0L);
            case 108 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000000L);
            case 109 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x1800000000L, active2, 0L, active3, 0L);
            case 111 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L);
            case 114 :
                if ((active3 & 0x1L) != 0L) {
                    return jjStartNfaWithStates_0(20, 192, 22);
                }
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000000L);
            case 115 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L);
            case 116 :
                if ((active3 & 0x400000L) != 0L) {
                    return jjStartNfaWithStates_0(20, 214, 22);
                }
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x1800600000000L, active2, 0L, active3, 0L);
            case 120 :
                if ((active3 & 0x4000000L) != 0L) {
                    return jjStartNfaWithStates_0(20, 218, 22);
                }
                break;
            case 121 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x40002000L, active2, 0L, active3, 0L);
            default :
                break;
        }
        return jjStartNfa_0(19, active0, active1, active2, active3, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @return
     */
    private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
            return jjStartNfa_0(19, old0, old1, old2, old3, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(20, active0, active1, active2, active3, 0L);
            return 21;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x10018180000000L, active2, 0L, active3, 0L);
            case 97 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x1800800000000L, active2, 0L, active3, 0L);
            case 100 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L);
            case 101 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0xe0000000000L, active2, 0L, active3,
                                                  0x4000000000000000L);
            case 102 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L);
            case 105 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x1000008000L, active2, 0L, active3,
                                                  0x8000000000020000L);
            case 108 :
                return jjMoveStringLiteralDfa22_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L);
            case 109 :
                if ((active0 & 0x20000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(21, 53, 22);
                }
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L);
            case 110 :
                if ((active1 & 0x200000000000L) != 0L) {
                    return jjStartNfaWithStates_0(21, 109, 22);
                }
                break;
            case 111 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x600002000L, active2, 0L, active3, 0L);
            case 112 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L);
            case 114 :
                if ((active0 & 0x400000000000000L) != 0L) {
                    jjmatchedKind = 58;
                    jjmatchedPos  = 21;
                } else if ((active1 & 0x4000000000L) != 0L) {
                    return jjStartNfaWithStates_0(21, 102, 22);
                }
                return jjMoveStringLiteralDfa22_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3,
                                                  0x800000L);
            case 115 :
                if ((active1 & 0x1L) != 0L) {
                    return jjStartNfaWithStates_0(21, 64, 22);
                }
                break;
            case 116 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x400000000000L, active2, 0L, active3, 0L);
            case 120 :
                if ((active1 & 0x100000000000L) != 0L) {
                    return jjStartNfaWithStates_0(21, 108, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(20, active0, active1, active2, active3, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @return
     */
    private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
            return jjStartNfa_0(20, old0, old1, old2, old3, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(21, active0, active1, active2, active3, 0L);
            return 22;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa23_0(active0, 0x800000000000000L, active1, 0x1800000000000L, active2, 0L,
                                                  active3, 0L);
            case 97 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L);
            case 101 :
                if ((active1 & 0x40000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 94, 22);
                } else if ((active2 & 0x20000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 157, 22);
                } else if ((active2 & 0x20000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 181, 22);
                }
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0L);
            case 102 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3,
                                                  0x4000000000000000L);
            case 103 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000000L);
            case 105 :
                return jjMoveStringLiteralDfa23_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L);
            case 108 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0xe0000000000L, active2, 0L, active3, 0L);
            case 109 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x18180000000L, active2, 0L, active3, 0L);
            case 110 :
                if ((active1 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 77, 22);
                } else if ((active1 & 0x1000000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 100, 22);
                }
                break;
            case 111 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x400000000000L, active2, 0L, active3, 0L);
            case 114 :
                if ((active1 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 97, 22);
                } else if ((active1 & 0x400000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 98, 22);
                }
                break;
            case 115 :
                if ((active3 & 0x800000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 215, 22);
                }
                break;
            case 120 :
                if ((active1 & 0x800000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 99, 22);
                }
                break;
            case 122 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L);
            default :
                break;
        }
        return jjStartNfa_0(21, active0, active1, active2, active3, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @return
     */
    private int jjMoveStringLiteralDfa23_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
            return jjStartNfa_0(21, old0, old1, old2, old3, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(22, active0, active1, 0L, active3, 0L);
            return 23;
        }
        switch (curChar) {
            case 97 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x10008080000000L, active3, 0L);
            case 99 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x2000000000L, active3, 0L);
            case 101 :
                if ((active3 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(23, 209, 22);
                }
                return jjMoveStringLiteralDfa24_0(active0, 0x1000000000000000L, active1, 0L, active3, 0L);
            case 104 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0L, active3, 0x8000000000000000L);
            case 105 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x10100000000L, active3, 0L);
            case 108 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x8000L, active3, 0L);
            case 109 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x1800000000000L, active3, 0L);
            case 111 :
                return jjMoveStringLiteralDfa24_0(active0, 0x800000000000000L, active1, 0L, active3, 0L);
            case 114 :
                if ((active1 & 0x400000000000L) != 0L) {
                    return jjStartNfaWithStates_0(23, 110, 22);
                }
                break;
            case 116 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0xe0000000000L, active3, 0x4000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(22, active0, active1, 0L, active3, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old3
     * @param active3
     * @return
     */
    private int jjMoveStringLiteralDfa24_0(long old0, long active0, long old1, long active1, long old3, long active3) {
        if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L) {
            return jjStartNfa_0(22, old0, old1, 0L, old3, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(23, active0, active1, 0L, active3, 0L);
            return 24;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa25_0(active0, 0x1000000000000000L, active1, 0L, active3,
                                                  0x4000000000000000L);
            case 97 :
                return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x8e0000000000L, active3, 0L);
            case 99 :
                return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x10000000000000L, active3, 0L);
            case 100 :
                if ((active1 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(24, 79, 22);
                }
                break;
            case 105 :
                return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x1000000000000L, active3, 0L);
            case 110 :
                if ((active1 & 0x100000000L) != 0L) {
                    return jjStartNfaWithStates_0(24, 96, 22);
                } else if ((active1 & 0x10000000000L) != 0L) {
                    return jjStartNfaWithStates_0(24, 104, 22);
                }
                break;
            case 114 :
                return jjMoveStringLiteralDfa25_0(active0, 0x800000000000000L, active1, 0L, active3, 0L);
            case 116 :
                return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x2000000000L, active3, 0x8000000000000000L);
            case 120 :
                if ((active1 & 0x80000000L) != 0L) {
                    return jjStartNfaWithStates_0(24, 95, 22);
                } else if ((active1 & 0x8000000000L) != 0L) {
                    return jjStartNfaWithStates_0(24, 103, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(23, active0, active1, 0L, active3, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old3
     * @param active3
     * @return
     */
    private int jjMoveStringLiteralDfa25_0(long old0, long active0, long old1, long active1, long old3, long active3) {
        if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L) {
            return jjStartNfa_0(23, old0, old1, 0L, old3, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(24, active0, active1, 0L, active3, 0L);
            return 25;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa26_0(active0, 0x800000000000000L, active1, 0xe0000000000L, active3,
                                                  0x8000000000000000L);
            case 110 :
                if ((active1 & 0x1000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(25, 112, 22);
                }
                break;
            case 111 :
                return jjMoveStringLiteralDfa26_0(active0, 0x1000000000000000L, active1, 0x2000000000L, active3, 0L);
            case 116 :
                return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x10000000000000L, active3,
                                                  0x4000000000000000L);
            case 120 :
                if ((active1 & 0x800000000000L) != 0L) {
                    return jjStartNfaWithStates_0(25, 111, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(24, active0, active1, 0L, active3, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old3
     * @param active3
     * @return
     */
    private int jjMoveStringLiteralDfa26_0(long old0, long active0, long old1, long active1, long old3, long active3) {
        if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L) {
            return jjStartNfa_0(24, old0, old1, 0L, old3, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(25, active0, active1, 0L, active3, 0L);
            return 26;
        }
        switch (curChar) {
            case 101 :
                return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0L, active3, 0x4000000000000000L);
            case 102 :
                return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x80000000000L, active3, 0L);
            case 103 :
                return jjMoveStringLiteralDfa27_0(active0, 0x800000000000000L, active1, 0L, active3, 0L);
            case 109 :
                return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x60000000000L, active3, 0L);
            case 111 :
                return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x10000000000000L, active3, 0L);
            case 114 :
                if ((active1 & 0x2000000000L) != 0L) {
                    return jjStartNfaWithStates_0(26, 101, 22);
                }
                return jjMoveStringLiteralDfa27_0(active0, 0x1000000000000000L, active1, 0L, active3, 0L);
            case 116 :
                return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0L, active3, 0x8000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(25, active0, active1, 0L, active3, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old3
     * @param active3
     * @return
     */
    private int jjMoveStringLiteralDfa27_0(long old0, long active0, long old1, long active1, long old3, long active3) {
        if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L) {
            return jjStartNfa_0(25, old0, old1, 0L, old3, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(26, active0, active1, 0L, active3, 0L);
            return 27;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa28_0(active0, 0x1000000000000000L, active1, 0L, active3, 0L);
            case 97 :
                return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0xa0000000000L, active3, 0x4000000000000000L);
            case 101 :
                return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0L, active3, 0x8000000000000000L);
            case 105 :
                return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x40000000000L, active3, 0L);
            case 111 :
                return jjMoveStringLiteralDfa28_0(active0, 0x800000000000000L, active1, 0L, active3, 0L);
            case 114 :
                if ((active1 & 0x10000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(27, 116, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(26, active0, active1, 0L, active3, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old3
     * @param active3
     * @return
     */
    private int jjMoveStringLiteralDfa28_0(long old0, long active0, long old1, long active1, long old3, long active3) {
        if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L) {
            return jjStartNfa_0(26, old0, old1, 0L, old3, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(27, active0, active1, 0L, active3, 0L);
            return 28;
        }
        switch (curChar) {
            case 97 :
                return jjMoveStringLiteralDfa29_0(active0, 0x800000000000000L, active1, 0L, active3,
                                                  0x8000000000000000L);
            case 99 :
                return jjMoveStringLiteralDfa29_0(active0, 0L, active1, 0x80000000000L, active3, 0L);
            case 105 :
                return jjMoveStringLiteralDfa29_0(active0, 0x1000000000000000L, active1, 0L, active3, 0L);
            case 109 :
                if ((active3 & 0x4000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(28, 254, 22);
                }
                break;
            case 110 :
                if ((active1 & 0x40000000000L) != 0L) {
                    return jjStartNfaWithStates_0(28, 106, 22);
                }
                break;
            case 120 :
                if ((active1 & 0x20000000000L) != 0L) {
                    return jjStartNfaWithStates_0(28, 105, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(27, active0, active1, 0L, active3, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old3
     * @param active3
     * @return
     */
    private int jjMoveStringLiteralDfa29_0(long old0, long active0, long old1, long active1, long old3, long active3) {
        if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L) {
            return jjStartNfa_0(27, old0, old1, 0L, old3, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(28, active0, active1, 0L, active3, 0L);
            return 29;
        }
        switch (curChar) {
            case 108 :
                return jjMoveStringLiteralDfa30_0(active0, 0x1800000000000000L, active1, 0L, active3, 0L);
            case 109 :
                if ((active3 & 0x8000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(29, 255, 22);
                }
                break;
            case 116 :
                return jjMoveStringLiteralDfa30_0(active0, 0L, active1, 0x80000000000L, active3, 0L);
            default :
                break;
        }
        return jjStartNfa_0(28, active0, active1, 0L, active3, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old3
     * @param active3
     * @return
     */
    private int jjMoveStringLiteralDfa30_0(long old0, long active0, long old1, long active1, long old3, long active3) {
        if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L) {
            return jjStartNfa_0(28, old0, old1, 0L, old3, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(29, active0, active1, 0L, 0L, 0L);
            return 30;
        }
        switch (curChar) {
            case 105 :
                return jjMoveStringLiteralDfa31_0(active0, 0x800000000000000L, active1, 0L);
            case 108 :
                return jjMoveStringLiteralDfa31_0(active0, 0x1000000000000000L, active1, 0L);
            case 111 :
                return jjMoveStringLiteralDfa31_0(active0, 0L, active1, 0x80000000000L);
            default :
                break;
        }
        return jjStartNfa_0(29, active0, active1, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @return
     */
    private int jjMoveStringLiteralDfa31_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(29, old0, old1, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(30, active0, active1, 0L, 0L, 0L);
            return 31;
        }
        switch (curChar) {
            case 101 :
                if ((active0 & 0x800000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(31, 59, 22);
                }
                return jjMoveStringLiteralDfa32_0(active0, 0x1000000000000000L, active1, 0L);
            case 114 :
                if ((active1 & 0x80000000000L) != 0L) {
                    return jjStartNfaWithStates_0(31, 107, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(30, active0, active1, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @return
     */
    private int jjMoveStringLiteralDfa32_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(30, old0, old1, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(31, active0, 0L, 0L, 0L, 0L);
            return 32;
        }
        switch (curChar) {
            case 103 :
                return jjMoveStringLiteralDfa33_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(31, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa33_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(31, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(32, active0, 0L, 0L, 0L, 0L);
            return 33;
        }
        switch (curChar) {
            case 97 :
                return jjMoveStringLiteralDfa34_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(32, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa34_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(32, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(33, active0, 0L, 0L, 0L, 0L);
            return 34;
        }
        switch (curChar) {
            case 108 :
                return jjMoveStringLiteralDfa35_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(33, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa35_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(33, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(34, active0, 0L, 0L, 0L, 0L);
            return 35;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa36_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(34, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa36_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(34, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(35, active0, 0L, 0L, 0L, 0L);
            return 36;
        }
        switch (curChar) {
            case 99 :
                return jjMoveStringLiteralDfa37_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(35, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa37_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(35, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(36, active0, 0L, 0L, 0L, 0L);
            return 37;
        }
        switch (curChar) {
            case 108 :
                return jjMoveStringLiteralDfa38_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(36, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa38_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(36, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(37, active0, 0L, 0L, 0L, 0L);
            return 38;
        }
        switch (curChar) {
            case 105 :
                return jjMoveStringLiteralDfa39_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(37, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa39_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(37, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(38, active0, 0L, 0L, 0L, 0L);
            return 39;
        }
        switch (curChar) {
            case 101 :
                return jjMoveStringLiteralDfa40_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(38, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa40_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(38, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(39, active0, 0L, 0L, 0L, 0L);
            return 40;
        }
        switch (curChar) {
            case 110 :
                return jjMoveStringLiteralDfa41_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(39, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa41_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(39, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(40, active0, 0L, 0L, 0L, 0L);
            return 41;
        }
        switch (curChar) {
            case 116 :
                return jjMoveStringLiteralDfa42_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(40, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa42_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(40, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(41, active0, 0L, 0L, 0L, 0L);
            return 42;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa43_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(41, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa43_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(41, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(42, active0, 0L, 0L, 0L, 0L);
            return 43;
        }
        switch (curChar) {
            case 118 :
                return jjMoveStringLiteralDfa44_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(42, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa44_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(42, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(43, active0, 0L, 0L, 0L, 0L);
            return 44;
        }
        switch (curChar) {
            case 101 :
                return jjMoveStringLiteralDfa45_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(43, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa45_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(43, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(44, active0, 0L, 0L, 0L, 0L);
            return 45;
        }
        switch (curChar) {
            case 114 :
                return jjMoveStringLiteralDfa46_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(44, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa46_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(44, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(45, active0, 0L, 0L, 0L, 0L);
            return 46;
        }
        switch (curChar) {
            case 115 :
                return jjMoveStringLiteralDfa47_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(45, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa47_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(45, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(46, active0, 0L, 0L, 0L, 0L);
            return 47;
        }
        switch (curChar) {
            case 105 :
                return jjMoveStringLiteralDfa48_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(46, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa48_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(46, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(47, active0, 0L, 0L, 0L, 0L);
            return 48;
        }
        switch (curChar) {
            case 111 :
                return jjMoveStringLiteralDfa49_0(active0, 0x1000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(47, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa49_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(47, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(48, active0, 0L, 0L, 0L, 0L);
            return 49;
        }
        switch (curChar) {
            case 110 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(49, 60, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(48, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param pos
     * @param kind
     * @param state
     * @return
     */
    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos  = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    /**
     * 
     * @param startState
     * @param curPos
     * @return
     */
    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 38;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 28 :
                        case 22 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 297) {
                                kind = 297;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 9 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 297) {
                                kind = 297;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 27 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 297) {
                                kind = 297;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 0 :
                            if ((0x3ff400000000000L & l) != 0L) {
                                if (kind > 296) {
                                    kind = 296;
                                }
                                jjCheckNAddTwoStates(18, 19);
                            } else if (curChar == 45) {
                                jjstateSet[jjnewStateCnt++] = 20;
                            }
                            if ((0xe02000000000L & l) != 0L) {
                                if (kind > 297) {
                                    kind = 297;
                                }
                                jjCheckNAdd(22);
                            }
                            break;
                        case 29 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 297) {
                                kind = 297;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 10 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 297) {
                                kind = 297;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 26 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 297) {
                                kind = 297;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 30 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 297) {
                                kind = 297;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 18 :
                            if ((0x3ff400000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 296) {
                                kind = 296;
                            }
                            jjCheckNAddTwoStates(18, 19);
                            break;
                        case 19 :
                            if (curChar == 45) {
                                jjstateSet[jjnewStateCnt++] = 20;
                            }
                            break;
                        case 20 :
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 296) {
                                kind = 296;
                            }
                            jjCheckNAddTwoStates(18, 19);
                            break;
                        case 21 :
                            if ((0xe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 297) {
                                kind = 297;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 25 :
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 45) {
                                kind = 45;
                            }
                            jjstateSet[jjnewStateCnt++] = 25;
                            break;
                        case 32 :
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 46) {
                                kind = 46;
                            }
                            jjstateSet[jjnewStateCnt++] = 32;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 28 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 297) {
                                    kind = 297;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 108) {
                                jjstateSet[jjnewStateCnt++] = 34;
                            }
                            if (curChar == 108) {
                                jjstateSet[jjnewStateCnt++] = 27;
                            }
                            break;
                        case 9 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 297) {
                                    kind = 297;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 102) {
                                jjstateSet[jjnewStateCnt++] = 8;
                            }
                            break;
                        case 27 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 297) {
                                    kind = 297;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 33;
                            }
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 26;
                            }
                            break;
                        case 0 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 297) {
                                    kind = 297;
                                }
                                jjCheckNAdd(22);
                            }
                            if ((0x8000000080L & l) != 0L) {
                                if (kind > 9) {
                                    kind = 9;
                                }
                            } else if ((0x100000001000L & l) != 0L) {
                                if (kind > 8) {
                                    kind = 8;
                                }
                            } else if ((0x1000000010000L & l) != 0L) {
                                if (kind > 7) {
                                    kind = 7;
                                }
                            } else if ((0x4000000040L & l) != 0L) {
                                if (kind > 6) {
                                    kind = 6;
                                }
                            } else if ((0x400000004L & l) != 0L) {
                                if (kind > 5) {
                                    kind = 5;
                                }
                            } else if (curChar == 82) {
                                jjstateSet[jjnewStateCnt++] = 16;
                            } else if (curChar == 114) {
                                jjstateSet[jjnewStateCnt++] = 10;
                            }
                            if (curChar == 103) {
                                jjAddStates(0, 1);
                            }
                            break;
                        case 29 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 297) {
                                    kind = 297;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 97) {
                                jjstateSet[jjnewStateCnt++] = 35;
                            }
                            if (curChar == 97) {
                                jjstateSet[jjnewStateCnt++] = 28;
                            }
                            break;
                        case 10 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 297) {
                                    kind = 297;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 101) {
                                jjstateSet[jjnewStateCnt++] = 9;
                            }
                            break;
                        case 26 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 297) {
                                    kind = 297;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 108) {
                                jjstateSet[jjnewStateCnt++] = 31;
                            } else if (curChar == 114) {
                                jjstateSet[jjnewStateCnt++] = 24;
                            }
                            break;
                        case 30 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 297) {
                                    kind = 297;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 111) {
                                jjstateSet[jjnewStateCnt++] = 36;
                            }
                            if (curChar == 111) {
                                jjstateSet[jjnewStateCnt++] = 29;
                            }
                            break;
                        case 1 :
                            if ((0x4000000040L & l) != 0L && (kind > 6)) {
                                kind = 6;
                            }
                            break;
                        case 2 :
                            if ((0x1000000010000L & l) != 0L && (kind > 7)) {
                                kind = 7;
                            }
                            break;
                        case 3 :
                            if ((0x100000001000L & l) != 0L && (kind > 8)) {
                                kind = 8;
                            }
                            break;
                        case 4 :
                            if ((0x8000000080L & l) != 0L && (kind > 9)) {
                                kind = 9;
                            }
                            break;
                        case 5 :
                            if ((curChar == 101) && (kind > 11)) {
                                kind = 11;
                            }
                            break;
                        case 6 :
                        case 12 :
                            if (curChar == 101) {
                                jjCheckNAdd(5);
                            }
                            break;
                        case 7 :
                            if (curChar == 114) {
                                jjstateSet[jjnewStateCnt++] = 6;
                            }
                            break;
                        case 8 :
                            if (curChar == 101) {
                                jjstateSet[jjnewStateCnt++] = 7;
                            }
                            break;
                        case 11 :
                            if (curChar == 114) {
                                jjstateSet[jjnewStateCnt++] = 10;
                            }
                            break;
                        case 13 :
                            if (curChar == 114) {
                                jjstateSet[jjnewStateCnt++] = 12;
                            }
                            break;
                        case 14 :
                            if (curChar == 101) {
                                jjstateSet[jjnewStateCnt++] = 13;
                            }
                            break;
                        case 15 :
                            if (curChar == 102) {
                                jjstateSet[jjnewStateCnt++] = 14;
                            }
                            break;
                        case 16 :
                            if (curChar == 101) {
                                jjstateSet[jjnewStateCnt++] = 15;
                            }
                            break;
                        case 17 :
                            if (curChar == 82) {
                                jjstateSet[jjnewStateCnt++] = 16;
                            }
                            break;
                        case 21 :
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 297) {
                                kind = 297;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 22 :
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 297) {
                                kind = 297;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 23 :
                            if (curChar == 103) {
                                jjAddStates(0, 1);
                            }
                            break;
                        case 24 :
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 25;
                            }
                            break;
                        case 31 :
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 32;
                            }
                            break;
                        case 33 :
                            if (curChar == 108) {
                                jjstateSet[jjnewStateCnt++] = 31;
                            }
                            break;
                        case 34 :
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 33;
                            }
                            break;
                        case 35 :
                            if (curChar == 108) {
                                jjstateSet[jjnewStateCnt++] = 34;
                            }
                            break;
                        case 36 :
                            if (curChar == 97) {
                                jjstateSet[jjnewStateCnt++] = 35;
                            }
                            break;
                        case 37 :
                            if (curChar == 111) {
                                jjstateSet[jjnewStateCnt++] = 36;
                            }
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int  i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos  = curPos;
                kind          = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    /**
     * Reinitialise parser. 
     * @param stream
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState  = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    /**
     * 
     */
    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 38; i-- > 0; ) {
            jjrounds[i] = 0x80000000;
        }
    }

    /**
     * Reinitialise parser. 
     * @param stream
     * @param lexState
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state. 
     * @param lexState
     */
    public void SwitchTo(int lexState) {
        if ((lexState >= 1) || (lexState < 0)) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                                    TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    /**
     * 
     * @return
     */
    protected Token jjFillToken() {
        final Token  t;
        final String curTokenImage;
        final int    beginLine;
        final int    endLine;
        final int    beginColumn;
        final int    endColumn;
        String       im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine     = input_stream.getBeginLine();
        beginColumn   = input_stream.getBeginColumn();
        endLine       = input_stream.getEndLine();
        endColumn     = input_stream.getEndColumn();
        t             = Token.newToken(jjmatchedKind, curTokenImage);
        t.beginLine   = beginLine;
        t.endLine     = endLine;
        t.beginColumn = beginColumn;
        t.endColumn   = endColumn;
        return t;
    }

    /**
     * Get the next Token. 
     * @return
     */
    public Token getNextToken() {
        Token matchedToken;
        int   curPos = 0;
        EOFLoop:
        for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken  = jjFillToken();
                return matchedToken;
            }
            try {
                input_stream.backup(0);
                while ((curChar <= 34) && (0x400002600L & (1L << curChar)) != 0L) {
                    curChar = input_stream.BeginToken();
                }
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos  = 0;
            curPos        = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int     error_line   = input_stream.getEndLine();
            int     error_column = input_stream.getEndColumn();
            String  error_after  = null;
            boolean EOFSeen      = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen     = true;
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();
                if ((curChar == '\n') || (curChar == '\r')) {
                    error_line++;
                    error_column = 0;
                } else {
                    error_column++;
                }
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
                                    TokenMgrError.LEXICAL_ERROR);
        }
    }

    /**
     * 
     * @param state
     */
    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state]             = jjround;
        }
    }

    /**
     * 
     * @param start
     * @param end
     */
    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    /**
     * 
     * @param state1
     * @param state2
     */
    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }
}
