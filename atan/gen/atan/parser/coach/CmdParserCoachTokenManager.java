
/* Generated By:JavaCC: Do not edit this line. CmdParserCoachTokenManager.java */
package atan.parser.coach;

/** Token Manager. */
public class CmdParserCoachTokenManager implements CmdParserCoachConstants {
    static final int[] jjnextStates = {30, 37, };

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, null, null, "\147\157\141\154\151\145", null, "\163\145\154\146",
        "\166\151\145\167\137\155\157\144\145", "\150\151\147\150", "\154\157\167", "\167\151\144\145",
        "\156\141\162\162\157\167", "\156\157\162\155\141\154", "\163\164\141\155\151\156\141", "\163\160\145\145\144",
        "\150\145\141\144\137\141\156\147\154\145", "\153\151\143\153", "\144\141\163\150", "\164\165\162\156",
        "\163\141\171", "\145\171\145\40\157\156", "\145\171\145\40\157\146\146",
        "\164\165\162\156\137\156\145\143\153", "\142\145\146\157\162\145\137\153\151\143\153\137\157\146\146",
        "\164\151\155\145\137\157\166\145\162", "\160\154\141\171\137\157\156", "\144\162\157\160\137\142\141\154\154",
        "\153\151\143\153\137\157\146\146\137\154", "\153\151\143\153\137\157\146\146\137\162",
        "\153\151\143\153\137\151\156\137\154", "\153\151\143\153\137\151\156\137\162",
        "\146\162\145\145\137\153\151\143\153\137\162", "\146\162\145\145\137\153\151\143\153\137\154",
        "\146\162\145\145\137\153\151\143\153\137\146\141\165\154\164\137\162",
        "\146\162\145\145\137\153\151\143\153\137\146\141\165\154\164\137\154",
        "\143\157\162\156\145\162\137\153\151\143\153\137\162", "\143\157\162\156\145\162\137\153\151\143\153\137\154",
        "\147\157\141\154\137\153\151\143\153\137\162", "\147\157\141\154\137\153\151\143\153\137\154", null, null,
        "\146\157\165\154\137\162", "\146\157\165\154\137\154", "\157\146\146\163\151\144\145\137\162",
        "\157\146\146\163\151\144\145\137\154", "\150\141\154\146\137\164\151\155\145", "\164\145\141\155",
        "\164\151\155\145\137\165\160",
        "\164\151\155\145\137\165\160\137\167\151\164\150\157\165\164\137\141\137\164\145\141\155",
        "\164\151\155\145\137\145\170\164\145\156\144\145\144", "\151\154\154\145\147\141\154\137\155\157\144\145",
        "\151\154\154\145\147\141\154\137\143\157\155\155\141\156\144\137\146\157\162\155",
        "\151\154\154\145\147\141\154\137\157\142\152\145\143\164\137\146\157\162\155",
        "\156\157\137\155\157\162\145\137\164\145\141\155\137\157\162\137\160\154\141\171\145\162",
        "\156\157\137\155\157\162\145\137\164\145\141\155\137\157\162\137\160\154\141\171\145\162\137\157\162\137\147\157\141\154\151\145",
        "\156\157\137\155\157\162\145\137\160\154\141\171\145\162\137\157\162\137\147\157\141\154\151\145\137\157\162\137\151\154\154\145\147\141\154\137\143\154\151\145\156\164\137\166\145\162\163\151\157\156",
        "\162\145\143\157\156\156\145\143\164", "\165\156\153\156\157\167\156\137\143\157\155\155\141\156\144",
        "\164\157\157\137\155\141\156\171\137\155\157\166\145\163",
        "\163\141\151\144\137\164\157\157\137\155\141\156\171\137\155\145\163\163\141\147\145\163", "\155\157\166\145",
        "\143\150\141\156\147\145\137\155\157\144\145", "\143\150\145\143\153\137\142\141\154\154",
        "\163\164\141\162\164", "\162\145\143\157\166\145\162", "\145\141\162\40\157\156",
        "\145\141\162\40\157\146\146", "\143\150\141\156\147\145\137\160\154\141\171\145\162\137\164\171\160\145",
        "\154\157\157\153", "\164\145\141\155\137\156\141\155\145\163",
        "\164\145\141\155\137\147\162\141\160\150\151\143", "\156\157\137\164\145\141\155\137\146\157\165\156\144",
        "\156\157\137\163\165\143\150\137\160\154\141\171\145\162",
        "\143\141\156\156\157\164\137\163\165\142\137\167\150\151\154\145\137\160\154\141\171\157\156",
        "\156\157\137\163\165\142\163\137\154\145\146\164",
        "\155\141\170\137\157\146\137\164\150\141\164\137\164\171\160\145\137\157\156\137\146\151\145\154\144",
        "\143\141\156\156\157\164\137\143\150\141\156\147\145\137\147\157\141\154\151\145",
        "\143\150\141\156\147\145\137\166\151\145\167", "\143\141\164\143\150", "\151\144",
        "\160\154\141\171\145\162\137\163\160\145\145\144\137\155\141\170",
        "\163\164\141\155\151\156\141\137\151\156\143\137\155\141\170",
        "\160\154\141\171\145\162\137\144\145\143\141\171", "\151\156\145\162\164\151\141\137\155\157\155\145\156\164",
        "\160\154\141\171\145\162\137\163\151\172\145", "\153\151\143\153\141\142\154\145\137\155\141\162\147\151\156",
        "\153\151\143\153\137\162\141\156\144", "\145\170\164\162\141\137\163\164\141\155\151\156\141",
        "\145\146\146\157\162\164\137\155\141\170", "\145\146\146\157\162\164\137\155\151\156",
        "\141\154\154\157\167\137\155\165\154\164\137\144\145\146\141\165\154\164\137\164\171\160\145",
        "\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145\137\144\145\154\164\141\137\155\141\170",
        "\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145\137\144\145\154\164\141\137\155\151\156",
        "\145\146\146\157\162\164\137\155\141\170\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\145\146\146\157\162\164\137\155\151\156\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\145\170\164\162\141\137\163\164\141\155\151\156\141\137\144\145\154\164\141\137\155\141\170",
        "\145\170\164\162\141\137\163\164\141\155\151\156\141\137\144\145\154\164\141\137\155\151\156",
        "\151\156\145\162\164\151\141\137\155\157\155\145\156\164\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\153\151\143\153\137\162\141\156\144\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\153\151\143\153\141\142\154\145\137\155\141\162\147\151\156\137\144\145\154\164\141\137\155\141\170",
        "\153\151\143\153\141\142\154\145\137\155\141\162\147\151\156\137\144\145\154\164\141\137\155\151\156",
        "\156\145\167\137\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145\137\144\145\154\164\141\137\155\141\170",
        "\156\145\167\137\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145\137\144\145\154\164\141\137\155\151\156",
        "\156\145\167\137\163\164\141\155\151\156\141\137\151\156\143\137\155\141\170\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\160\154\141\171\145\162\137\144\145\143\141\171\137\144\145\154\164\141\137\155\141\170",
        "\160\154\141\171\145\162\137\144\145\143\141\171\137\144\145\154\164\141\137\155\151\156",
        "\160\154\141\171\145\162\137\163\151\172\145\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\160\154\141\171\145\162\137\163\160\145\145\144\137\155\141\170\137\144\145\154\164\141\137\155\141\170",
        "\160\154\141\171\145\162\137\163\160\145\145\144\137\155\141\170\137\144\145\154\164\141\137\155\151\156",
        "\160\154\141\171\145\162\137\164\171\160\145\163", "\160\164\137\155\141\170",
        "\162\141\156\144\157\155\137\163\145\145\144",
        "\163\164\141\155\151\156\141\137\151\156\143\137\155\141\170\137\144\145\154\164\141\137\146\141\143\164\157\162",
        "\163\165\142\163\137\155\141\170", "\141\165\144\151\157\137\143\165\164\137\144\151\163\164",
        "\141\165\164\157\137\155\157\144\145", "\142\141\143\153\137\144\141\163\150\137\162\141\164\145",
        "\142\141\143\153\137\160\141\163\163\145\163", "\142\141\154\154\137\141\143\143\145\154\137\155\141\170",
        "\142\141\154\154\137\144\145\143\141\171", "\142\141\154\154\137\162\141\156\144",
        "\142\141\154\154\137\163\151\172\145", "\142\141\154\154\137\163\160\145\145\144\137\155\141\170",
        "\142\141\154\154\137\163\164\165\143\153\137\141\162\145\141", "\142\141\154\154\137\167\145\151\147\150\164",
        "\143\141\164\143\150\137\142\141\156\137\143\171\143\154\145",
        "\143\141\164\143\150\137\160\162\157\142\141\142\151\154\151\164\171",
        "\143\141\164\143\150\141\142\154\145\137\141\162\145\141\137\154",
        "\143\141\164\143\150\141\142\154\145\137\141\162\145\141\137\167",
        "\143\153\151\143\153\137\155\141\162\147\151\156",
        "\143\154\141\156\147\137\141\144\166\151\143\145\137\167\151\156",
        "\143\154\141\156\147\137\144\145\146\151\156\145\137\167\151\156",
        "\143\154\141\156\147\137\144\145\154\137\167\151\156",
        "\143\154\141\156\147\137\151\156\146\157\137\167\151\156",
        "\143\154\141\156\147\137\155\145\163\163\137\144\145\154\141\171",
        "\143\154\141\156\147\137\155\145\163\163\137\160\145\162\137\143\171\143\154\145",
        "\143\154\141\156\147\137\155\145\164\141\137\167\151\156",
        "\143\154\141\156\147\137\162\165\154\145\137\167\151\156",
        "\143\154\141\156\147\137\167\151\156\137\163\151\172\145", "\143\157\141\143\150",
        "\143\157\141\143\150\137\160\157\162\164", "\143\157\141\143\150\137\167\137\162\145\146\145\162\145\145",
        "\143\157\156\156\145\143\164\137\167\141\151\164", "\143\157\156\164\162\157\154\137\162\141\144\151\165\163",
        "\144\141\163\150\137\141\156\147\154\145\137\163\164\145\160",
        "\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145",
        "\144\162\157\160\137\142\141\154\154\137\164\151\155\145", "\145\146\146\157\162\164\137\144\145\143",
        "\145\146\146\157\162\164\137\144\145\143\137\164\150\162", "\145\146\146\157\162\164\137\151\156\143",
        "\145\146\146\157\162\164\137\151\156\143\137\164\150\162", "\145\146\146\157\162\164\137\151\156\151\164",
        "\145\170\164\162\141\137\150\141\154\146\137\164\151\155\145",
        "\146\157\162\142\151\144\137\153\151\143\153\137\157\146\146\137\157\146\146\163\151\144\145",
        "\146\162\145\145\137\153\151\143\153\137\146\141\165\154\164\163",
        "\146\162\145\145\146\157\162\155\137\163\145\156\144\137\160\145\162\151\157\144",
        "\146\162\145\145\146\157\162\155\137\167\141\151\164\137\160\145\162\151\157\144",
        "\146\165\154\154\163\164\141\164\145\137\154", "\146\165\154\154\163\164\141\164\145\137\162",
        "\147\141\155\145\137\154\157\147\137\143\157\155\160\162\145\163\163\151\157\156",
        "\147\141\155\145\137\154\157\147\137\144\141\164\145\144", "\147\141\155\145\137\154\157\147\137\144\151\162",
        "\147\141\155\145\137\154\157\147\137\146\151\170\145\144",
        "\147\141\155\145\137\154\157\147\137\146\151\170\145\144\137\156\141\155\145",
        "\147\141\155\145\137\154\157\147\137\166\145\162\163\151\157\156",
        "\147\141\155\145\137\154\157\147\147\151\156\147", "\147\141\155\145\137\157\166\145\162\137\167\141\151\164",
        "\147\157\141\154\137\167\151\144\164\150", "\147\157\141\154\151\145\137\155\141\170\137\155\157\166\145\163",
        "\150\145\141\162\137\144\145\143\141\171", "\150\145\141\162\137\151\156\143",
        "\150\145\141\162\137\155\141\170", "\153\145\145\160\141\167\141\171",
        "\153\145\145\160\141\167\141\171\137\154\145\156\147\164\150",
        "\153\145\145\160\141\167\141\171\137\154\157\147\137\144\141\164\145\144",
        "\153\145\145\160\141\167\141\171\137\154\157\147\137\144\151\162",
        "\153\145\145\160\141\167\141\171\137\154\157\147\137\146\151\170\145\144",
        "\153\145\145\160\141\167\141\171\137\154\157\147\137\146\151\170\145\144\137\156\141\155\145",
        "\153\145\145\160\141\167\141\171\137\154\157\147\147\151\156\147",
        "\153\145\145\160\141\167\141\171\137\163\164\141\162\164",
        "\153\145\145\160\141\167\141\171\137\167\151\144\164\150",
        "\153\151\143\153\137\157\146\146\137\167\141\151\164",
        "\153\151\143\153\137\160\157\167\145\162\137\162\141\164\145",
        "\153\151\143\153\137\162\141\156\144\137\146\141\143\164\157\162\137\154",
        "\153\151\143\153\137\162\141\156\144\137\146\141\143\164\157\162\137\162",
        "\154\141\156\144\155\141\162\153\137\146\151\154\145",
        "\154\157\147\137\144\141\164\145\137\146\157\162\155\141\164", "\154\157\147\137\164\151\155\145\163",
        "\155\141\170\137\142\141\143\153\137\164\141\143\153\154\145\137\160\157\167\145\162",
        "\155\141\170\137\144\141\163\150\137\141\156\147\154\145",
        "\155\141\170\137\144\141\163\150\137\160\157\167\145\162",
        "\155\141\170\137\147\157\141\154\137\153\151\143\153\163",
        "\155\141\170\137\164\141\143\153\154\145\137\160\157\167\145\162", "\155\141\170\155\157\155\145\156\164",
        "\155\141\170\156\145\143\153\141\156\147", "\155\141\170\156\145\143\153\155\157\155\145\156\164",
        "\155\141\170\160\157\167\145\162", "\155\151\156\137\144\141\163\150\137\141\156\147\154\145",
        "\155\151\156\137\144\141\163\150\137\160\157\167\145\162", "\155\151\156\155\157\155\145\156\164",
        "\155\151\156\156\145\143\153\141\156\147", "\155\151\156\156\145\143\153\155\157\155\145\156\164",
        "\155\151\156\160\157\167\145\162", "\156\162\137\145\170\164\162\141\137\150\141\154\146\163",
        "\156\162\137\156\157\162\155\141\154\137\150\141\154\146\163",
        "\157\146\146\163\151\144\145\137\141\143\164\151\166\145\137\141\162\145\141\137\163\151\172\145",
        "\157\146\146\163\151\144\145\137\153\151\143\153\137\155\141\162\147\151\156",
        "\157\154\143\157\141\143\150\137\160\157\162\164", "\157\154\144\137\143\157\141\143\150\137\150\145\141\162",
        "\160\145\156\137\141\154\154\157\167\137\155\165\154\164\137\153\151\143\153\163",
        "\160\145\156\137\142\145\146\157\162\145\137\163\145\164\165\160\137\167\141\151\164",
        "\160\145\156\137\143\157\141\143\150\137\155\157\166\145\163\137\160\154\141\171\145\162\163",
        "\160\145\156\137\144\151\163\164\137\170",
        "\160\145\156\137\155\141\170\137\145\170\164\162\141\137\153\151\143\153\163",
        "\160\145\156\137\155\141\170\137\147\157\141\154\151\145\137\144\151\163\164\137\170",
        "\160\145\156\137\156\162\137\153\151\143\153\163",
        "\160\145\156\137\162\141\156\144\157\155\137\167\151\156\156\145\162",
        "\160\145\156\137\162\145\141\144\171\137\167\141\151\164",
        "\160\145\156\137\163\145\164\165\160\137\167\141\151\164",
        "\160\145\156\137\164\141\153\145\156\137\167\141\151\164",
        "\160\145\156\141\154\164\171\137\163\150\157\157\164\137\157\165\164\163",
        "\160\154\141\171\145\162\137\141\143\143\145\154\137\155\141\170",
        "\160\154\141\171\145\162\137\162\141\156\144",
        "\160\154\141\171\145\162\137\163\160\145\145\144\137\155\141\170\137\155\151\156",
        "\160\154\141\171\145\162\137\167\145\151\147\150\164", "\160\157\151\156\164\137\164\157\137\142\141\156",
        "\160\157\151\156\164\137\164\157\137\144\165\162\141\164\151\157\156", "\160\157\162\164",
        "\160\162\141\156\144\137\146\141\143\164\157\162\137\154",
        "\160\162\141\156\144\137\146\141\143\164\157\162\137\162", "\160\162\157\146\151\154\145",
        "\160\162\157\160\145\162\137\147\157\141\154\137\153\151\143\153\163",
        "\161\165\141\156\164\151\172\145\137\163\164\145\160",
        "\161\165\141\156\164\151\172\145\137\163\164\145\160\137\154",
        "\162\145\143\157\162\144\137\155\145\163\163\141\147\145\163", "\162\145\143\157\166\145\162\137\144\145\143",
        "\162\145\143\157\166\145\162\137\144\145\143\137\164\150\162",
        "\162\145\143\157\166\145\162\137\151\156\151\164", "\162\145\143\157\166\145\162\137\155\151\156",
        "\162\145\143\166\137\163\164\145\160", "\163\141\171\137\143\157\141\143\150\137\143\156\164\137\155\141\170",
        "\163\141\171\137\143\157\141\143\150\137\155\163\147\137\163\151\172\145",
        "\163\141\171\137\155\163\147\137\163\151\172\145", "\163\145\156\144\137\143\157\155\155\163",
        "\163\145\156\144\137\163\164\145\160", "\163\145\156\144\137\166\151\137\163\164\145\160",
        "\163\145\156\163\145\137\142\157\144\171\137\163\164\145\160",
        "\163\151\144\145\137\144\141\163\150\137\162\141\164\145",
        "\163\151\155\165\154\141\164\157\162\137\163\164\145\160",
        "\163\154\157\167\137\144\157\167\156\137\146\141\143\164\157\162",
        "\163\154\157\167\156\145\163\163\137\157\156\137\164\157\160\137\146\157\162\137\154\145\146\164\137\164\145\141\155",
        "\163\154\157\167\156\145\163\163\137\157\156\137\164\157\160\137\146\157\162\137\162\151\147\150\164\137\164\145\141\155",
        "\163\164\141\155\151\156\141\137\143\141\160\141\143\151\164\171",
        "\163\164\141\155\151\156\141\137\155\141\170", "\163\164\141\162\164\137\147\157\141\154\137\154",
        "\163\164\141\162\164\137\147\157\141\154\137\162",
        "\163\164\157\160\160\145\144\137\142\141\154\154\137\166\145\154",
        "\163\171\156\143\150\137\155\151\143\162\157\137\163\154\145\145\160",
        "\163\171\156\143\150\137\155\157\144\145", "\163\171\156\143\150\137\157\146\146\163\145\164",
        "\163\171\156\143\150\137\163\145\145\137\157\146\146\163\145\164",
        "\164\141\143\153\154\145\137\142\141\143\153\137\144\151\163\164",
        "\164\141\143\153\154\145\137\143\171\143\154\145\163", "\164\141\143\153\154\145\137\144\151\163\164",
        "\164\141\143\153\154\145\137\145\170\160\157\156\145\156\164",
        "\164\141\143\153\154\145\137\160\157\167\145\162\137\162\141\164\145",
        "\164\141\143\153\154\145\137\167\151\144\164\150",
        "\164\145\141\155\137\141\143\164\165\141\164\157\162\137\156\157\151\163\145",
        "\164\145\141\155\137\154\137\163\164\141\162\164", "\164\145\141\155\137\162\137\163\164\141\162\164",
        "\164\145\170\164\137\154\157\147\137\143\157\155\160\162\145\163\163\151\157\156",
        "\164\145\170\164\137\154\157\147\137\144\141\164\145\144", "\164\145\170\164\137\154\157\147\137\144\151\162",
        "\164\145\170\164\137\154\157\147\137\146\151\170\145\144",
        "\164\145\170\164\137\154\157\147\137\146\151\170\145\144\137\156\141\155\145",
        "\164\145\170\164\137\154\157\147\147\151\156\147", "\165\163\145\137\157\146\146\163\151\144\145",
        "\166\145\162\142\157\163\145", "\166\151\163\151\142\154\145\137\141\156\147\154\145",
        "\166\151\163\151\142\154\145\137\144\151\163\164\141\156\143\145", "\167\151\156\144\137\141\156\147",
        "\167\151\156\144\137\144\151\162", "\167\151\156\144\137\146\157\162\143\145",
        "\167\151\156\144\137\156\157\156\145", "\167\151\156\144\137\162\141\156\144",
        "\167\151\156\144\137\162\141\156\144\157\155", "\143", "\164", "\162", "\50", "\51", "\40", null, null,
    };
    static final long[] jjtoSkip  = {0x1eL, 0x0L, 0x0L, 0x0L, 0x0L, };
    static final long[] jjtoToken = {0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL,
                                     0xfffffffffffL, };

    /** Lexer state names. */
    public static final String[] lexStateNames = {"DEFAULT", };
    int                          curLexState   = 0;

    /** Debug output. */
    public java.io.PrintStream debugStream     = System.out;
    int                        defaultLexState = 0;
    private final int[]        jjrounds        = new int[38];
    private final int[]        jjstateSet      = new int[76];
    protected char             curChar;
    protected SimpleCharStream input_stream;
    int                        jjmatchedKind;
    int                        jjmatchedPos;
    int                        jjnewStateCnt;
    int                        jjround;

    /**
     * Constructor. 
     * @param stream
     */
    public CmdParserCoachTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag) {
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }
        input_stream = stream;
    }

    /**
     * Constructor. 
     * @param stream
     * @param lexState
     */
    public CmdParserCoachTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Set debug output. 
     * @param ds
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    /**
     * 
     * @param pos
     * @param active0
     * @param active1
     * @param active2
     * @param active3
     * @param active4
     * @return
     */
    private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3,
            long active4) {
        switch (pos) {
            case 0 :
                if ((active0 & 0xf0060051000000L) != 0L || (active1 & 0x1c9a19L) != 0L || (active2 & 0x3ffff8L) != 0L
                        || (active4 & 0x3003fff800L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x180000000400L) != 0L || (active2 & 0x7fe000000000L) != 0L) {
                    jjmatchedKind = 9;
                    return 30;
                }
                if ((active0 & 0xbf0e001f0eff7000L) != 0L || (active1 & 0x3c03ffffaa361a6L) != 0L
                        || (active2 & 0x7fff80007fc00000L) != 0L || (active3 & 0xffc0c000007ffffcL) != 0L
                        || (active4 & 0xffc0007ffL) != 0L) {
                    jjmatchedKind = 299;
                    return 22;
                }
                if ((active0 & 0x181e000000000L) != 0L || (active2 & 0x1f80000000L) != 0L) {
                    jjmatchedKind = 6;
                    return 22;
                }
                if ((active0 & 0x80000000L) != 0L || (active1 & 0x1fc00005400000L) != 0L
                        || (active3 & 0x3fffff800000L) != 0L) {
                    jjmatchedKind = 7;
                    return 22;
                }
                if ((active0 & 0x8000L) != 0L || (active1 & 0x400L) != 0L || (active2 & 0x8000000000000000L) != 0L
                        || (active3 & 0x3L) != 0L) {
                    jjmatchedKind = 8;
                    return 22;
                }
                if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x20000000000040L) != 0L
                        || (active3 & 0x3f000000000000L) != 0L || (active4 & 0x4000000000L) != 0L) {
                    return 10;
                }
                if ((active0 & 0x20000000L) != 0L || (active1 & 0xfc00000000000000L) != 0L || (active2 & 0x7L) != 0L) {
                    jjmatchedKind = 5;
                    return 22;
                }
                return -1;
            case 1 :
                if ((active1 & 0x200000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x40L) != 0L
                        || (active3 & 0x3f000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 1;
                    return 9;
                }
                if ((active0 & 0xbfff87fffffff000L) != 0L || (active1 & 0xffffffffffdfffbfL) != 0L
                        || (active2 & 0xffff9fffffffffffL) != 0L || (active3 & 0xffc0ffffffffffffL) != 0L
                        || (active4 & 0xfffffffffL) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 1;
                    return 22;
                }
                if ((active0 & 0x180000000400L) != 0L || (active2 & 0x600000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 1;
                    return 29;
                }
                return -1;
            case 2 :
                if ((active0 & 0x2008000L) != 0L || (active3 & 0x1c0000000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x180000000400L) != 0L || (active2 & 0x600000000000L) != 0L) {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 2;
                    }
                    return 28;
                }
                if ((active0 & 0xffff87fffdff7000L) != 0L || (active1 & 0xffffffffffdfffffL) != 0L
                        || (active2 & 0xffff9fffffffffffL) != 0L || (active3 & 0xfe3fffffffffffffL) != 0L
                        || (active4 & 0xfffffffffL) != 0L) {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 2;
                    }
                    return 22;
                }
                return -1;
            case 3 :
                if ((active0 & 0x10001e11c15000L) != 0L || (active1 & 0x70618001c04L) != 0L
                        || (active2 & 0x7800000000c00000L) != 0L || (active3 & 0x20000000000L) != 0L
                        || (active4 & 0xe0000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xc000000L) != 0L || (active1 & 0x180L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 2;
                    }
                    return -1;
                }
                if ((active0 & 0xffef87e1e03e2000L) != 0L || (active1 & 0xfffff8f9e7dfe27bL) != 0L
                        || (active2 & 0x87ff9fffff3fffffL) != 0L || (active3 & 0xfffffdffffffffffL) != 0L
                        || (active4 & 0xffff1ffffL) != 0L) {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 3;
                    }
                    return 22;
                }
                if ((active0 & 0x180000000400L) != 0L || (active2 & 0x600000000000L) != 0L) {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 3;
                    }
                    return 27;
                }
                return -1;
            case 4 :
                if ((active0 & 0x100000L) != 0L || (active1 & 0x100020L) != 0L || (active2 & 0xe0078L) != 0L
                        || (active4 & 0x30L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x180000000000L) != 0L || (active2 & 0x200000000000L) != 0L) {
                    if (jjmatchedPos != 4) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 4;
                    }
                    return 26;
                }
                if ((active0 & 0xc000000L) != 0L || (active1 & 0x180L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 2;
                    }
                    return -1;
                }
                if ((active0 & 0xffef87fff02e2400L) != 0L || (active1 & 0xffffffffffcffa5bL) != 0L
                        || (active2 & 0xffffdffffff1ff87L) != 0L || (active3 & 0xfffffdffffffffffL) != 0L
                        || (active4 & 0xfffffffcfL) != 0L) {
                    if (jjmatchedPos != 4) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 4;
                    }
                    return 22;
                }
                return -1;
            case 5 :
                if ((active0 & 0x1800000060400L) != 0L || (active1 & 0x10000000000000L) != 0L
                        || (active2 & 0x400000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xc000000L) != 0L || (active1 & 0x180L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 2;
                    }
                    return -1;
                }
                if ((active0 & 0xffee1ffff0282000L) != 0L || (active1 & 0xffefffffffcffa5bL) != 0L
                        || (active2 & 0xffffbffffffdffffL) != 0L || (active3 & 0xfffffdffffffffffL) != 0L
                        || (active4 & 0xfffffffffL) != 0L) {
                    if (jjmatchedPos != 5) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 5;
                    }
                    return 22;
                }
                return -1;
            case 6 :
                if ((active0 & 0x60000080080000L) != 0L || (active1 & 0x40000000800040L) != 0L
                        || (active3 & 0x1e100000000000L) != 0L || (active4 & 0x800000cL) != 0L) {
                    return 22;
                }
                if ((active0 & 0x8000000L) != 0L || (active1 & 0x100L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 2;
                    }
                    return -1;
                }
                if ((active0 & 0xff8e1fff70202000L) != 0L || (active1 & 0xffafffffff4ffa1bL) != 0L
                        || (active2 & 0xfffffffffffdffffL) != 0L || (active3 & 0xffe1edffffffffffL) != 0L
                        || (active4 & 0xff7fffff3L) != 0L) {
                    if (jjmatchedPos != 6) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 6;
                    }
                    return 22;
                }
                return -1;
            case 7 :
                if ((active1 & 0x80000000000000L) != 0L || (active2 & 0x7ff000000000000L) != 0L
                        || (active3 & 0x10400L) != 0L || (active4 & 0xc0000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xffce1fff70202000L) != 0L || (active1 & 0xff6fffffffcffa1bL) != 0L
                        || (active2 & 0xf800fffffffdffffL) != 0L || (active3 & 0xffffedfffffefbffL) != 0L
                        || (active4 & 0xf37ffffffL) != 0L) {
                    if (jjmatchedPos != 7) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 7;
                    }
                    return 22;
                }
                return -1;
            case 8 :
                if ((active0 & 0x400e001950002000L) != 0L || (active1 & 0xc200010010000000L) != 0L
                        || (active2 & 0x6000000001000000L) != 0L || (active3 & 0x420000000002082L) != 0L
                        || (active4 & 0xe00000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xbfc01fe620200000L) != 0L || (active1 & 0x3d6ffeffefcffa1bL) != 0L
                        || (active2 & 0x9ff8fffffefdffffL) != 0L || (active3 & 0xfbdfedfffffedb7dL) != 0L
                        || (active4 & 0x137ffffffL) != 0L) {
                    if (jjmatchedPos != 8) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 8;
                    }
                    return 22;
                }
                return -1;
            case 9 :
                if ((active0 & 0xbfc01fe020000000L) != 0L || (active1 & 0x1d6fffe72fcff20bL) != 0L
                        || (active2 & 0xfff85fffe1f9ffffL) != 0L || (active3 & 0xf9dfedfffbfe9a7dL) != 0L
                        || (active4 & 0x837fffeffL) != 0L) {
                    if (jjmatchedPos != 9) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 9;
                    }
                    return 22;
                }
                if ((active0 & 0x600200000L) != 0L || (active1 & 0x20000018c0000810L) != 0L
                        || (active2 & 0xa0001e040000L) != 0L || (active3 & 0x200000004004100L) != 0L
                        || (active4 & 0x100000100L) != 0L) {
                    return 22;
                }
                return -1;
            case 10 :
                if ((active0 & 0x186000000000L) != 0L || (active1 & 0x821000004080008L) != 0L
                        || (active2 & 0x1820000004L) != 0L || (active3 & 0x16001000000000L) != 0L
                        || (active4 & 0x804002008L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xbfc0078020000000L) != 0L || (active1 & 0x154effff2bc7f203L) != 0L
                        || (active2 & 0xfff85fe7d5f9fffbL) != 0L || (active3 & 0xf9c9edeffbfe9a7dL) != 0L
                        || (active4 & 0x33ffdef7L) != 0L) {
                    if (jjmatchedPos != 10) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 10;
                    }
                    return 22;
                }
                return -1;
            case 11 :
                if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x8c00001011000L) != 0L
                        || (active2 & 0x88000100080L) != 0L || (active3 & 0x908008020200000L) != 0L
                        || (active4 & 0x24d0230L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xbec0078020000000L) != 0L || (active1 & 0x15473fff2ac6e203L) != 0L
                        || (active2 & 0xfff85767d5e9ff7bL) != 0L || (active3 & 0xf0c5ed6fdbde9a7dL) != 0L
                        || (active4 & 0x31b2dcc7L) != 0L) {
                    if (jjmatchedPos != 11) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 11;
                    }
                    return 22;
                }
                return -1;
            case 12 :
                if ((active0 & 0x80060000000000L) != 0L || (active1 & 0x6020002000L) != 0L
                        || (active2 & 0x8800000000000400L) != 0L || (active3 & 0xc04000008200L) != 0L
                        || (active4 & 0x10001000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xbe40018020000000L) != 0L || (active1 & 0x1547ff9f0ac6c203L) != 0L
                        || (active2 & 0x77f85767d5e9fb7bL) != 0L || (active3 & 0xf0c52d2fdbde187dL) != 0L
                        || (active4 & 0x21b2ccc7L) != 0L) {
                    if (jjmatchedPos != 12) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 12;
                    }
                    return 22;
                }
                return -1;
            case 13 :
                if ((active1 & 0x1500008002004001L) != 0L || (active2 & 0x60013401521c801L) != 0L
                        || (active3 & 0x60000c0380421838L) != 0L || (active4 & 0x1a00000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0xbe40018020000000L) != 0L || (active1 & 0x47ff7f08c68202L) != 0L
                        || (active2 & 0x71f84427c0c8337aL) != 0L || (active3 & 0x90c5a12c5b9c0045L) != 0L
                        || (active4 & 0x2012ccc7L) != 0L) {
                    if (jjmatchedPos != 13) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 13;
                    }
                    return 22;
                }
                return -1;
            case 14 :
                if ((active0 & 0x8000000020000000L) != 0L || (active1 & 0x40060608800000L) != 0L
                        || (active2 & 0x1008000040c8000aL) != 0L || (active3 & 0x1005800000040001L) != 0L
                        || (active4 & 0x4000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3e40018000000000L) != 0L || (active1 & 0x7f9f900468202L) != 0L
                        || (active2 & 0x61f0462780003370L) != 0L || (active3 & 0x80c0212c5b980044L) != 0L
                        || (active4 & 0x21128cc7L) != 0L) {
                    if (jjmatchedPos != 14) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 14;
                    }
                    return 22;
                }
                return -1;
            case 15 :
                if ((active1 & 0x6000000400000L) != 0L || (active2 & 0x120440100001360L) != 0L
                        || (active3 & 0x8000002800000040L) != 0L || (active4 & 0x20000c44L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3e40018000000000L) != 0L || (active1 & 0x41ffff00068202L) != 0L
                        || (active2 & 0x60d0022680002010L) != 0L || (active3 & 0xc021045b980004L) != 0L
                        || (active4 & 0x1128083L) != 0L) {
                    if (jjmatchedPos != 15) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 15;
                    }
                    return 22;
                }
                return -1;
            case 16 :
                if ((active0 & 0x18000000000L) != 0L || (active2 & 0x10L) != 0L || (active3 & 0x40210040000000L) != 0L
                        || (active4 & 0x8080L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3e40000000000000L) != 0L || (active1 & 0x47ffff00068202L) != 0L
                        || (active2 & 0x60d0022680002000L) != 0L || (active3 & 0x8000241b980004L) != 0L
                        || (active4 & 0x1120003L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 16;
                    return 22;
                }
                return -1;
            case 17 :
                if ((active1 & 0x200L) != 0L || (active2 & 0x60d0000000000000L) != 0L
                        || (active3 & 0x80000400000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3e40000000000000L) != 0L || (active1 & 0x47ffff00068002L) != 0L
                        || (active2 & 0x22680002000L) != 0L || (active3 & 0x201b980004L) != 0L
                        || (active4 & 0x1120003L) != 0L) {
                    if (jjmatchedPos != 17) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 17;
                    }
                    return 22;
                }
                return -1;
            case 18 :
                if ((active0 & 0x400000000000000L) != 0L || (active2 & 0x20000000000L) != 0L
                        || (active3 & 0x8100000L) != 0L || (active4 & 0x1020000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3a40000000000000L) != 0L || (active1 & 0x47ffff00068002L) != 0L
                        || (active2 & 0x80002680002000L) != 0L || (active3 & 0x2013880004L) != 0L
                        || (active4 & 0x100003L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 18;
                    return 22;
                }
                return -1;
            case 19 :
                if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x40000L) != 0L
                        || (active2 & 0x2600002000L) != 0L || (active3 & 0x2000800000L) != 0L
                        || (active4 & 0x100000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3840000000000000L) != 0L || (active1 & 0x47ffff00028002L) != 0L
                        || (active2 & 0x80000080000000L) != 0L || (active3 & 0x13080004L) != 0L
                        || (active4 & 0x3L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 19;
                    return 22;
                }
                return -1;
            case 20 :
                if ((active3 & 0x11000004L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3840000000000000L) != 0L || (active1 & 0x47ffff00028002L) != 0L
                        || (active2 & 0x80000080000000L) != 0L || (active3 & 0x2080000L) != 0L
                        || (active4 & 0x3L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 20;
                    return 22;
                }
                return -1;
            case 21 :
                if ((active0 & 0x1840000000000000L) != 0L || (active1 & 0xc10000000002L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x473eff00028000L) != 0L
                        || (active2 & 0x80000080000000L) != 0L || (active3 & 0x2080000L) != 0L
                        || (active4 & 0x3L) != 0L) {
                    if (jjmatchedPos != 21) {
                        jjmatchedKind = 299;
                        jjmatchedPos  = 21;
                    }
                    return 22;
                }
                return -1;
            case 22 :
                if ((active1 & 0x7900008000L) != 0L || (active2 & 0x80000080000000L) != 0L
                        || (active3 & 0x2000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x473e8600020000L) != 0L
                        || (active3 & 0x80000L) != 0L || (active4 & 0x3L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 22;
                    return 22;
                }
                return -1;
            case 23 :
                if ((active1 & 0x1000000000000L) != 0L || (active3 & 0x80000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x463e8600020000L) != 0L
                        || (active4 & 0x3L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 23;
                    return 22;
                }
                return -1;
            case 24 :
                if ((active1 & 0x60600020000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x46388000000000L) != 0L
                        || (active4 & 0x3L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 24;
                    return 22;
                }
                return -1;
            case 25 :
                if ((active1 & 0x6000000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x40388000000000L) != 0L
                        || (active4 & 0x3L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 25;
                    return 22;
                }
                return -1;
            case 26 :
                if ((active1 & 0x8000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x40380000000000L) != 0L
                        || (active4 & 0x3L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 26;
                    return 22;
                }
                return -1;
            case 27 :
                if ((active1 & 0x40000000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x380000000000L) != 0L
                        || (active4 & 0x3L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 27;
                    return 22;
                }
                return -1;
            case 28 :
                if ((active1 & 0x180000000000L) != 0L || (active4 & 0x1L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x200000000000L) != 0L
                        || (active4 & 0x2L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 28;
                    return 22;
                }
                return -1;
            case 29 :
                if ((active4 & 0x2L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x200000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 29;
                    return 22;
                }
                return -1;
            case 30 :
                if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x200000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 30;
                    return 22;
                }
                return -1;
            case 31 :
                if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x200000000000L) != 0L) {
                    return 22;
                }
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 31;
                    return 22;
                }
                return -1;
            case 32 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 32;
                    return 22;
                }
                return -1;
            case 33 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 33;
                    return 22;
                }
                return -1;
            case 34 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 34;
                    return 22;
                }
                return -1;
            case 35 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 35;
                    return 22;
                }
                return -1;
            case 36 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 36;
                    return 22;
                }
                return -1;
            case 37 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 37;
                    return 22;
                }
                return -1;
            case 38 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 38;
                    return 22;
                }
                return -1;
            case 39 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 39;
                    return 22;
                }
                return -1;
            case 40 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 40;
                    return 22;
                }
                return -1;
            case 41 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 41;
                    return 22;
                }
                return -1;
            case 42 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 42;
                    return 22;
                }
                return -1;
            case 43 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 43;
                    return 22;
                }
                return -1;
            case 44 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 44;
                    return 22;
                }
                return -1;
            case 45 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 45;
                    return 22;
                }
                return -1;
            case 46 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 46;
                    return 22;
                }
                return -1;
            case 47 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 47;
                    return 22;
                }
                return -1;
            case 48 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 299;
                    jjmatchedPos  = 48;
                    return 22;
                }
                return -1;
            default :
                return -1;
        }
    }

    /**
     * 
     * @param pos
     * @param active0
     * @param active1
     * @param active2
     * @param active3
     * @param active4
     * @return
     */
    private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
    }

    /**
     * 
     * @param pos
     * @param kind
     * @return
     */
    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos  = pos;
        return pos + 1;
    }

    /**
     * 
     * @return
     */
    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 32 :
                return jjStopAtPos(0, 297);
            case 40 :
                return jjStopAtPos(0, 295);
            case 41 :
                return jjStopAtPos(0, 296);
            case 97 :
                return jjMoveStringLiteralDfa1_0(0x0L, 0x300000100000000L, 0x0L, 0x0L, 0x0L);
            case 98 :
                return jjMoveStringLiteralDfa1_0(0x20000000L, 0xfc00000000000000L, 0x7L, 0x0L, 0x0L);
            case 99 :
                jjmatchedKind = 292;
                return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x1c8218L, 0x3ffff8L, 0x0L, 0x0L);
            case 100 :
                return jjMoveStringLiteralDfa1_0(0x100800000L, 0x600000000L, 0x1c00000L, 0x0L, 0x0L);
            case 101 :
                return jjMoveStringLiteralDfa1_0(0xc000000L, 0x78e0000180L, 0x7e000000L, 0x0L, 0x0L);
            case 102 :
                return jjMoveStringLiteralDfa1_0(0x181e000000000L, 0x0L, 0x1f80000000L, 0x0L, 0x0L);
            case 103 :
                return jjMoveStringLiteralDfa1_0(0x180000000400L, 0x0L, 0x7fe000000000L, 0x0L, 0x0L);
            case 104 :
                return jjMoveStringLiteralDfa1_0(0x8000000204000L, 0x0L, 0x3800000000000L, 0x0L, 0x0L);
            case 105 :
                return jjMoveStringLiteralDfa1_0(0x700000000000000L, 0x8002200000L, 0x0L, 0x0L, 0x0L);
            case 107 :
                return jjMoveStringLiteralDfa1_0(0x1e00400000L, 0x70018000000L, 0x7ffc000000000000L, 0x0L, 0x0L);
            case 108 :
                return jjMoveStringLiteralDfa1_0(0x8000L, 0x400L, 0x8000000000000000L, 0x3L, 0x0L);
            case 109 :
                return jjMoveStringLiteralDfa1_0(0x0L, 0x20004L, 0x0L, 0x1fffcL, 0x0L);
            case 110 :
                return jjMoveStringLiteralDfa1_0(0x3800000000060000L, 0x380000016000L, 0x0L, 0x60000L, 0x0L);
            case 111 :
                return jjMoveStringLiteralDfa1_0(0x6000000000000L, 0x0L, 0x0L, 0x780000L, 0x0L);
            case 112 :
                return jjMoveStringLiteralDfa1_0(0x80000000L, 0x1fc00005400000L, 0x0L, 0x3fffff800000L, 0x0L);
            case 113 :
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xc00000000000L, 0x0L);
            case 114 :
                jjmatchedKind = 294;
                return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x20000000000040L, 0x0L, 0x3f000000000000L, 0x0L);
            case 115 :
                return jjMoveStringLiteralDfa1_0(0x2181000L, 0xc0000000800022L, 0x0L, 0xffc0000000000000L, 0x7ffL);
            case 116 :
                jjmatchedKind = 293;
                return jjMoveStringLiteralDfa1_0(0xf0000051000000L, 0x1801L, 0x0L, 0x0L, 0x3fff800L);
            case 117 :
                return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L, 0x0L, 0x0L, 0x4000000L);
            case 118 :
                return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L, 0x0L, 0x0L, 0x38000000L);
            case 119 :
                return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L, 0x0L, 0x0L, 0xfc0000000L);
            default :
                return jjMoveNfa_0(0, 0);
        }
    }

    /**
     * 
     * @param active0
     * @param active1
     * @param active2
     * @param active3
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4);
            return 1;
        }
        switch (curChar) {
            case 97 :
                return jjMoveStringLiteralDfa2_0(active0, 0x8000002820000L, active1, 0xfc20000600168182L, active2,
                                                 0x80001fe000c0007fL, active3, 0x1c00000000007fcL, active4, 0x1f800L);
            case 100 :
                if ((active1 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 85, 22);
                }
                break;
            case 101 :
                return jjMoveStringLiteralDfa2_0(active0, 0x4010000020201000L, active1, 0x380000001840L, active2,
                                                 0x7ff800000000000L, active3, 0x1e3f0007ff800000L, active4, 0xbfe0000L);
            case 102 :
                return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000L, active1, 0x18c0000000L, active2,
                                                 0x3e000000L, active3, 0x180000L, active4, 0L);
            case 104 :
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80218L, active2, 0L, active3, 0L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa2_0(active0, 0xe0001e40416000L, active1, 0x70018000000L, active2,
                                                 0x7800000000000000L, active3, 0x600000000001f800L, active4,
                                                 0xff0000000L);
            case 107 :
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80L, active3, 0L, active4, 0L);
            case 108 :
                return jjMoveStringLiteralDfa2_0(active0, 0x700000080000000L, active1, 0xfc00105400000L, active2,
                                                 0x1ff00L, active3, 0x8000007800600000L, active4, 0x3L);
            case 110 :
                return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x8002000000L, active2, 0L,
                                                 active3, 0L, active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa2_0(active0, 0x38019e0000048400L, active1, 0x16405L, active2,
                                                 0x6000803e0000L, active3, 0x38000000003L, active4, 0L);
            case 112 :
                return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L, active2, 0L, active3, 0L, active4,
                                                 0L);
            case 114 :
                return jjMoveStringLiteralDfa2_0(active0, 0x1e100000000L, active1, 0L, active2, 0x701000000L, active3,
                                                 0x3c0000060000L, active4, 0L);
            case 115 :
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4,
                                                 0x4000000L);
            case 116 :
                return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x50000000800020L, active2, 0L, active3,
                                                 0L, active4, 0x7cL);
            case 117 :
                return jjMoveStringLiteralDfa2_0(active0, 0x11000000L, active1, 0x380000000000000L, active2,
                                                 0x1800000000L, active3, 0xc00000000000L, active4, 0L);
            case 120 :
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6020000000L, active2, 0x40000000L, active3,
                                                 0L, active4, 0L);
            case 121 :
                return jjMoveStringLiteralDfa2_0(active0, 0xc000000L, active1, 0L, active2, 0L, active3, 0L, active4,
                                                 0x780L);
            default :
                break;
        }
        return jjStartNfa_0(0, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(0, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4);
            return 2;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa3_0(active0, 0x3800000000000000L, active1, 0x10000000016000L, active2, 0L,
                                                 active3, 0x60000L, active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa3_0(active0, 0x10180080280400L, active1, 0x4fc00005c81a28L, active2,
                                                 0x3e000000fff00L, active3, 0xcc7800000000L, active4, 0xe003cL);
            case 98 :
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa3_0(active0, 0x4000001e00400000L, active1, 0xc00070018000040L, active2,
                                                 0x7800000000000000L, active3, 0x3f000000200000L, active4, 0x1f800L);
            case 100 :
                return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x100000000000000L, active2, 0L, active3,
                                                 0x2000000000400000L, active4, 0L);
            case 101 :
                return jjMoveStringLiteralDfa3_0(active0, 0x1e00c102000L, active1, 0x8002000010L, active2,
                                                 0x7fc000700000000L, active3, 0L, active4, 0x4000000L);
            case 102 :
                return jjMoveStringLiteralDfa3_0(active0, 0x6000020000000L, active1, 0x18c0000000L, active2,
                                                 0x3e000000L, active3, 0x180000L, active4, 0L);
            case 103 :
                return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L, active2, 0L, active3, 0x3L, active4,
                                                 0L);
            case 105 :
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L, active2, 0x80L, active3, 0x18000000000L,
                                                 active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            case 108 :
                return jjMoveStringLiteralDfa3_0(active0, 0x708000000001000L, active1, 0xf000000100000000L, active2,
                                                 0x1800000007L, active3, 0L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa3_0(active0, 0xe0000040000000L, active1, 0L, active2, 0x1fe000000000L,
                                                 active3, 0x4000000000000000L, active4, 0L);
            case 110 :
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000048000L, active2, 0x8000000000300000L,
                                                 active3, 0x1e000007ff81f800L, active4, 0xfc0000780L);
            case 111 :
                return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0x401L, active2, 0x1000000L, active3,
                                                 0x8000300000000000L, active4, 0x43L);
            case 114 :
                return jjMoveStringLiteralDfa3_0(active0, 0x60011060000L, active1, 0x180L, active2, 0x80000000L,
                                                 active3, 0x20000000000L, active4, 0x8000000L);
            case 115 :
                return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0x600000000L, active2, 0xc00000L,
                                                 active3, 0L, active4, 0x30000000L);
            case 116 :
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200006020100000L, active2, 0x40000078L,
                                                 active3, 0L, active4, 0L);
            case 117 :
                return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0L);
            case 119 :
                if ((active0 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 15, 22);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x380000000000L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            case 120 :
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0x7fcL, active4,
                                                 0x3f00000L);
            case 121 :
                if ((active0 & 0x2000000L) != 0L) {
                    jjmatchedKind = 25;
                    jjmatchedPos  = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1c0000000000000L,
                                                 active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(1, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(1, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4);
            return 3;
        }
        switch (curChar) {
            case 32 :
                return jjMoveStringLiteralDfa4_0(active0, 0xc000000L, active1, 0x180L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            case 95 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x380000020001L, active2, 0L, active3,
                                                 0x1c00003ffc0187fL, active4, 0x4000000L);
            case 97 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4,
                                                 0L);
            case 98 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L, active4,
                                                 0x8000000L);
            case 99 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100010L, active2, 0xe00f8L, active3, 0L,
                                                 active4, 0x780L);
            case 100 :
                return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x20000000000002L, active2,
                                                 0x8000000000000000L, active3, 0xe00000000000000L, active4,
                                                 0xfc0000000L);
            case 101 :
                if ((active0 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 16, 22);
                } else if ((active1 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(3, 66, 22);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x7e001e040100000L, active1, 0L, active2, 0x1fe700000000L,
                                                 active3, 0x2000000000020000L, active4, 0L);
            case 102 :
                if ((active0 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 12, 22);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3,
                                                 0x100000000000L, active4, 0L);
            case 104 :
                if ((active0 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 14, 22);
                } else if ((active0 & 0x800000L) != 0L) {
                    jjmatchedKind = 23;
                    jjmatchedPos  = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x600000000L, active2, 0xc00000L, active3, 0L,
                                                 active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L,
                                                 active4, 0x30000000L);
            case 107 :
                if ((active0 & 0x400000L) != 0L) {
                    jjmatchedKind = 22;
                    jjmatchedPos  = 3;
                } else if ((active1 & 0x400L) != 0L) {
                    return jjStartNfaWithStates_0(3, 74, 22);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x1e00000000L, active1, 0xc00070018000000L, active2,
                                                 0x7800000000000000L, active3, 0L, active4, 0x1f800L);
            case 108 :
                return jjMoveStringLiteralDfa4_0(active0, 0x1980000000400L, active1, 0xf000000000000000L, active2,
                                                 0x601800000007L, active3, 0L, active4, 0L);
            case 109 :
                if ((active0 & 0x10000000000000L) != 0L) {
                    jjmatchedKind = 52;
                    jjmatchedPos  = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x38000000000c0000L, active1, 0x50000000801800L, active2, 0L,
                                                 active3, 0x2080L, active4, 0xe000cL);
            case 110 :
                if ((active0 & 0x1000000L) != 0L) {
                    jjmatchedKind = 24;
                    jjmatchedPos  = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x8000060010000000L, active1, 0xc8208L, active2, 0x11ff00L,
                                                 active3, 0xcd800004c300L, active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa4_0(active0, 0x4000000020000000L, active1, 0x2000019c0000040L, active2,
                                                 0x3e000000L, active3, 0x1f000000200000L, active4, 0L);
            case 112 :
                return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L, active2, 0x7fc000001000000L,
                                                 active3, 0x200000010400L, active4, 0x40L);
            case 114 :
                return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0xe022000020L, active2, 0x3800040000000L,
                                                 active3, 0L, active4, 0x30L);
            case 115 :
                return jjMoveStringLiteralDfa4_0(active0, 0x6000000000000L, active1, 0x80000000014000L, active2, 0L,
                                                 active3, 0x1000000000180000L, active4, 0L);
            case 116 :
                if ((active3 & 0x20000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 233, 22);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L, active2, 0x200000L, active3, 0L,
                                                 active4, 0x3f00000L);
            case 117 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000000L,
                                                 active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000000L,
                                                 active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L, active2, 0L, active3,
                                                 0x8000000000000000L, active4, 0x3L);
            case 121 :
                return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0xfc00005400000L, active2, 0L, active3,
                                                 0x7800000000L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(2, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(2, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4);
            return 4;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa5_0(active0, 0xe999ffd0202000L, active1, 0xfe80010610001802L, active2,
                                                 0x7803bfe101c00007L, active3, 0xae20000000000000L, active4,
                                                 0xfc3fe0000L);
            case 97 :
                return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0x10066028000000L, active2,
                                                 0x7fc000040000000L, active3, 0xa00000L, active4, 0L);
            case 98 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000004L, active4,
                                                 0x30000000L);
            case 99 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc0000002400000L,
                                                 active4, 0L);
            case 100 :
                if ((active0 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 20, 22);
                }
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x180000000000L, active2, 0L, active3,
                                                 0xc0004001819L, active4, 0L);
            case 101 :
                return jjMoveStringLiteralDfa5_0(active0, 0x60000000000L, active1, 0xfc00005402000L, active2,
                                                 0x100000L, active3, 0x100020780000c300L, active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x600000000L, active3, 0L, active4,
                                                 0L);
            case 103 :
                return jjMoveStringLiteralDfa5_0(active0, 0x700000000000000L, active1, 0x80208L, active2, 0x1ff00L,
                                                 active3, 0x20L, active4, 0L);
            case 104 :
                if ((active1 & 0x100000L) != 0L) {
                    jjmatchedKind = 84;
                    jjmatchedPos  = 4;
                } else if ((active2 & 0x20000L) != 0L) {
                    jjmatchedKind = 145;
                    jjmatchedPos  = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xc0078L, active3, 0L, active4,
                                                 0x780L);
            case 105 :
                return jjMoveStringLiteralDfa5_0(active0, 0x6000000080400L, active1, 0x40000000800000L, active2,
                                                 0x400080000000L, active3, 0x100000180000L, active4, 0xcL);
            case 107 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L, active2, 0x80L, active3, 0L, active4, 0L);
            case 108 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000400000000L,
                                                 active4, 0x1f800L);
            case 109 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active2, 0x8000000000000000L, active3,
                                                 0x100000018000000L, active4, 0L);
            case 110 :
                return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3,
                                                 0x20000000L, active4, 0x3L);
            case 111 :
                return jjMoveStringLiteralDfa5_0(active0, 0xb80000000c020000L, active1, 0x120000000068180L, active2,
                                                 0L, active3, 0x52480L, active4, 0xc000000L);
            case 112 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L);
            case 114 :
                return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x18c0000000L, active2, 0x3e200000L,
                                                 active3, 0x10000c0000000L, active4, 0L);
            case 115 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L, active2, 0x1800000000L,
                                                 active3, 0x100000000L, active4, 0L);
            case 116 :
                if ((active1 & 0x20L) != 0L) {
                    jjmatchedKind = 69;
                    jjmatchedPos  = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8002000000L, active2, 0L, active3,
                                                 0xc18200000042L, active4, 0x30L);
            case 117 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x14000L, active2, 0L, active3, 0L, active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0x1e000000000000L,
                                                 active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L, active4,
                                                 0L);
            case 120 :
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(3, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(3, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4);
            return 5;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100006120000010L, active2, 0x400dff98L,
                                                 active3, 0x10000d8000000000L, active4, 0x7b0L);
            case 97 :
                return jjMoveStringLiteralDfa6_0(active0, 0x700000000200000L, active1, 0x1000180000002001L, active2,
                                                 0x8000000000400060L, active3, 0x400000025800185dL, active4,
                                                 0x40020000L);
            case 98 :
                return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0x60008010000L, active2, 0x1000000L,
                                                 active3, 0L, active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L, active2, 0x100000L, active3,
                                                 0x20000000020c300L, active4, 0L);
            case 100 :
                return jjMoveStringLiteralDfa6_0(active0, 0x6000000000000L, active1, 0x2400000000000000L, active2,
                                                 0x800080000000L, active3, 0xa001000000180000L, active4, 0x80000000L);
            case 101 :
                if ((active0 & 0x400L) != 0L) {
                    jjmatchedKind = 10;
                    jjmatchedPos  = 5;
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x80000020000000L, active1, 0x80248L, active2,
                                                 0x400000000000L, active3, 0x1e000181000000L, active4, 0x1f843L);
            case 102 :
                return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0x20100L, active2, 0L, active3, 0L,
                                                 active4, 0x104000000L);
            case 103 :
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa6_0(active0, 0x1800000000L, active1, 0x8002000000L, active2,
                                                 0x1000000000000L, active3, 0xc00004000002L, active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa6_0(active0, 0x19e000000000L, active1, 0L, active2, 0x100000000L, active3,
                                                 0L, active4, 0L);
            case 108 :
                if ((active0 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 18, 22);
                } else if ((active0 & 0x1000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 48, 22);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xfe000000000L, active3,
                                                 0x100000800000L, active4, 0x33f40000L);
            case 109 :
                return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0x2a0000000000000L, active2,
                                                 0x2000000000000L, active3, 0x2080L, active4, 0L);
            case 110 :
                if ((active0 & 0x4000000L) != 0L) {
                    return jjStopAtPos(5, 26);
                } else if ((active1 & 0x80L) != 0L) {
                    return jjStopAtPos(5, 71);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x4000000010080000L, active1, 0x40000000800800L, active2, 0L,
                                                 active3, 0L, active4, 0x20000000cL);
            case 111 :
                return jjMoveStringLiteralDfa6_0(active0, 0x6c0000000L, active1, 0L, active2, 0x800100600200000L,
                                                 active3, 0xc0000002400020L, active4, 0L);
            case 112 :
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000600000000L, active2,
                                                 0x1000000000800000L, active3, 0L, active4, 0L);
            case 114 :
                if ((active0 & 0x800000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 47, 22);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x3800060000000000L, active1, 0x400fc10015400000L, active2,
                                                 0x6000000000000000L, active3, 0x207820040000L, active4, 0xc00080000L);
            case 115 :
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x3L, active3,
                                                 0x520000000000000L, active4, 0x8000000L);
            case 116 :
                return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x2018c0048002L, active2,
                                                 0x183e000000L, active3, 0x400020000L, active4, 0L);
            case 117 :
                return jjMoveStringLiteralDfa6_0(active0, 0x60000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000000L,
                                                 active4, 0L);
            case 119 :
                if ((active0 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 17, 22);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L, active2,
                                                 0x7fc200000000004L, active3, 0x10400L, active4, 0L);
            case 120 :
                if ((active1 & 0x10000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 116, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(4, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(4, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4);
            return 6;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa7_0(active0, 0x60020000000L, active1, 0x2fc018c54e8208L, active2,
                                                 0x4000be000000L, active3, 0x1207820000000L, active4, 0xdf800L);
            case 97 :
                if ((active0 & 0x80000L) != 0L) {
                    jjmatchedKind = 19;
                    jjmatchedPos  = 6;
                }
                return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x4cc0218012800800L, active2,
                                                 0x67fe001801000100L, active3, 0x20c0000082400020L, active4,
                                                 0xc0000000cL);
            case 98 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L, active2, 0x68L, active3,
                                                 0x1000000000000000L, active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1100000000000000L, active2, 0L, active3,
                                                 0x44L, active4, 0x20000L);
            case 100 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x600L, active3, 0L, active4,
                                                 0x40L);
            case 101 :
                if ((active3 & 0x100000000000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 236, 22);
                } else if ((active4 & 0x8000000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 283, 22);
                }
                return jjMoveStringLiteralDfa7_0(active0, 0x7806000010000000L, active1, 0x2000000000000000L, active2,
                                                 0x800000000004L, active3, 0x192480L, active4, 0x30000000L);
            case 102 :
                if ((active0 & 0x8000000L) != 0L) {
                    return jjStopAtPos(6, 27);
                } else if ((active1 & 0x100L) != 0L) {
                    return jjStopAtPos(6, 72);
                }
                return jjMoveStringLiteralDfa7_0(active0, 0x600000000L, active1, 0L, active2, 0x800000000000000L,
                                                 active3, 0xc0001000000L, active4, 0x4000000L);
            case 103 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L,
                                                 active4, 0x30L);
            case 104 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000L, active2, 0x40000000L, active3,
                                                 0x200000L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa7_0(active0, 0x819e000000000L, active1, 0x8000000000000000L, active2,
                                                 0x200100000800L, active3, 0x800000000000000L, active4, 0x80000000L);
            case 107 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000c300L, active4,
                                                 0L);
            case 108 :
                return jjMoveStringLiteralDfa7_0(active0, 0x700000000000000L, active1, 0x60008000000L, active2,
                                                 0x200000L, active3, 0x800000L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100002000L, active2, 0x7080L, active3,
                                                 0x40002L, active4, 0x180L);
            case 110 :
                if ((active0 & 0x80000000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 31, 22);
                }
                return jjMoveStringLiteralDfa7_0(active0, 0x8000001800200000L, active1, 0x1L, active2,
                                                 0x1000000400000L, active3, 0x40000000L, active4, 0x40000000L);
            case 111 :
                return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0x200000600000002L, active2,
                                                 0x10000fe000800000L, active3, 0x8200000000000000L, active4,
                                                 0x303f00200L);
            case 112 :
                if ((active0 & 0x20000000000000L) != 0L) {
                    jjmatchedKind = 53;
                    jjmatchedPos  = 6;
                }
                return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L, active2, 0x40011L, active3,
                                                 0L, active4, 0L);
            case 114 :
                if ((active1 & 0x40L) != 0L) {
                    jjmatchedKind = 70;
                    jjmatchedPos  = 6;
                }
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L, active2, 0x8000000600008000L, active3,
                                                 0x1e000000020000L, active4, 0L);
            case 115 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x186020010000L, active2, 0L, active3,
                                                 0x4001818L, active4, 0x403L);
            case 116 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x100002L, active3,
                                                 0x4420018100000001L, active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L, active2, 0x100000000000L, active3,
                                                 0L, active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x90000L, active3, 0L, active4, 0L);
            case 120 :
                return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3,
                                                 0x18000000L, active4, 0L);
            case 121 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4,
                                                 0L);
            case 122 :
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc00000000000L,
                                                 active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(5, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(5, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4);
            return 7;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa8_0(active0, 0xbf46001800000000L, active1, 0x40008002816000L, active2,
                                                 0x380000L, active3, 0x91e000418380000L, active4, 0x3000004cL);
            case 97 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1010L, active2, 0x40000088L, active3,
                                                 0xc0800064100L, active4, 0L);
            case 98 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800L);
            case 99 :
                if ((active2 & 0x1000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 176, 22);
                }
                return jjMoveStringLiteralDfa8_0(active0, 0x400019e010000000L, active1, 0x3000000000040000L, active2,
                                                 0x800100000000L, active3, 0xc0000002400000L, active4, 0x1000L);
            case 100 :
                return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0x200c00001000000L, active2,
                                                 0x200006000100L, active3, 0xc0000000L, active4, 0x2000L);
            case 101 :
                return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0x60008000000L, active2,
                                                 0x100000007601L, active3, 0x420c00200000003L, active4, 0x4400L);
            case 102 :
                return jjMoveStringLiteralDfa8_0(active0, 0x600000000L, active1, 0L, active2, 0x800000000000000L,
                                                 active3, 0L, active4, 0x200L);
            case 103 :
                if ((active4 & 0x40000000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 286, 22);
                }
                return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L, active2, 0xfe000400000L, active3,
                                                 0x200000000000L, active4, 0x3f00000L);
            case 104 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x180000000000L, active2, 0L, active3, 0x1818L,
                                                 active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x38010004L, active3, 0L, active4,
                                                 0x80L);
            case 107 :
                return jjMoveStringLiteralDfa8_0(active0, 0x60020000000L, active1, 0L, active2, 0x8000000080000000L,
                                                 active3, 0x20000044L, active4, 0L);
            case 108 :
                return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0L, active2, 0x1000060L, active3,
                                                 0x20L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0x2018c0000808L, active2,
                                                 0x400600000000L, active3, 0x201000000008200L, active4, 0L);
            case 110 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000010010000000L, active2,
                                                 0x6000000000000800L, active3, 0x2080L, active4, 0xe00000000L);
            case 111 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L, active2, 0x40000L, active3,
                                                 0x5000018001800000L, active4, 0x130L);
            case 112 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4,
                                                 0x8000L);
            case 114 :
                if ((active3 & 0x400L) != 0L) {
                    return jjStartNfaWithStates_0(7, 202, 22);
                } else if ((active3 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 208, 22);
                } else if ((active4 & 0x80000000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 287, 22);
                }
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0x1000000000L,
                                                 active4, 0x100000000L);
            case 115 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc27000004408000L, active2, 0L, active3,
                                                 0x2000002000000000L, active4, 0x40c0003L);
            case 116 :
                return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0x8006020020000L, active2,
                                                 0x1800000000L, active3, 0x4000000L, active4, 0x20000L);
            case 117 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000100000000L, active2, 0x8002L, active3,
                                                 0x100000000L, active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x600000000L, active2, 0x1000000000800000L,
                                                 active3, 0x8000004000000000L, active4, 0x10000L);
            case 120 :
                if ((active1 & 0x80000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 119, 22);
                } else if ((active2 & 0x2000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 177, 22);
                }
                break;
            case 121 :
                if ((active2 & 0x4000000000000L) != 0L) {
                    jjmatchedKind = 178;
                    jjmatchedPos  = 7;
                }
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L, active2, 0x7f8000000000000L, active3, 0L,
                                                 active4, 0L);
            case 122 :
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L,
                                                 active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(6, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(6, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4);
            return 8;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa9_0(active0, 0x600000000L, active1, 0x1e0008000003L, active2,
                                                 0x8ff807e600000000L, active3, 0xc1800402183dL, active4, 0x1f00003L);
            case 97 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000006860000000L, active2, 0xc00000000000L,
                                                 active3, 0x1000080000L, active4, 0x10000830L);
            case 98 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L);
            case 99 :
                return jjMoveStringLiteralDfa9_0(active0, 0x8200000000000000L, active1, 0L, active2, 0x2L, active3,
                                                 0xc0800000000L, active4, 0x100000084L);
            case 100 :
                if ((active1 & 0x10000000L) != 0L) {
                    jjmatchedKind = 92;
                    jjmatchedPos  = 8;
                } else if ((active1 & 0x4000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 126, 22);
                } else if ((active4 & 0x400000000L) != 0L) {
                    jjmatchedKind = 290;
                    jjmatchedPos  = 8;
                }
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L, active2, 0x6000000000000000L,
                                                 active3, 0x1006000000000000L, active4, 0x820000100L);
            case 101 :
                if ((active0 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 13, 22);
                } else if ((active0 & 0x8000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 51, 22);
                } else if ((active1 & 0x200000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 121, 22);
                } else if ((active1 & 0x8000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 127, 22);
                } else if ((active4 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 289, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0x1020c00601000800L, active2,
                                                 0x1000001806800061L, active3, 0x1004008000000L, active4, 0x400L);
            case 102 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000L, active2, 0xa00L, active3, 0L, active4,
                                                 0x200L);
            case 103 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x80000000004L, active3,
                                                 0x10000000L, active4, 0x2000000L);
            case 104 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000060000L, active2, 0L, active3,
                                                 0x20c0000002400000L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa9_0(active0, 0x60020000000L, active1, 0x41201084880000L, active2,
                                                 0x80000000L, active3, 0x8000020000000L, active4, 0x4012000L);
            case 107 :
                if ((active0 & 0x10000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 28, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0x19e000000000L, active1, 0L, active2, 0x100000000L, active3,
                                                 0x100000L, active4, 0L);
            case 108 :
                if ((active0 & 0x100000000L) != 0L) {
                    jjmatchedKind = 32;
                    jjmatchedPos  = 8;
                } else if ((active0 & 0x800000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 35, 22);
                } else if ((active0 & 0x4000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 50, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0x100010210L, active2, 0x41408400L,
                                                 active3, 0x40040L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0x8002000000L, active2, 0L,
                                                 active3, 0x210000000000000L, active4, 0x8L);
            case 110 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x38010008L, active3,
                                                 0x8000000200004100L, active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0x8L, active2, 0x10L, active3,
                                                 0x200040008200L, active4, 0x8000L);
            case 112 :
                if ((active3 & 0x20000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 245, 22);
                } else if ((active3 & 0x400000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 250, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0x6000000405000L, active2, 0L,
                                                 active3, 0x2100200000L, active4, 0L);
            case 114 :
                if ((active0 & 0x40000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 30, 22);
                } else if ((active0 & 0x1000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 36, 22);
                } else if ((active0 & 0x2000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 49, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000002c0080L, active3,
                                                 0x4000000001000000L, active4, 0L);
            case 115 :
                if ((active3 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(8, 193, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000000000L, active2, 0x3000L, active3,
                                                 0x900000400000000L, active4, 0L);
            case 116 :
                if ((active0 & 0x4000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 62, 22);
                } else if ((active3 & 0x80L) != 0L) {
                    return jjStartNfaWithStates_0(8, 199, 22);
                } else if ((active3 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 205, 22);
                }
                return jjMoveStringLiteralDfa9_0(active0, 0x1800000000000000L, active1, 0x100000000000000L, active2,
                                                 0x200000004000L, active3, 0L, active4, 0xc0000L);
            case 117 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0L, active4,
                                                 0x20000L);
            case 118 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x100L, active3, 0L, active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L, active2, 0x100000L, active3,
                                                 0x800000L, active4, 0L);
            case 120 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000L);
            case 121 :
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3,
                                                 0x80000000L, active4, 0x1000L);
            default :
                break;
        }
        return jjStartNfa_0(7, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(7, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4);
            return 9;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa10_0(active0, 0x19e000000000L, active1, 0x500010000000000L, active2,
                                                  0x6000101901010468L, active3, 0xe0c0000382c40000L, active4, 0x400L);
            case 97 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x60200L, active2, 0x304000L, active3,
                                                  0x200000000808L, active4, 0xe004cL);
            case 98 :
                return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0x8000L, active2, 0x10L,
                                                  active3, 0x8000000000L, active4, 0L);
            case 99 :
                if ((active2 & 0x2000000L) != 0L) {
                    jjmatchedKind = 153;
                    jjmatchedPos  = 9;
                } else if ((active2 & 0x8000000L) != 0L) {
                    jjmatchedKind = 155;
                    jjmatchedPos  = 9;
                }
                return jjMoveStringLiteralDfa10_0(active0, 0x60020000000L, active1, 0xc00001000000L, active2,
                                                  0x2094000000L, active3, 0x820080000L, active4, 0x101800L);
            case 100 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L, active2, 0xc000000001L, active3,
                                                  0x10000000000L, active4, 0x4610000L);
            case 101 :
                if ((active0 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 21, 22);
                } else if ((active4 & 0x100L) != 0L) {
                    return jjStartNfaWithStates_0(9, 264, 22);
                } else if ((active4 & 0x100000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 288, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0x1800000000000000L, active1, 0x826000000490000L, active2,
                                                  0x488000L, active3, 0x6002001000040L, active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x8000030040000000L, active3,
                                                  0x1L, active4, 0x1800000L);
            case 103 :
                if ((active3 & 0x100L) != 0L) {
                    return jjStartNfaWithStates_0(9, 200, 22);
                } else if ((active3 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 206, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x80L, active3, 0L, active4, 0L);
            case 104 :
                if ((active2 & 0x200000000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 173, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000L, active2, 0x4L, active3, 0x400020000L,
                                                  active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0L, active2, 0x80020000300L,
                                                  active3, 0x110004000100000L, active4, 0x22000000L);
            case 107 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0x20L, active4, 0L);
            case 108 :
                if ((active0 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 33, 22);
                } else if ((active1 & 0x10L) != 0L) {
                    return jjStartNfaWithStates_0(9, 68, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active1, 0x1000000000004000L, active2,
                                                  0x1f8000000000000L, active3, 0L, active4, 0x30L);
            case 109 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x66028000003L, active2, 0L, active3,
                                                  0x40008200L, active4, 0L);
            case 110 :
                if ((active1 & 0x80000000L) != 0L) {
                    jjmatchedKind = 95;
                    jjmatchedPos  = 9;
                }
                return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0x40201000800000L, active2, 0L,
                                                  active3, 0x8001000000000L, active4, 0x10000000L);
            case 111 :
                return jjMoveStringLiteralDfa10_0(active0, 0x8300000000000000L, active1, 0x8002002000L, active2,
                                                  0x800L, active3, 0x10200000L, active4, 0x800000003L);
            case 112 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8180000000000L, active2, 0L, active3,
                                                  0x1010L, active4, 0x4000L);
            case 114 :
                if ((active0 & 0x400000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 34, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x600000000L, active2, 0x1000000000800000L,
                                                  active3, 0L, active4, 0x80L);
            case 115 :
                if ((active1 & 0x800L) != 0L) {
                    return jjStartNfaWithStates_0(9, 75, 22);
                } else if ((active3 & 0x200000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 249, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x200000200003000L, active3,
                                                  0x1c00000000000L, active4, 0x2200L);
            case 116 :
                if ((active2 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 146, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3,
                                                  0x8000c0000000004L, active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0L,
                                                  active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0xc00000400000000L, active3, 0L,
                                                  active4, 0x8000L);
            case 120 :
                if ((active1 & 0x40000000L) != 0L) {
                    jjmatchedKind = 94;
                    jjmatchedPos  = 9;
                } else if ((active3 & 0x4000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 218, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000L, active2, 0x400000000000L,
                                                  active3, 0x8000000L, active4, 0L);
            case 121 :
                if ((active1 & 0x2000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 125, 22);
                } else if ((active2 & 0x800000000000L) != 0L) {
                    return jjStartNfaWithStates_0(9, 175, 22);
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000000L,
                                                  active4, 0L);
            case 122 :
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000004000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(8, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(8, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4);
            return 10;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000001f00008000L, active2,
                                                  0x1000400054c0f803L, active3, 0x1000000041000040L, active4, 0x30L);
            case 97 :
                return jjMoveStringLiteralDfa11_0(active0, 0x3800000000000000L, active1, 0xe60009004002L, active2,
                                                  0x800004400000070L, active3, 0x8010020004L, active4, 0x200000L);
            case 99 :
                if ((active3 & 0x2000000000000L) != 0L) {
                    jjmatchedKind = 241;
                    jjmatchedPos  = 10;
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000800000L, active2, 0x108L, active3,
                                                  0x44000000100000L, active4, 0L);
            case 100 :
                if ((active1 & 0x20000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 117, 22);
                } else if ((active3 & 0x1000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 228, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0x180000000000000L, active1, 0x100010000000000L, active2,
                                                  0x200000L, active3, 0L, active4, 0L);
            case 101 :
                if ((active1 & 0x8L) != 0L) {
                    return jjStartNfaWithStates_0(10, 67, 22);
                } else if ((active1 & 0x4000000L) != 0L) {
                    jjmatchedKind = 90;
                    jjmatchedPos  = 10;
                } else if ((active4 & 0x4000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 282, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xf000000400000L, active2, 0x8040200000000L,
                                                  active3, 0x800002800008200L, active4, 0x8200L);
            case 102 :
                return jjMoveStringLiteralDfa11_0(active0, 0x18000000000L, active1, 0x10000L, active2,
                                                  0x6000000100080000L, active3, 0x8000000000000000L, active4, 0L);
            case 103 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L,
                                                  active4, 0x10000000L);
            case 104 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x440000L, active4,
                                                  0L);
            case 105 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x6020001000L, active2, 0x8400038000100080L,
                                                  active3, 0x8000000000020L, active4, 0x1c00000L);
            case 106 :
                return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa11_0(active0, 0x60020000000L, active1, 0L, active2, 0x80000000L, active3,
                                                  0x20000000L, active4, 0x800L);
            case 108 :
                if ((active0 & 0x4000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 38, 22);
                } else if ((active0 & 0x100000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 44, 22);
                } else if ((active2 & 0x800000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 163, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000L,
                                                  active4, 0x1040L);
            case 109 :
                if ((active4 & 0x800000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 291, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0x8200000000000000L, active1, 0x8002000000L, active2, 0L,
                                                  active3, 0x80000002800000L, active4, 0L);
            case 110 :
                if ((active3 & 0x10000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 244, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000L, active2, 0x80000000200L, active3,
                                                  0x808L, active4, 0x2000003L);
            case 111 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x180000000001L, active2, 0x1f0002000000000L,
                                                  active3, 0xc0400001011L, active4, 0x104480L);
            case 112 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4L);
            case 114 :
                if ((active0 & 0x2000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 37, 22);
                } else if ((active0 & 0x80000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 43, 22);
                } else if ((active2 & 0x1000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 164, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3,
                                                  0x2000000000200000L, active4, 0xc0000L);
            case 115 :
                if ((active1 & 0x800000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 123, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x10000L, active3,
                                                  0x4001000000000000L, active4, 0x20000000L);
            case 116 :
                if ((active2 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(10, 130, 22);
                } else if ((active2 & 0x20000000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 157, 22);
                } else if ((active4 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 269, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0x20000L, active2,
                                                  0x200000001000000L, active3, 0xc00008080000L, active4, 0x30000L);
            case 117 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0x10000000000L,
                                                  active4, 0L);
            case 119 :
                if ((active1 & 0x80000L) != 0L) {
                    return jjStartNfaWithStates_0(10, 83, 22);
                }
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x100000000400L, active3,
                                                  0x380000000L, active4, 0L);
            case 120 :
                if ((active4 & 0x8L) != 0L) {
                    return jjStartNfaWithStates_0(10, 259, 22);
                }
                break;
            case 121 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L);
            case 122 :
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L,
                                                  active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(9, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(9, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4);
            return 11;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa12_0(active0, 0x60020000000L, active1, 0x41200000820000L, active2,
                                                  0x80000000L, active3, 0x4200000000000L, active4, 0x883L);
            case 97 :
                return jjMoveStringLiteralDfa12_0(active0, 0x18000000000L, active1, 0x400000000000000L, active2,
                                                  0x6200100100000002L, active3, 0xa001000380040000L, active4, 0x4L);
            case 98 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L, active4, 0L);
            case 99 :
                if ((active1 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 76, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x24L, active4, 0L);
            case 100 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x6001900400000L, active2, 0x400000000001000L,
                                                  active3, 0x2000000000L, active4, 0L);
            case 101 :
                if ((active0 & 0x100000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 56, 22);
                } else if ((active3 & 0x100000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 248, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0x480000000000000L, active1, 0x18002000200L, active2,
                                                  0x80300L, active3, 0xc00000400000L, active4, 0x1000L);
            case 102 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400L);
            case 103 :
                if ((active2 & 0x80000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 171, 22);
                } else if ((active4 & 0x2000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 281, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000L, active2, 0x1f0000000000000L, active3,
                                                  0x808L, active4, 0L);
            case 104 :
                if ((active4 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 272, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3,
                                                  0x4000000000L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000000000000L, active2,
                                                  0x800000401210400L, active3, 0x80000L, active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4,
                                                  0L);
            case 108 :
                if ((active4 & 0x10L) != 0L) {
                    return jjStartNfaWithStates_0(11, 260, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3,
                                                  0x810020000L, active4, 0x10000040L);
            case 109 :
                return jjMoveStringLiteralDfa12_0(active0, 0x9a00000000000000L, active1, 0x1000000000000000L, active2,
                                                  0x402000000001L, active3, 0L, active4, 0x100000L);
            case 110 :
                if ((active2 & 0x80L) != 0L) {
                    return jjStartNfaWithStates_0(11, 135, 22);
                } else if ((active3 & 0x8000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 231, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x6020002002L, active2, 0x8000200000000L,
                                                  active3, 0x40000000008200L, active4, 0x4000L);
            case 111 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x402000000L,
                                                  active4, 0x20000L);
            case 112 :
                if ((active3 & 0x800000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 251, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0x40L, active4,
                                                  0L);
            case 114 :
                if ((active2 & 0x8000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 167, 22);
                } else if ((active4 & 0x20L) != 0L) {
                    return jjStartNfaWithStates_0(11, 261, 22);
                } else if ((active4 & 0x400000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 278, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x60608000000L, active2, 0x1000040000800060L,
                                                  active3, 0xd0008000001L, active4, 0x8000L);
            case 115 :
                if ((active1 & 0x8000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 115, 22);
                } else if ((active3 & 0x20000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 221, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x400000L, active3,
                                                  0x1080000001000000L, active4, 0L);
            case 116 :
                if ((active1 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 80, 22);
                } else if ((active2 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 148, 22);
                } else if ((active3 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 213, 22);
                } else if ((active3 & 0x8000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 243, 22);
                } else if ((active4 & 0x200L) != 0L) {
                    return jjStartNfaWithStates_0(11, 265, 22);
                } else if ((active4 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 274, 22);
                } else if ((active4 & 0x80000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 275, 22);
                }
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4054000000L, active3,
                                                  0x4000000000000000L, active4, 0x20200000L);
            case 117 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L, active4,
                                                  0L);
            case 118 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x180000008000L, active2, 0xc800L, active3,
                                                  0x40001010L, active4, 0L);
            case 120 :
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x30000000000L, active3, 0L,
                                                  active4, 0x1800000L);
            case 121 :
                if ((active1 & 0x1000000L) != 0L) {
                    jjmatchedKind = 88;
                    jjmatchedPos  = 11;
                }
                return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0xc00000004000L, active2,
                                                  0x8L, active3, 0L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(10, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(10, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(11, active0, active1, active2, active3, active4);
            return 12;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa13_0(active0, 0x1800000000000000L, active1, 0x6c00000400000L, active2,
                                                  0xf0000000000300L, active3, 0xc2800100000L, active4, 0x8040L);
            case 97 :
                if ((active1 & 0x20000000L) != 0L) {
                    jjmatchedKind = 93;
                    jjmatchedPos  = 12;
                }
                return jjMoveStringLiteralDfa13_0(active0, 0x8200000000000000L, active1, 0x1000006600000000L, active2,
                                                  0x1000000000800001L, active3, 0x10008400000L, active4, 0x20000000L);
            case 99 :
                return jjMoveStringLiteralDfa13_0(active0, 0x400000000000000L, active1, 0L, active2,
                                                  0x6000000000000008L, active3, 0x8000000000000000L, active4, 0x4L);
            case 100 :
                if ((active0 & 0x80000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 55, 22);
                } else if ((active1 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 77, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000000000L, active2, 0x200000000L,
                                                  active3, 0L, active4, 0x800L);
            case 101 :
                if ((active2 & 0x8000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 191, 22);
                } else if ((active4 & 0x10000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 284, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0x181900044001L, active2,
                                                  0x34000003060L, active3, 0x4000000001001010L, active4, 0x1a04000L);
            case 102 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L, active4,
                                                  0x400L);
            case 103 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x60008000000L, active2, 0x108000000000000L,
                                                  active3, 0x81000000000000L, active4, 0L);
            case 104 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000L, active2, 0x14000000L, active3, 0L,
                                                  active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000000000L, active2, 0x10004000c810L,
                                                  active3, 0x3d0000000L, active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000024L,
                                                  active4, 0L);
            case 108 :
                if ((active0 & 0x40000000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 42, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3,
                                                  0x840808L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000000800000L, active2, 0x1000000L,
                                                  active3, 0x1L, active4, 0L);
            case 110 :
                if ((active2 & 0x400L) != 0L) {
                    return jjStartNfaWithStates_0(12, 138, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8002000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa13_0(active0, 0x40000020000000L, active1, 0L, active2, 0x400080000000L,
                                                  active3, 0x40L, active4, 0L);
            case 112 :
                if ((active3 & 0x400000000000L) != 0L) {
                    jjmatchedKind = 238;
                    jjmatchedPos  = 12;
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3,
                                                  0x800000000000L, active4, 0x100000L);
            case 114 :
                if ((active0 & 0x20000000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 41, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200L, active2, 0x200000000080002L, active3,
                                                  0L, active4, 0x20000L);
            case 115 :
                if ((active4 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 268, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000000000000L, active2, 0x40000000000L,
                                                  active3, 0L, active4, 0x80L);
            case 116 :
                if ((active2 & 0x800000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 187, 22);
                } else if ((active3 & 0x200L) != 0L) {
                    return jjStartNfaWithStates_0(12, 201, 22);
                } else if ((active3 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 207, 22);
                } else if ((active3 & 0x4000000000L) != 0L) {
                    return jjStartNfaWithStates_0(12, 230, 22);
                }
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000000020000L, active2,
                                                  0x400000400400000L, active3, 0x3044000400000000L, active4, 0x3L);
            case 117 :
                return jjMoveStringLiteralDfa13_0(active0, 0x18000000000L, active1, 0L, active2, 0x100200000L, active3,
                                                  0L, active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2080000L, active4,
                                                  0L);
            case 121 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L);
            case 122 :
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L, active4,
                                                  0L);
            default :
                break;
        }
        return jjStartNfa_0(11, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(11, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(12, active0, active1, active2, active3, active4);
            return 13;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x6000040202L, active2, 0x600000000L, active3,
                                                  0xc0800408000000L, active4, 0x20000L);
            case 97 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x40000000800000L, active2, 0x60L, active3,
                                                  0x1L, active4, 0L);
            case 100 :
                if ((active2 & 0x4000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 166, 22);
                } else if ((active2 & 0x10000000000L) != 0L) {
                    jjmatchedKind = 168;
                    jjmatchedPos  = 13;
                } else if ((active4 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 277, 22);
                } else if ((active4 & 0x800000L) != 0L) {
                    jjmatchedKind = 279;
                    jjmatchedPos  = 13;
                }
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0xc00000000000L, active2, 0x30020000000000L,
                                                  active3, 0L, active4, 0x1000000L);
            case 101 :
                if ((active1 & 0x400000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 122, 22);
                } else if ((active2 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 144, 22);
                } else if ((active2 & 0x1000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 152, 22);
                } else if ((active3 & 0x8L) != 0L) {
                    return jjStartNfaWithStates_0(13, 195, 22);
                } else if ((active3 & 0x800L) != 0L) {
                    return jjStartNfaWithStates_0(13, 203, 22);
                } else if ((active3 & 0x2000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 253, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000000000000L, active2, 0x480002L, active3,
                                                  0x1001000012080000L, active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa14_0(active0, 0x20000000L, active1, 0x100000000L, active2,
                                                  0xc0000080000000L, active3, 0x40000L, active4, 0L);
            case 104 :
                if ((active2 & 0x400000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 186, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000L,
                                                  active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x60008008000L, active2, 0x100040000000000L,
                                                  active3, 0x200000000000L, active4, 0x804L);
            case 108 :
                if ((active3 & 0x40000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 234, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0x18000000000L, active1, 0x1800000000L, active2,
                                                  0x100001018L, active3, 0x4L, active4, 0x80L);
            case 109 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x6000000400000L, active2, 0x40000000L,
                                                  active3, 0x2800100000L, active4, 0L);
            case 110 :
                if ((active2 & 0x800L) != 0L) {
                    return jjStartNfaWithStates_0(13, 139, 22);
                } else if ((active2 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 142, 22);
                } else if ((active2 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 143, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0x8200000000000000L, active1, 0x200000000000L, active2, 0L,
                                                  active3, 0x40000000L, active4, 0x20004000L);
            case 111 :
                return jjMoveStringLiteralDfa14_0(active0, 0x1800000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0x3L);
            case 112 :
                if ((active3 & 0x4000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 254, 22);
                }
                break;
            case 114 :
                if ((active1 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 78, 22);
                } else if ((active2 & 0x4000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 154, 22);
                } else if ((active2 & 0x10000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 156, 22);
                } else if ((active3 & 0x10L) != 0L) {
                    return jjStartNfaWithStates_0(13, 196, 22);
                } else if ((active3 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 204, 22);
                } else if ((active3 & 0x400000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 214, 22);
                } else if ((active3 & 0x80000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 235, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000000L, active1, 0x180000000000L, active2,
                                                  0x2000002000L, active3, 0L, active4, 0x108000L);
            case 115 :
                if ((active1 & 0x1L) != 0L) {
                    return jjStartNfaWithStates_0(13, 64, 22);
                } else if ((active2 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 149, 22);
                } else if ((active3 & 0x20L) != 0L) {
                    return jjStartNfaWithStates_0(13, 197, 22);
                } else if ((active3 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 209, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400L);
            case 116 :
                if ((active1 & 0x2000000L) != 0L) {
                    jjmatchedKind = 89;
                    jjmatchedPos  = 13;
                } else if ((active1 & 0x100000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 120, 22);
                } else if ((active2 & 0x100000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 172, 22);
                } else if ((active2 & 0x200000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 185, 22);
                } else if ((active3 & 0x80000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 223, 22);
                } else if ((active3 & 0x100000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 224, 22);
                } else if ((active3 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 225, 22);
                }
                return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L, active1, 0x18600000000L, active2,
                                                  0x7008000000800000L, active3, 0x8000010001800000L, active4, 0L);
            case 117 :
                return jjMoveStringLiteralDfa14_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 118 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L,
                                                  active4, 0x40L);
            case 119 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x300L, active3, 0x40L, active4,
                                                  0L);
            case 120 :
                if ((active1 & 0x1000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(13, 124, 22);
                } else if ((active2 & 0x1L) != 0L) {
                    return jjStartNfaWithStates_0(13, 128, 22);
                }
                break;
            case 121 :
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4,
                                                  0L);
            default :
                break;
        }
        return jjStartNfa_0(12, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(12, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(13, active0, active1, active2, active3, active4);
            return 14;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa15_0(active0, 0x2400000000000000L, active1, 0x188000000000L, active2,
                                                  0x20000002060L, active3, 0x10880000L, active4, 0x1000000L);
            case 97 :
                if ((active2 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(14, 129, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x6010100400000L, active2, 0x10000000001000L,
                                                  active3, 0x2800100000L, active4, 0x8000L);
            case 99 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200000000000L, active2, 0L, active3,
                                                  0x200000000000L, active4, 0x20000000L);
            case 100 :
                if ((active0 & 0x8000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 63, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0x200000000000000L, active1, 0x6000000000L, active2, 0L,
                                                  active3, 0L, active4, 0L);
            case 101 :
                if ((active2 & 0x8L) != 0L) {
                    return jjStartNfaWithStates_0(14, 131, 22);
                } else if ((active2 & 0x80000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 147, 22);
                } else if ((active2 & 0x800000L) != 0L) {
                    jjmatchedKind = 151;
                    jjmatchedPos  = 14;
                } else if ((active2 & 0x40000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 158, 22);
                } else if ((active2 & 0x1000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 188, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0xc00600000000L, active2, 0x402000000000L,
                                                  active3, 0x44L, active4, 0x1004c0L);
            case 102 :
                if ((active0 & 0x20000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 29, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L, active4,
                                                  0L);
            case 103 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L, active4,
                                                  0L);
            case 104 :
                if ((active2 & 0x8000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 179, 22);
                }
                break;
            case 105 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0xe0000000000310L, active3,
                                                  0x10000000000L, active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L, active4,
                                                  0L);
            case 108 :
                if ((active3 & 0x800000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 239, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1000000008000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0x40000000000000L,
                                                  active4, 0L);
            case 110 :
                if ((active1 & 0x8000000L) != 0L) {
                    jjmatchedKind = 91;
                    jjmatchedPos  = 14;
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x60000000000L, active2, 0x100000000000000L,
                                                  active3, 0x40000000L, active4, 0x20000L);
            case 111 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x6000040000000000L, active3,
                                                  0x8000000400000000L, active4, 0L);
            case 112 :
                if ((active2 & 0x400000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 150, 22);
                } else if ((active3 & 0x1000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 252, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20000L, active2, 0x600000000L, active3, 0L,
                                                  active4, 0x3L);
            case 114 :
                if ((active3 & 0x4000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 242, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0x1800000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 115 :
                if ((active3 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 210, 22);
                } else if ((active3 & 0x1000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 240, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000002000000L,
                                                  active4, 0x800L);
            case 116 :
                if ((active3 & 0x1L) != 0L) {
                    return jjStartNfaWithStates_0(14, 192, 22);
                } else if ((active4 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(14, 270, 22);
                }
                return jjMoveStringLiteralDfa15_0(active0, 0x40018000000000L, active1, 0x1800000200L, active2,
                                                  0x100000000L, active3, 0L, active4, 0x4L);
            case 117 :
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000L, active4,
                                                  0L);
            case 120 :
                if ((active1 & 0x800000L) != 0L) {
                    jjmatchedKind = 87;
                    jjmatchedPos  = 14;
                }
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(13, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(13, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(14, active0, active1, active2, active3, active4);
            return 15;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa16_0(active0, 0x1a40018000000000L, active1, 0x40270600000000L, active2,
                                                  0x80000000L, active3, 0x2000004L, active4, 0x3L);
            case 97 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1800000000L, active2, 0L, active3,
                                                  0x40000000080000L, active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L, active4, 0L);
            case 100 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3,
                                                  0x10000000L, active4, 0L);
            case 101 :
                if ((active4 & 0x20000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 285, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x6000028002L, active2, 0x600000000L, active3,
                                                  0x40000000L, active4, 0x80L);
            case 102 :
                return jjMoveStringLiteralDfa16_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 103 :
                if ((active2 & 0x100000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 184, 22);
                }
                break;
            case 105 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000008000000L,
                                                  active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000800000L,
                                                  active4, 0L);
            case 108 :
                if ((active2 & 0x20L) != 0L) {
                    return jjStartNfaWithStates_0(15, 133, 22);
                } else if ((active4 & 0x40L) != 0L) {
                    return jjStartNfaWithStates_0(15, 262, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0xc00000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 110 :
                if ((active2 & 0x100L) != 0L) {
                    return jjStartNfaWithStates_0(15, 136, 22);
                } else if ((active2 & 0x200L) != 0L) {
                    return jjStartNfaWithStates_0(15, 137, 22);
                } else if ((active2 & 0x40000000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 170, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0L,
                                                  active4, 0x1000000L);
            case 111 :
                return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000000L, active1, 0x40000L, active2, 0L,
                                                  active3, 0x10000000000L, active4, 0x20000L);
            case 112 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000L, active4,
                                                  0L);
            case 114 :
                if ((active2 & 0x20000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 181, 22);
                } else if ((active3 & 0x40L) != 0L) {
                    return jjStartNfaWithStates_0(15, 198, 22);
                } else if ((active3 & 0x8000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 255, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x180000000000L, active2, 0x6000000000000000L,
                                                  active3, 0x100000L, active4, 0L);
            case 115 :
                if ((active2 & 0x100000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 160, 22);
                } else if ((active2 & 0x400000000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 174, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L,
                                                  active4, 0x100000L);
            case 116 :
                if ((active4 & 0x400L) != 0L) {
                    return jjStartNfaWithStates_0(15, 266, 22);
                } else if ((active4 & 0x800L) != 0L) {
                    return jjStartNfaWithStates_0(15, 267, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1000000000000L, active2, 0x10000000000010L,
                                                  active3, 0L, active4, 0x8000L);
            case 117 :
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3,
                                                  0x400000000L, active4, 0L);
            case 119 :
                if ((active2 & 0x40L) != 0L) {
                    return jjStartNfaWithStates_0(15, 134, 22);
                }
                break;
            case 120 :
                if ((active1 & 0x400000L) != 0L) {
                    jjmatchedKind = 86;
                    jjmatchedPos  = 15;
                } else if ((active3 & 0x800000000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 227, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x6000000000000L, active2, 0xc0000000000000L,
                                                  active3, 0x2000000000L, active4, 0L);
            case 121 :
                if ((active2 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(15, 140, 22);
                } else if ((active4 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(15, 258, 22);
                }
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(14, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(14, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(15, active0, active1, active2, active3, active4);
            return 16;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x6001800028000L, active2, 0x6000000000000000L,
                                                  active3, 0x2001000000L, active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa17_0(active0, 0x40000000000000L, active1, 0x1180000040000L, active2,
                                                  0x20000000000L, active3, 0L, active4, 0x1000000L);
            case 99 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L, active4,
                                                  0L);
            case 100 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x40060600000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 101 :
                if ((active4 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 271, 22);
                }
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x8000000000L, active2, 0xd0000000000000L,
                                                  active3, 0L, active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa17_0(active0, 0x200000000000000L, active1, 0x10000000000L, active2, 0L,
                                                  active3, 0L, active4, 0x3L);
            case 103 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4,
                                                  0L);
            case 105 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10800000L, active4,
                                                  0x20000L);
            case 108 :
                if ((active0 & 0x10000000000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 40, 22);
                }
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x6100000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x200000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 110 :
                if ((active3 & 0x10000000000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 232, 22);
                }
                break;
            case 111 :
                return jjMoveStringLiteralDfa17_0(active0, 0x400000000000000L, active1, 0L, active2, 0x80000000L,
                                                  active3, 0L, active4, 0L);
            case 112 :
                if ((active4 & 0x80L) != 0L) {
                    return jjStartNfaWithStates_0(16, 263, 22);
                }
                return jjMoveStringLiteralDfa17_0(active0, 0x1800000000000000L, active1, 0x200L, active2, 0L, active3,
                                                  0x2000004L, active4, 0L);
            case 114 :
                if ((active0 & 0x8000000000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 39, 22);
                } else if ((active3 & 0x40000000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 222, 22);
                }
                return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000000L, active1, 0L, active2, 0x600000000L,
                                                  active3, 0x80000L, active4, 0L);
            case 115 :
                if ((active3 & 0x200000000000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 237, 22);
                }
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x2L, active2, 0x2000000000L, active3, 0L,
                                                  active4, 0x100000L);
            case 116 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0xc00000000000L, active2, 0L, active3,
                                                  0x400000000L, active4, 0L);
            case 120 :
                if ((active3 & 0x40000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(16, 246, 22);
                }
                break;
            case 121 :
                if ((active2 & 0x10L) != 0L) {
                    return jjStartNfaWithStates_0(16, 132, 22);
                }
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L, active4, 0L);
            case 122 :
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000000000L,
                                                  active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(15, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(15, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(16, active0, active1, active2, active3, active4);
            return 17;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa18_0(active0, 0x2040000000000000L, active1, 0x1000000000000L, active2, 0L,
                                                  active3, 0L, active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0xe10000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0x800000L,
                                                  active4, 0L);
            case 100 :
                if ((active2 & 0x10000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(17, 180, 22);
                } else if ((active2 & 0x40000000000000L) != 0L) {
                    jjmatchedKind = 182;
                    jjmatchedPos  = 17;
                }
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x6000000000000L, active2, 0x80000000000000L,
                                                  active3, 0L, active4, 0L);
            case 101 :
                if ((active1 & 0x200L) != 0L) {
                    return jjStartNfaWithStates_0(17, 73, 22);
                } else if ((active3 & 0x80000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(17, 247, 22);
                }
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x40060600000000L, active2, 0L, active3,
                                                  0x80000L, active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x1800000000L, active2, 0x80000000L, active3,
                                                  0L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x2600000000L, active3, 0x100000L,
                                                  active4, 0x100000L);
            case 107 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L, active4,
                                                  0L);
            case 108 :
                if ((active2 & 0x2000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(17, 189, 22);
                }
                return jjMoveStringLiteralDfa18_0(active0, 0x1800000000000000L, active1, 0x8000040000L, active2, 0L,
                                                  active3, 0x2000000L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3,
                                                  0x2000000000L, active4, 0x1000000L);
            case 111 :
                return jjMoveStringLiteralDfa18_0(active0, 0x200000000000000L, active1, 0x20000L, active2, 0L, active3,
                                                  0x4L, active4, 0x3L);
            case 112 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0L, active4, 0L);
            case 114 :
                if ((active2 & 0x4000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(17, 190, 22);
                }
                return jjMoveStringLiteralDfa18_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 115 :
                if ((active3 & 0x400000000L) != 0L) {
                    return jjStartNfaWithStates_0(17, 226, 22);
                }
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0x10000000L,
                                                  active4, 0x20000L);
            case 116 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x186100000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000L, active4,
                                                  0L);
            default :
                break;
        }
        return jjStartNfa_0(16, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(16, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(17, active0, active1, active2, active3, active4);
            return 18;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0xc00100000000L, active2, 0x80000000000000L,
                                                  active3, 0L, active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa19_0(active0, 0x1800000000000000L, active1, 0x7800000002L, active2, 0L,
                                                  active3, 0x3080000L, active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 101 :
                if ((active2 & 0x20000000000L) != 0L) {
                    return jjStartNfaWithStates_0(18, 169, 22);
                } else if ((active4 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(18, 273, 22);
                } else if ((active4 & 0x1000000L) != 0L) {
                    return jjStartNfaWithStates_0(18, 280, 22);
                }
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x6180000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x1000000000000L, active2, 0x80000000L,
                                                  active3, 0L, active4, 0L);
            case 103 :
                return jjMoveStringLiteralDfa19_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0x2000000000L,
                                                  active4, 0L);
            case 107 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L, active4,
                                                  0L);
            case 108 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x40060600008000L, active2, 0x2000L, active3,
                                                  0L, active4, 0L);
            case 109 :
                if ((active0 & 0x400000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(18, 58, 22);
                }
                break;
            case 110 :
                if ((active3 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(18, 212, 22);
                }
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4,
                                                  0L);
            case 111 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x2600000000L, active3, 0L,
                                                  active4, 0x100000L);
            case 114 :
                return jjMoveStringLiteralDfa19_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0x3L);
            case 115 :
                if ((active3 & 0x8000000L) != 0L) {
                    return jjStartNfaWithStates_0(18, 219, 22);
                }
                break;
            case 116 :
                return jjMoveStringLiteralDfa19_0(active0, 0x40000000000000L, active1, 0x8000000000L, active2, 0L,
                                                  active3, 0x10000000L, active4, 0L);
            case 119 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L, active4, 0L);
            case 120 :
                return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x200000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(17, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(17, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(18, active0, active1, active2, active3, active4);
            return 19;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x386000020000L, active2, 0L, active3,
                                                  0x10080000L, active4, 0x3L);
            case 97 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x1008000008000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x1800000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 100 :
                if ((active2 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 161, 22);
                } else if ((active2 & 0x400000000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 162, 22);
                }
                break;
            case 101 :
                if ((active1 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 82, 22);
                } else if ((active2 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 141, 22);
                }
                return jjMoveStringLiteralDfa20_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0x4L,
                                                  active4, 0L);
            case 103 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000L, active4,
                                                  0L);
            case 108 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x6000000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 109 :
                if ((active0 & 0x200000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 57, 22);
                }
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0xc00000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 110 :
                if ((active2 & 0x2000000000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 165, 22);
                } else if ((active3 & 0x2000000000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 229, 22);
                } else if ((active4 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 276, 22);
                }
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0L,
                                                  active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa20_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 115 :
                if ((active3 & 0x800000L) != 0L) {
                    return jjStartNfaWithStates_0(19, 215, 22);
                }
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L, active4,
                                                  0L);
            case 116 :
                return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x40070700000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 121 :
                return jjMoveStringLiteralDfa20_0(active0, 0x1800000000000000L, active1, 0L, active2, 0L, active3,
                                                  0x2000000L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(18, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(18, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(19, active0, active1, active2, active3, active4);
            return 20;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa21_0(active0, 0x2040000000000000L, active1, 0x40460600000000L, active2,
                                                  0x80000000000000L, active3, 0L, active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 100 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x380000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 101 :
                return jjMoveStringLiteralDfa21_0(active0, 0x1800000000000000L, active1, 0x2L, active2, 0L, active3,
                                                  0x2000000L, active4, 0L);
            case 102 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4,
                                                  0L);
            case 105 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x800000000000L, active2, 0x80000000L, active3,
                                                  0L, active4, 0L);
            case 108 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1L);
            case 109 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x6000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 114 :
                if ((active3 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(20, 194, 22);
                }
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2L);
            case 115 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4,
                                                  0L);
            case 116 :
                if ((active3 & 0x1000000L) != 0L) {
                    return jjStartNfaWithStates_0(20, 216, 22);
                }
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x6001800000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 120 :
                if ((active3 & 0x10000000L) != 0L) {
                    return jjStartNfaWithStates_0(20, 220, 22);
                }
                break;
            case 121 :
                return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x100008000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(19, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(19, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(20, active0, active1, active2, active3, active4);
            return 21;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x40060600000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x6002000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 100 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L, active4,
                                                  0L);
            case 101 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x380000000000L, active2, 0L, active3, 0L,
                                                  active4, 0x1L);
            case 102 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x4000020000L, active2, 0L, active3, 0x80000L,
                                                  active4, 0x2L);
            case 108 :
                return jjMoveStringLiteralDfa22_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 109 :
                if ((active0 & 0x40000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(21, 54, 22);
                }
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0L,
                                                  active4, 0L);
            case 110 :
                if ((active1 & 0x800000000000L) != 0L) {
                    return jjStartNfaWithStates_0(21, 111, 22);
                }
                break;
            case 111 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x1800008000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 112 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 114 :
                if ((active0 & 0x800000000000000L) != 0L) {
                    jjmatchedKind = 59;
                    jjmatchedPos  = 21;
                } else if ((active1 & 0x10000000000L) != 0L) {
                    return jjStartNfaWithStates_0(21, 104, 22);
                }
                return jjMoveStringLiteralDfa22_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3,
                                                  0x2000000L, active4, 0L);
            case 115 :
                if ((active1 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(21, 65, 22);
                }
                break;
            case 116 :
                return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 120 :
                if ((active1 & 0x400000000000L) != 0L) {
                    return jjStartNfaWithStates_0(21, 110, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(20, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(20, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(21, active0, active1, active2, active3, active4);
            return 22;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa23_0(active0, 0x1000000000000000L, active1, 0x6000000000000L, active2, 0L,
                                                  active3, 0L, active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 101 :
                if ((active1 & 0x100000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 96, 22);
                } else if ((active2 & 0x80000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 159, 22);
                } else if ((active2 & 0x80000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 183, 22);
                }
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4,
                                                  0L);
            case 102 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L,
                                                  active4, 0x1L);
            case 103 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2L);
            case 105 :
                return jjMoveStringLiteralDfa23_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 108 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x380000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x60600000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 110 :
                if ((active1 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 79, 22);
                } else if ((active1 & 0x4000000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 102, 22);
                }
                break;
            case 111 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L,
                                                  active4, 0L);
            case 114 :
                if ((active1 & 0x800000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 99, 22);
                } else if ((active1 & 0x1000000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 100, 22);
                }
                break;
            case 115 :
                if ((active3 & 0x2000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 217, 22);
                }
                break;
            case 120 :
                if ((active1 & 0x2000000000L) != 0L) {
                    return jjStartNfaWithStates_0(22, 101, 22);
                }
                break;
            case 122 :
                return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4,
                                                  0L);
            default :
                break;
        }
        return jjStartNfa_0(21, active0, active1, active2, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old2
     * @param active2
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa23_0(long old0, long active0, long old1, long active1, long old2, long active2,
            long old3, long active3, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(21, old0, old1, old2, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(22, active0, active1, 0L, active3, active4);
            return 23;
        }
        switch (curChar) {
            case 97 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x40020200000000L, active3, 0L, active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x8000000000L, active3, 0L, active4, 0L);
            case 101 :
                if ((active3 & 0x80000L) != 0L) {
                    return jjStartNfaWithStates_0(23, 211, 22);
                }
                return jjMoveStringLiteralDfa24_0(active0, 0x2000000000000000L, active1, 0L, active3, 0L, active4, 0L);
            case 104 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x2L);
            case 105 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x40400000000L, active3, 0L, active4, 0L);
            case 108 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x20000L, active3, 0L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x6000000000000L, active3, 0L, active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa24_0(active0, 0x1000000000000000L, active1, 0L, active3, 0L, active4, 0L);
            case 114 :
                if ((active1 & 0x1000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(23, 112, 22);
                }
                break;
            case 116 :
                return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x380000000000L, active3, 0L, active4, 0x1L);
            default :
                break;
        }
        return jjStartNfa_0(22, active0, active1, 0L, active3, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old3
     * @param active3
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa24_0(long old0, long active0, long old1, long active1, long old3, long active3,
            long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(22, old0, old1, 0L, old3, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(23, active0, active1, 0L, 0L, active4);
            return 24;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa25_0(active0, 0x2000000000000000L, active1, 0L, active4, 0x1L);
            case 97 :
                return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x2380000000000L, active4, 0L);
            case 99 :
                return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x40000000000000L, active4, 0L);
            case 100 :
                if ((active1 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(24, 81, 22);
                }
                break;
            case 105 :
                return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x4000000000000L, active4, 0L);
            case 110 :
                if ((active1 & 0x400000000L) != 0L) {
                    return jjStartNfaWithStates_0(24, 98, 22);
                } else if ((active1 & 0x40000000000L) != 0L) {
                    return jjStartNfaWithStates_0(24, 106, 22);
                }
                break;
            case 114 :
                return jjMoveStringLiteralDfa25_0(active0, 0x1000000000000000L, active1, 0L, active4, 0L);
            case 116 :
                return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x8000000000L, active4, 0x2L);
            case 120 :
                if ((active1 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(24, 97, 22);
                } else if ((active1 & 0x20000000000L) != 0L) {
                    return jjStartNfaWithStates_0(24, 105, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(23, active0, active1, 0L, 0L, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa25_0(long old0, long active0, long old1, long active1, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(23, old0, old1, 0L, 0L, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(24, active0, active1, 0L, 0L, active4);
            return 25;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa26_0(active0, 0x1000000000000000L, active1, 0x380000000000L, active4,
                                                  0x2L);
            case 110 :
                if ((active1 & 0x4000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(25, 114, 22);
                }
                break;
            case 111 :
                return jjMoveStringLiteralDfa26_0(active0, 0x2000000000000000L, active1, 0x8000000000L, active4, 0L);
            case 116 :
                return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x40000000000000L, active4, 0x1L);
            case 120 :
                if ((active1 & 0x2000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(25, 113, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(24, active0, active1, 0L, 0L, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa26_0(long old0, long active0, long old1, long active1, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(24, old0, old1, 0L, 0L, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(25, active0, active1, 0L, 0L, active4);
            return 26;
        }
        switch (curChar) {
            case 101 :
                return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0L, active4, 0x1L);
            case 102 :
                return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x200000000000L, active4, 0L);
            case 103 :
                return jjMoveStringLiteralDfa27_0(active0, 0x1000000000000000L, active1, 0L, active4, 0L);
            case 109 :
                return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x180000000000L, active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x40000000000000L, active4, 0L);
            case 114 :
                if ((active1 & 0x8000000000L) != 0L) {
                    return jjStartNfaWithStates_0(26, 103, 22);
                }
                return jjMoveStringLiteralDfa27_0(active0, 0x2000000000000000L, active1, 0L, active4, 0L);
            case 116 :
                return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0L, active4, 0x2L);
            default :
                break;
        }
        return jjStartNfa_0(25, active0, active1, 0L, 0L, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa27_0(long old0, long active0, long old1, long active1, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(25, old0, old1, 0L, 0L, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(26, active0, active1, 0L, 0L, active4);
            return 27;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa28_0(active0, 0x2000000000000000L, active1, 0L, active4, 0L);
            case 97 :
                return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x280000000000L, active4, 0x1L);
            case 101 :
                return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0L, active4, 0x2L);
            case 105 :
                return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x100000000000L, active4, 0L);
            case 111 :
                return jjMoveStringLiteralDfa28_0(active0, 0x1000000000000000L, active1, 0L, active4, 0L);
            case 114 :
                if ((active1 & 0x40000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(27, 118, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(26, active0, active1, 0L, 0L, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa28_0(long old0, long active0, long old1, long active1, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(26, old0, old1, 0L, 0L, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(27, active0, active1, 0L, 0L, active4);
            return 28;
        }
        switch (curChar) {
            case 97 :
                return jjMoveStringLiteralDfa29_0(active0, 0x1000000000000000L, active1, 0L, active4, 0x2L);
            case 99 :
                return jjMoveStringLiteralDfa29_0(active0, 0L, active1, 0x200000000000L, active4, 0L);
            case 105 :
                return jjMoveStringLiteralDfa29_0(active0, 0x2000000000000000L, active1, 0L, active4, 0L);
            case 109 :
                if ((active4 & 0x1L) != 0L) {
                    return jjStartNfaWithStates_0(28, 256, 22);
                }
                break;
            case 110 :
                if ((active1 & 0x100000000000L) != 0L) {
                    return jjStartNfaWithStates_0(28, 108, 22);
                }
                break;
            case 120 :
                if ((active1 & 0x80000000000L) != 0L) {
                    return jjStartNfaWithStates_0(28, 107, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(27, active0, active1, 0L, 0L, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa29_0(long old0, long active0, long old1, long active1, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(27, old0, old1, 0L, 0L, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(28, active0, active1, 0L, 0L, active4);
            return 29;
        }
        switch (curChar) {
            case 108 :
                return jjMoveStringLiteralDfa30_0(active0, 0x3000000000000000L, active1, 0L, active4, 0L);
            case 109 :
                if ((active4 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(29, 257, 22);
                }
                break;
            case 116 :
                return jjMoveStringLiteralDfa30_0(active0, 0L, active1, 0x200000000000L, active4, 0L);
            default :
                break;
        }
        return jjStartNfa_0(28, active0, active1, 0L, 0L, active4);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @param old4
     * @param active4
     * @return
     */
    private int jjMoveStringLiteralDfa30_0(long old0, long active0, long old1, long active1, long old4, long active4) {
        if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L) {
            return jjStartNfa_0(28, old0, old1, 0L, 0L, old4);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(29, active0, active1, 0L, 0L, 0L);
            return 30;
        }
        switch (curChar) {
            case 105 :
                return jjMoveStringLiteralDfa31_0(active0, 0x1000000000000000L, active1, 0L);
            case 108 :
                return jjMoveStringLiteralDfa31_0(active0, 0x2000000000000000L, active1, 0L);
            case 111 :
                return jjMoveStringLiteralDfa31_0(active0, 0L, active1, 0x200000000000L);
            default :
                break;
        }
        return jjStartNfa_0(29, active0, active1, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @return
     */
    private int jjMoveStringLiteralDfa31_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(29, old0, old1, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(30, active0, active1, 0L, 0L, 0L);
            return 31;
        }
        switch (curChar) {
            case 101 :
                if ((active0 & 0x1000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(31, 60, 22);
                }
                return jjMoveStringLiteralDfa32_0(active0, 0x2000000000000000L, active1, 0L);
            case 114 :
                if ((active1 & 0x200000000000L) != 0L) {
                    return jjStartNfaWithStates_0(31, 109, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(30, active0, active1, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @param old1
     * @param active1
     * @return
     */
    private int jjMoveStringLiteralDfa32_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(30, old0, old1, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(31, active0, 0L, 0L, 0L, 0L);
            return 32;
        }
        switch (curChar) {
            case 103 :
                return jjMoveStringLiteralDfa33_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(31, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa33_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(31, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(32, active0, 0L, 0L, 0L, 0L);
            return 33;
        }
        switch (curChar) {
            case 97 :
                return jjMoveStringLiteralDfa34_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(32, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa34_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(32, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(33, active0, 0L, 0L, 0L, 0L);
            return 34;
        }
        switch (curChar) {
            case 108 :
                return jjMoveStringLiteralDfa35_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(33, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa35_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(33, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(34, active0, 0L, 0L, 0L, 0L);
            return 35;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa36_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(34, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa36_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(34, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(35, active0, 0L, 0L, 0L, 0L);
            return 36;
        }
        switch (curChar) {
            case 99 :
                return jjMoveStringLiteralDfa37_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(35, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa37_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(35, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(36, active0, 0L, 0L, 0L, 0L);
            return 37;
        }
        switch (curChar) {
            case 108 :
                return jjMoveStringLiteralDfa38_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(36, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa38_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(36, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(37, active0, 0L, 0L, 0L, 0L);
            return 38;
        }
        switch (curChar) {
            case 105 :
                return jjMoveStringLiteralDfa39_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(37, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa39_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(37, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(38, active0, 0L, 0L, 0L, 0L);
            return 39;
        }
        switch (curChar) {
            case 101 :
                return jjMoveStringLiteralDfa40_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(38, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa40_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(38, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(39, active0, 0L, 0L, 0L, 0L);
            return 40;
        }
        switch (curChar) {
            case 110 :
                return jjMoveStringLiteralDfa41_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(39, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa41_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(39, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(40, active0, 0L, 0L, 0L, 0L);
            return 41;
        }
        switch (curChar) {
            case 116 :
                return jjMoveStringLiteralDfa42_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(40, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa42_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(40, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(41, active0, 0L, 0L, 0L, 0L);
            return 42;
        }
        switch (curChar) {
            case 95 :
                return jjMoveStringLiteralDfa43_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(41, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa43_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(41, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(42, active0, 0L, 0L, 0L, 0L);
            return 43;
        }
        switch (curChar) {
            case 118 :
                return jjMoveStringLiteralDfa44_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(42, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa44_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(42, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(43, active0, 0L, 0L, 0L, 0L);
            return 44;
        }
        switch (curChar) {
            case 101 :
                return jjMoveStringLiteralDfa45_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(43, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa45_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(43, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(44, active0, 0L, 0L, 0L, 0L);
            return 45;
        }
        switch (curChar) {
            case 114 :
                return jjMoveStringLiteralDfa46_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(44, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa46_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(44, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(45, active0, 0L, 0L, 0L, 0L);
            return 46;
        }
        switch (curChar) {
            case 115 :
                return jjMoveStringLiteralDfa47_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(45, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa47_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(45, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(46, active0, 0L, 0L, 0L, 0L);
            return 47;
        }
        switch (curChar) {
            case 105 :
                return jjMoveStringLiteralDfa48_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(46, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa48_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(46, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(47, active0, 0L, 0L, 0L, 0L);
            return 48;
        }
        switch (curChar) {
            case 111 :
                return jjMoveStringLiteralDfa49_0(active0, 0x2000000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(47, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param old0
     * @param active0
     * @return
     */
    private int jjMoveStringLiteralDfa49_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(47, old0, 0L, 0L, 0L, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(48, active0, 0L, 0L, 0L, 0L);
            return 49;
        }
        switch (curChar) {
            case 110 :
                if ((active0 & 0x2000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(49, 61, 22);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(48, active0, 0L, 0L, 0L, 0L);
    }

    /**
     * 
     * @param pos
     * @param kind
     * @param state
     * @return
     */
    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos  = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    /**
     * 
     * @param startState
     * @param curPos
     * @return
     */
    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 38;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 28 :
                        case 22 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 299) {
                                kind = 299;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 9 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 299) {
                                kind = 299;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 27 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 299) {
                                kind = 299;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 0 :
                            if ((0x3ff400000000000L & l) != 0L) {
                                if (kind > 298) {
                                    kind = 298;
                                }
                                jjCheckNAddTwoStates(18, 19);
                            } else if (curChar == 45) {
                                jjstateSet[jjnewStateCnt++] = 20;
                            }
                            if ((0xe02000000000L & l) != 0L) {
                                if (kind > 299) {
                                    kind = 299;
                                }
                                jjCheckNAdd(22);
                            }
                            break;
                        case 29 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 299) {
                                kind = 299;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 10 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 299) {
                                kind = 299;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 26 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 299) {
                                kind = 299;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 30 :
                            if ((0x3ffe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 299) {
                                kind = 299;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 18 :
                            if ((0x3ff400000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 298) {
                                kind = 298;
                            }
                            jjCheckNAddTwoStates(18, 19);
                            break;
                        case 19 :
                            if (curChar == 45) {
                                jjstateSet[jjnewStateCnt++] = 20;
                            }
                            break;
                        case 20 :
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 298) {
                                kind = 298;
                            }
                            jjCheckNAddTwoStates(18, 19);
                            break;
                        case 21 :
                            if ((0xe02000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 299) {
                                kind = 299;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 25 :
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 45) {
                                kind = 45;
                            }
                            jjstateSet[jjnewStateCnt++] = 25;
                            break;
                        case 32 :
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 46) {
                                kind = 46;
                            }
                            jjstateSet[jjnewStateCnt++] = 32;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 28 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 299) {
                                    kind = 299;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 108) {
                                jjstateSet[jjnewStateCnt++] = 34;
                            }
                            if (curChar == 108) {
                                jjstateSet[jjnewStateCnt++] = 27;
                            }
                            break;
                        case 9 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 299) {
                                    kind = 299;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 102) {
                                jjstateSet[jjnewStateCnt++] = 8;
                            }
                            break;
                        case 27 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 299) {
                                    kind = 299;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 33;
                            }
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 26;
                            }
                            break;
                        case 0 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 299) {
                                    kind = 299;
                                }
                                jjCheckNAdd(22);
                            }
                            if ((0x8000000080L & l) != 0L) {
                                if (kind > 9) {
                                    kind = 9;
                                }
                            } else if ((0x100000001000L & l) != 0L) {
                                if (kind > 8) {
                                    kind = 8;
                                }
                            } else if ((0x1000000010000L & l) != 0L) {
                                if (kind > 7) {
                                    kind = 7;
                                }
                            } else if ((0x4000000040L & l) != 0L) {
                                if (kind > 6) {
                                    kind = 6;
                                }
                            } else if ((0x400000004L & l) != 0L) {
                                if (kind > 5) {
                                    kind = 5;
                                }
                            } else if (curChar == 82) {
                                jjstateSet[jjnewStateCnt++] = 16;
                            } else if (curChar == 114) {
                                jjstateSet[jjnewStateCnt++] = 10;
                            }
                            if (curChar == 103) {
                                jjAddStates(0, 1);
                            }
                            break;
                        case 29 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 299) {
                                    kind = 299;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 97) {
                                jjstateSet[jjnewStateCnt++] = 35;
                            }
                            if (curChar == 97) {
                                jjstateSet[jjnewStateCnt++] = 28;
                            }
                            break;
                        case 10 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 299) {
                                    kind = 299;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 101) {
                                jjstateSet[jjnewStateCnt++] = 9;
                            }
                            break;
                        case 26 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 299) {
                                    kind = 299;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 108) {
                                jjstateSet[jjnewStateCnt++] = 31;
                            } else if (curChar == 114) {
                                jjstateSet[jjnewStateCnt++] = 24;
                            }
                            break;
                        case 30 :
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 299) {
                                    kind = 299;
                                }
                                jjCheckNAdd(22);
                            }
                            if (curChar == 111) {
                                jjstateSet[jjnewStateCnt++] = 36;
                            }
                            if (curChar == 111) {
                                jjstateSet[jjnewStateCnt++] = 29;
                            }
                            break;
                        case 1 :
                            if ((0x4000000040L & l) != 0L && (kind > 6)) {
                                kind = 6;
                            }
                            break;
                        case 2 :
                            if ((0x1000000010000L & l) != 0L && (kind > 7)) {
                                kind = 7;
                            }
                            break;
                        case 3 :
                            if ((0x100000001000L & l) != 0L && (kind > 8)) {
                                kind = 8;
                            }
                            break;
                        case 4 :
                            if ((0x8000000080L & l) != 0L && (kind > 9)) {
                                kind = 9;
                            }
                            break;
                        case 5 :
                            if ((curChar == 101) && (kind > 11)) {
                                kind = 11;
                            }
                            break;
                        case 6 :
                        case 12 :
                            if (curChar == 101) {
                                jjCheckNAdd(5);
                            }
                            break;
                        case 7 :
                            if (curChar == 114) {
                                jjstateSet[jjnewStateCnt++] = 6;
                            }
                            break;
                        case 8 :
                            if (curChar == 101) {
                                jjstateSet[jjnewStateCnt++] = 7;
                            }
                            break;
                        case 11 :
                            if (curChar == 114) {
                                jjstateSet[jjnewStateCnt++] = 10;
                            }
                            break;
                        case 13 :
                            if (curChar == 114) {
                                jjstateSet[jjnewStateCnt++] = 12;
                            }
                            break;
                        case 14 :
                            if (curChar == 101) {
                                jjstateSet[jjnewStateCnt++] = 13;
                            }
                            break;
                        case 15 :
                            if (curChar == 102) {
                                jjstateSet[jjnewStateCnt++] = 14;
                            }
                            break;
                        case 16 :
                            if (curChar == 101) {
                                jjstateSet[jjnewStateCnt++] = 15;
                            }
                            break;
                        case 17 :
                            if (curChar == 82) {
                                jjstateSet[jjnewStateCnt++] = 16;
                            }
                            break;
                        case 21 :
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 299) {
                                kind = 299;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 22 :
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 299) {
                                kind = 299;
                            }
                            jjCheckNAdd(22);
                            break;
                        case 23 :
                            if (curChar == 103) {
                                jjAddStates(0, 1);
                            }
                            break;
                        case 24 :
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 25;
                            }
                            break;
                        case 31 :
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 32;
                            }
                            break;
                        case 33 :
                            if (curChar == 108) {
                                jjstateSet[jjnewStateCnt++] = 31;
                            }
                            break;
                        case 34 :
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 33;
                            }
                            break;
                        case 35 :
                            if (curChar == 108) {
                                jjstateSet[jjnewStateCnt++] = 34;
                            }
                            break;
                        case 36 :
                            if (curChar == 97) {
                                jjstateSet[jjnewStateCnt++] = 35;
                            }
                            break;
                        case 37 :
                            if (curChar == 111) {
                                jjstateSet[jjnewStateCnt++] = 36;
                            }
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int  i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos  = curPos;
                kind          = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    /**
     * Reinitialise parser. 
     * @param stream
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState  = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    /**
     * 
     */
    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 38; i-- > 0; ) {
            jjrounds[i] = 0x80000000;
        }
    }

    /**
     * Reinitialise parser. 
     * @param stream
     * @param lexState
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state. 
     * @param lexState
     */
    public void SwitchTo(int lexState) {
        if ((lexState >= 1) || (lexState < 0)) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                                    TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    /**
     * 
     * @return
     */
    protected Token jjFillToken() {
        final Token  t;
        final String curTokenImage;
        final int    beginLine;
        final int    endLine;
        final int    beginColumn;
        final int    endColumn;
        String       im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine     = input_stream.getBeginLine();
        beginColumn   = input_stream.getBeginColumn();
        endLine       = input_stream.getEndLine();
        endColumn     = input_stream.getEndColumn();
        t             = Token.newToken(jjmatchedKind, curTokenImage);
        t.beginLine   = beginLine;
        t.endLine     = endLine;
        t.beginColumn = beginColumn;
        t.endColumn   = endColumn;
        return t;
    }

    /**
     * Get the next Token. 
     * @return
     */
    public Token getNextToken() {
        Token matchedToken;
        int   curPos = 0;
        EOFLoop:
        for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken  = jjFillToken();
                return matchedToken;
            }
            try {
                input_stream.backup(0);
                while ((curChar <= 34) && (0x400002600L & (1L << curChar)) != 0L) {
                    curChar = input_stream.BeginToken();
                }
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos  = 0;
            curPos        = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int     error_line   = input_stream.getEndLine();
            int     error_column = input_stream.getEndColumn();
            String  error_after  = null;
            boolean EOFSeen      = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen     = true;
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();
                if ((curChar == '\n') || (curChar == '\r')) {
                    error_line++;
                    error_column = 0;
                } else {
                    error_column++;
                }
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
                                    TokenMgrError.LEXICAL_ERROR);
        }
    }

    /**
     * 
     * @param state
     */
    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state]             = jjround;
        }
    }

    /**
     * 
     * @param start
     * @param end
     */
    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    /**
     * 
     * @param state1
     * @param state2
     */
    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }
}
