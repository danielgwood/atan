/* Generated By:JavaCC: Do not edit this line. CmdParserPlayerTokenManager.java */
package atan.parser.player;
//~--- non-JDK imports --------------------------------------------------------

import atan.model.enums.Errors;
import atan.model.enums.Ok;
import atan.model.enums.PlayMode;
import atan.model.enums.RefereeMessage;
import atan.model.enums.ServerParams;
import atan.model.enums.ViewAngle;
import atan.model.enums.ViewQuality;
import atan.model.enums.Warning;
import atan.model.ActionsPlayer;
import atan.model.ControllerPlayer;
import atan.parser.objects.ObjName;
import atan.parser.objects.ObjNameBall;
import atan.parser.objects.ObjNameFlagBottom;
import atan.parser.objects.ObjNameFlagCenter;
import atan.parser.objects.ObjNameFlagCornerLeft;
import atan.parser.objects.ObjNameFlagCornerRight;
import atan.parser.objects.ObjNameFlagGoalLeft;
import atan.parser.objects.ObjNameFlagGoalRight;
import atan.parser.objects.ObjNameFlagLeft;
import atan.parser.objects.ObjNameFlagPenaltyEast;
import atan.parser.objects.ObjNameFlagPenaltyWest;
import atan.parser.objects.ObjNameFlagRight;
import atan.parser.objects.ObjNameFlagTop;
import atan.parser.objects.ObjNameLine;
import atan.parser.objects.ObjNameNull;
import atan.parser.objects.ObjNamePlayerEast;
import atan.parser.objects.ObjNamePlayerWest;
//~--- JDK imports ------------------------------------------------------------

import java.io.StringReader;
import java.util.HashMap;

/** Token Manager. */
public class CmdParserPlayerTokenManager implements CmdParserPlayerConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x201c018015000000L) != 0L || (active1 & 0x800000000001c9a3L) != 0L || (active2 & 0x3ffffL) != 0L || (active4 & 0x3003fff80L) != 0L)
            return 22;
         if ((active0 & 0x60000000400L) != 0L || (active2 & 0x7fe00000000L) != 0L)
         {
            jjmatchedKind = 9;
            return 30;
         }
         if ((active0 & 0xd7e38007c2ff7000L) != 0L || (active1 & 0x3c03ffffaa3614L) != 0L || (active2 & 0xc7fff80007fc0000L) != 0L || (active3 & 0xfffc0c000007ffffL) != 0L || (active4 & 0xffc0007fL) != 0L)
         {
            jjmatchedKind = 295;
            return 22;
         }
         if ((active0 & 0x607800000000L) != 0L || (active2 & 0x1f8000000L) != 0L)
         {
            jjmatchedKind = 6;
            return 22;
         }
         if ((active0 & 0x20000000L) != 0L || (active1 & 0x1fc0000540000L) != 0L || (active3 & 0x3fffff80000L) != 0L)
         {
            jjmatchedKind = 7;
            return 22;
         }
         if ((active0 & 0x8000L) != 0L || (active1 & 0x40L) != 0L || (active2 & 0x3800000000000000L) != 0L)
         {
            jjmatchedKind = 8;
            return 22;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x2000000000008L) != 0L || (active3 & 0x3f00000000000L) != 0L || (active4 & 0x400000000L) != 0L)
            return 10;
         if ((active0 & 0x8000000L) != 0L || (active1 & 0x7fc0000000000000L) != 0L)
         {
            jjmatchedKind = 5;
            return 22;
         }
         return -1;
      case 1:
         if ((active1 & 0x20000L) != 0L)
            return 22;
         if ((active0 & 0x60000000400L) != 0L || (active2 & 0x60000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 1;
            return 29;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x8L) != 0L || (active3 & 0x3f00000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 1;
            return 9;
         }
         if ((active0 & 0xf7ffe1fffffff000L) != 0L || (active1 & 0xfffffffffffdfff7L) != 0L || (active2 & 0xfffff9ffffffffffL) != 0L || (active3 & 0xfffc0fffffffffffL) != 0L || (active4 & 0xffffffffL) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 1;
            return 22;
         }
         return -1;
      case 2:
         if ((active0 & 0x2008000L) != 0L || (active1 & 0x10L) != 0L || (active3 & 0x1c000000000000L) != 0L)
            return 22;
         if ((active0 & 0xffffe1fffdff7000L) != 0L || (active1 & 0xfffffffffffdffefL) != 0L || (active2 & 0xfffff9ffffffffffL) != 0L || (active3 & 0xffe3ffffffffffffL) != 0L || (active4 & 0xffffffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 2;
            }
            return 22;
         }
         if ((active0 & 0x60000000400L) != 0L || (active2 & 0x60000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 2;
            }
            return 28;
         }
         return -1;
      case 3:
         if ((active0 & 0x8000000785c15000L) != 0L || (active1 & 0x7061800040L) != 0L || (active2 & 0x7800000000c0000L) != 0L || (active3 & 0x2000000000L) != 0L)
            return 22;
         if ((active0 & 0x7fffe1f8783e2000L) != 0L || (active1 & 0xffffff8f9e7dffafL) != 0L || (active2 & 0xf87ff9fffff3ffffL) != 0L || (active3 & 0xffffffdfffffffffL) != 0L || (active4 & 0xffffffffL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 3;
            }
            return 22;
         }
         if ((active0 & 0x60000000400L) != 0L || (active2 & 0x60000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 3;
            }
            return 27;
         }
         return -1;
      case 4:
         if ((active0 & 0x60000000000L) != 0L || (active2 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 4;
            }
            return 26;
         }
         if ((active0 & 0x100000L) != 0L || (active1 & 0x8000000000010004L) != 0L || (active2 & 0xe007L) != 0L || (active4 & 0x3L) != 0L)
            return 22;
         if ((active0 & 0x7fffe1fffc2e2400L) != 0L || (active1 & 0x7ffffffffffcffabL) != 0L || (active2 & 0xfffffdffffff1ff8L) != 0L || (active3 & 0xffffffdfffffffffL) != 0L || (active4 & 0xfffffffcL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 4;
            }
            return 22;
         }
         return -1;
      case 5:
         if ((active0 & 0x600000060400L) != 0L || (active1 & 0x1000000000000L) != 0L || (active2 & 0x40000000000L) != 0L)
            return 22;
         if ((active0 & 0x7fff87fffc282000L) != 0L || (active1 & 0xfffefffffffcffabL) != 0L || (active2 & 0xfffffbffffffdfffL) != 0L || (active3 & 0xffffffdfffffffffL) != 0L || (active4 & 0xffffffffL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 5;
            }
            return 22;
         }
         return -1;
      case 6:
         if ((active0 & 0xc000020080000L) != 0L || (active1 & 0x4000000080008L) != 0L || (active3 & 0xc001e10000000000L) != 0L || (active4 & 0x800000L) != 0L)
            return 22;
         if ((active0 & 0x7ff387ffdc202000L) != 0L || (active1 & 0xfffafffffff4ffa3L) != 0L || (active2 & 0xffffffffffffdfffL) != 0L || (active3 & 0x3ffe1edfffffffffL) != 0L || (active4 & 0xff7fffffL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 6;
            }
            return 22;
         }
         return -1;
      case 7:
         if ((active1 & 0x8000000000000L) != 0L || (active2 & 0x7ff00000000000L) != 0L || (active3 & 0x1040L) != 0L || (active4 & 0xc000000L) != 0L)
            return 22;
         if ((active0 & 0x7ffb87ffdc202000L) != 0L || (active1 & 0xfff6fffffffcffa3L) != 0L || (active2 & 0xff800fffffffdfffL) != 0L || (active3 & 0xfffffedfffffefbfL) != 0L || (active4 & 0xf37fffffL) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 7;
            }
            return 22;
         }
         return -1;
      case 8:
         if ((active0 & 0x803800654002000L) != 0L || (active1 & 0xc20001001000000L) != 0L || (active2 & 0x2600000000100000L) != 0L || (active3 & 0x42000000000208L) != 0L || (active4 & 0xe0000000L) != 0L)
            return 22;
         if ((active0 & 0x77f807f988200000L) != 0L || (active1 & 0xf3d6ffeffefcffa3L) != 0L || (active2 & 0xd9ff8fffffefdfffL) != 0L || (active3 & 0xffbdfedfffffedb7L) != 0L || (active4 & 0x137fffffL) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 8;
            }
            return 22;
         }
         return -1;
      case 9:
         if ((active0 & 0x180200000L) != 0L || (active1 & 0x20000018c000082L) != 0L || (active2 & 0xa0001e04000L) != 0L || (active3 & 0x20000000400410L) != 0L || (active4 & 0x10000010L) != 0L)
            return 22;
         if ((active0 & 0x77f807f808000000L) != 0L || (active1 & 0xf1d6fffe72fcff21L) != 0L || (active2 & 0xdfff85fffe1f9fffL) != 0L || (active3 & 0xff9dfedfffbfe9a7L) != 0L || (active4 & 0x837fffefL) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 9;
            }
            return 22;
         }
         return -1;
      case 10:
         if ((active0 & 0x61800000000L) != 0L || (active1 & 0x4082100000408001L) != 0L || (active2 & 0x182000000L) != 0L || (active3 & 0x8001600100000000L) != 0L || (active4 & 0x80400200L) != 0L)
            return 22;
         if ((active0 & 0x77f801e008000000L) != 0L || (active1 & 0xb154effff2bc7f20L) != 0L || (active2 & 0xdfff85fe7d5f9fffL) != 0L || (active3 & 0x7f9c9edeffbfe9a7L) != 0L || (active4 & 0x33ffdefL) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 10;
            }
            return 22;
         }
         return -1;
      case 11:
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x8c0000101100L) != 0L || (active2 & 0x8800010008L) != 0L || (active3 & 0x90800802020000L) != 0L || (active4 & 0x24d023L) != 0L)
            return 22;
         if ((active0 & 0x77d801e008000000L) != 0L || (active1 & 0xb15473fff2ac6e20L) != 0L || (active2 & 0xdfff85767d5e9ff7L) != 0L || (active3 & 0x7f0c5ed6fdbde9a7L) != 0L || (active4 & 0x31b2dccL) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 11;
            }
            return 22;
         }
         return -1;
      case 12:
         if ((active0 & 0x10018000000000L) != 0L || (active1 & 0x602000200L) != 0L || (active2 & 0x880000000000040L) != 0L || (active3 & 0xc0400000820L) != 0L || (active4 & 0x1000100L) != 0L)
            return 22;
         if ((active0 & 0x77c8006008000000L) != 0L || (active1 & 0xb1547ff9f0ac6c20L) != 0L || (active2 & 0xd77f85767d5e9fb7L) != 0L || (active3 & 0x7f0c52d2fdbde187L) != 0L || (active4 & 0x21b2cccL) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 12;
            }
            return 22;
         }
         return -1;
      case 13:
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x1150000800200400L) != 0L || (active2 & 0x8060013401521c80L) != 0L || (active3 & 0x60000c038042183L) != 0L || (active4 & 0x1a0000L) != 0L)
            return 22;
         if ((active0 & 0x57c8006008000000L) != 0L || (active1 & 0xa0047ff7f08c6820L) != 0L || (active2 & 0x571f84427c0c8337L) != 0L || (active3 & 0x790c5a12c5b9c004L) != 0L || (active4 & 0x2012cccL) != 0L)
         {
            if (jjmatchedPos != 13)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 13;
            }
            return 22;
         }
         return -1;
      case 14:
         if ((active0 & 0x1000000008000000L) != 0L || (active1 & 0xa004006060880000L) != 0L || (active2 & 0x11008000040c8000L) != 0L || (active3 & 0x100580000004000L) != 0L || (active4 & 0x400L) != 0L)
            return 22;
         if ((active0 & 0x47c8006000000000L) != 0L || (active1 & 0x7f9f90046820L) != 0L || (active2 & 0x461f046278000337L) != 0L || (active3 & 0x780c0212c5b98004L) != 0L || (active4 & 0x21128ccL) != 0L)
         {
            if (jjmatchedPos != 14)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 14;
            }
            return 22;
         }
         return -1;
      case 15:
         if ((active1 & 0x600000040000L) != 0L || (active2 & 0x12044010000136L) != 0L || (active3 & 0x4800000280000004L) != 0L || (active4 & 0x20000c4L) != 0L)
            return 22;
         if ((active0 & 0x47c8006000000000L) != 0L || (active1 & 0x41ffff0006820L) != 0L || (active2 & 0x460d002268000201L) != 0L || (active3 & 0x300c021045b98000L) != 0L || (active4 & 0x112808L) != 0L)
         {
            if (jjmatchedPos != 15)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 15;
            }
            return 22;
         }
         return -1;
      case 16:
         if ((active0 & 0x6000000000L) != 0L || (active2 & 0x1L) != 0L || (active3 & 0x4021004000000L) != 0L || (active4 & 0x808L) != 0L)
            return 22;
         if ((active0 & 0x47c8000000000000L) != 0L || (active1 & 0x47ffff0006820L) != 0L || (active2 & 0x460d002268000200L) != 0L || (active3 & 0x3008000241b98000L) != 0L || (active4 & 0x112000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 16;
            return 22;
         }
         return -1;
      case 17:
         if ((active1 & 0x20L) != 0L || (active2 & 0x60d000000000000L) != 0L || (active3 & 0x8000040000000L) != 0L)
            return 22;
         if ((active0 & 0x47c8000000000000L) != 0L || (active1 & 0x47ffff0006800L) != 0L || (active2 & 0x4000002268000200L) != 0L || (active3 & 0x3000000201b98000L) != 0L || (active4 & 0x112000L) != 0L)
         {
            if (jjmatchedPos != 17)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 17;
            }
            return 22;
         }
         return -1;
      case 18:
         if ((active0 & 0x80000000000000L) != 0L || (active2 & 0x2000000000L) != 0L || (active3 & 0x810000L) != 0L || (active4 & 0x102000L) != 0L)
            return 22;
         if ((active0 & 0x4748000000000000L) != 0L || (active1 & 0x47ffff0006800L) != 0L || (active2 & 0x4008000268000200L) != 0L || (active3 & 0x3000000201388000L) != 0L || (active4 & 0x10000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 18;
            return 22;
         }
         return -1;
      case 19:
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x4000L) != 0L || (active2 & 0x260000200L) != 0L || (active3 & 0x200080000L) != 0L || (active4 & 0x10000L) != 0L)
            return 22;
         if ((active0 & 0x4708000000000000L) != 0L || (active1 & 0x47ffff0002800L) != 0L || (active2 & 0x4008000008000000L) != 0L || (active3 & 0x3000000001308000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 19;
            return 22;
         }
         return -1;
      case 20:
         if ((active2 & 0x4000000000000000L) != 0L || (active3 & 0x1100000L) != 0L)
            return 22;
         if ((active0 & 0x4708000000000000L) != 0L || (active1 & 0x47ffff0002800L) != 0L || (active2 & 0x8000008000000L) != 0L || (active3 & 0x3000000000208000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 20;
            return 22;
         }
         return -1;
      case 21:
         if ((active0 & 0x4308000000000000L) != 0L || (active1 & 0xc1000000000L) != 0L)
            return 22;
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x473eff0002800L) != 0L || (active2 & 0x8000008000000L) != 0L || (active3 & 0x3000000000208000L) != 0L)
         {
            if (jjmatchedPos != 21)
            {
               jjmatchedKind = 295;
               jjmatchedPos = 21;
            }
            return 22;
         }
         return -1;
      case 22:
         if ((active1 & 0x790000800L) != 0L || (active2 & 0x8000008000000L) != 0L || (active3 & 0x200000L) != 0L)
            return 22;
         if ((active0 & 0x600000000000000L) != 0L || (active1 & 0x473e860002000L) != 0L || (active3 & 0x3000000000008000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 22;
            return 22;
         }
         return -1;
      case 23:
         if ((active1 & 0x100000000000L) != 0L || (active3 & 0x8000L) != 0L)
            return 22;
         if ((active0 & 0x600000000000000L) != 0L || (active1 & 0x463e860002000L) != 0L || (active3 & 0x3000000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 23;
            return 22;
         }
         return -1;
      case 24:
         if ((active1 & 0x6060002000L) != 0L)
            return 22;
         if ((active0 & 0x600000000000000L) != 0L || (active1 & 0x4638800000000L) != 0L || (active3 & 0x3000000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 24;
            return 22;
         }
         return -1;
      case 25:
         if ((active1 & 0x600000000000L) != 0L)
            return 22;
         if ((active0 & 0x600000000000000L) != 0L || (active1 & 0x4038800000000L) != 0L || (active3 & 0x3000000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 25;
            return 22;
         }
         return -1;
      case 26:
         if ((active1 & 0x800000000L) != 0L)
            return 22;
         if ((active0 & 0x600000000000000L) != 0L || (active1 & 0x4038000000000L) != 0L || (active3 & 0x3000000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 26;
            return 22;
         }
         return -1;
      case 27:
         if ((active1 & 0x4000000000000L) != 0L)
            return 22;
         if ((active0 & 0x600000000000000L) != 0L || (active1 & 0x38000000000L) != 0L || (active3 & 0x3000000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 27;
            return 22;
         }
         return -1;
      case 28:
         if ((active1 & 0x18000000000L) != 0L || (active3 & 0x1000000000000000L) != 0L)
            return 22;
         if ((active0 & 0x600000000000000L) != 0L || (active1 & 0x20000000000L) != 0L || (active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 28;
            return 22;
         }
         return -1;
      case 29:
         if ((active3 & 0x2000000000000000L) != 0L)
            return 22;
         if ((active0 & 0x600000000000000L) != 0L || (active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 29;
            return 22;
         }
         return -1;
      case 30:
         if ((active0 & 0x600000000000000L) != 0L || (active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 30;
            return 22;
         }
         return -1;
      case 31:
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x20000000000L) != 0L)
            return 22;
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 31;
            return 22;
         }
         return -1;
      case 32:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 32;
            return 22;
         }
         return -1;
      case 33:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 33;
            return 22;
         }
         return -1;
      case 34:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 34;
            return 22;
         }
         return -1;
      case 35:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 35;
            return 22;
         }
         return -1;
      case 36:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 36;
            return 22;
         }
         return -1;
      case 37:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 37;
            return 22;
         }
         return -1;
      case 38:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 38;
            return 22;
         }
         return -1;
      case 39:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 39;
            return 22;
         }
         return -1;
      case 40:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 40;
            return 22;
         }
         return -1;
      case 41:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 41;
            return 22;
         }
         return -1;
      case 42:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 42;
            return 22;
         }
         return -1;
      case 43:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 43;
            return 22;
         }
         return -1;
      case 44:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 44;
            return 22;
         }
         return -1;
      case 45:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 45;
            return 22;
         }
         return -1;
      case 46:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 46;
            return 22;
         }
         return -1;
      case 47:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 47;
            return 22;
         }
         return -1;
      case 48:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 48;
            return 22;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         return jjStopAtPos(0, 293);
      case 40:
         return jjStopAtPos(0, 291);
      case 41:
         return jjStopAtPos(0, 292);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30000010000000L, 0x0L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x7fc0000000000000L, 0x0L, 0x0L, 0x0L);
      case 99:
         jjmatchedKind = 288;
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x800000000001c823L, 0x3ffffL, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x40800000L, 0x60000000L, 0x1c0000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x78e000010L, 0x7e00000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x607800000000L, 0x0L, 0x1f8000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x60000000400L, 0x0L, 0x7fe00000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x2000000204000L, 0x0L, 0x380000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe0000000000000L, 0x800220000L, 0x0L, 0x0L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x780400000L, 0x7001800000L, 0x7ffc00000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x40L, 0x3800000000000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x2000L, 0xc000000000000000L, 0x1fffL, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x700000000060000L, 0x38000001600L, 0x0L, 0x6000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L, 0x0L, 0x78000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x1fc0000540000L, 0x0L, 0x3fffff80000L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xc0000000000L, 0x0L);
      case 114:
         jjmatchedKind = 290;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x2000000000008L, 0x0L, 0x3f00000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000000002181000L, 0xc000000080004L, 0x0L, 0xfffc000000000000L, 0x7fL);
      case 116:
         jjmatchedKind = 289;
         return jjMoveStringLiteralDfa1_0(0x201c000015000000L, 0x180L, 0x0L, 0x0L, 0x3fff80L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L, 0x0L, 0x400000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L, 0x0L, 0x0L, 0x3800000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L, 0x0L, 0x0L, 0xfc000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4002000002820000L, active1, 0xffc2000060016810L, active2, 0xc80001fe000c0007L, active3, 0x1c00000000007fL, active4, 0x1f80L);
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 81, 22);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000008201000L, active1, 0x38000000188L, active2, 0x7ff80000000000L, active3, 0x1e3f0007ff80000L, active4, 0xbfe000L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000L, active1, 0x18c000000L, active2, 0x3e00000L, active3, 0x18000L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8023L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c000790416000L, active1, 0x7001800000L, active2, 0x780000000000000L, active3, 0x600000000001f80L, active4, 0xff000000L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xe0000020000000L, active1, 0xfc0010540000L, active2, 0x1ff0L, active3, 0x3800000780060000L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x800200000L, active2, 0L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xa700678000048400L, active1, 0x1640L, active2, 0x300006000803e000L, active3, 0x3800000000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x7840000000L, active1, 0L, active2, 0x70100000L, active3, 0x3c000006000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x5000000080004L, active2, 0L, active3, 0xc000000000000000L, active4, 0x7L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000000L, active1, 0x38000000000000L, active2, 0x180000000L, active3, 0xc0000000000L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x602000000L, active2, 0x4000000L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x78L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x700000000000000L, active1, 0x1000000001600L, active2, 0L, active3, 0x6000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x60020280400L, active1, 0x4fc00005c81a5L, active2, 0x3e000000fff0L, active3, 0xc0000cc780000000L, active4, 0xe003L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000780400000L, active1, 0xc0007001800008L, active2, 0x780000000000000L, active3, 0x3f00000020000L, active4, 0x1f80L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x10000000000000L, active2, 0L, active3, 0x200000000040000L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x7800102000L, active1, 0x800200002L, active2, 0x7fc00070000000L, active3, 0L, active4, 0x400000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800008000000L, active1, 0x18c000000L, active2, 0x3e00000L, active3, 0x18000L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L, active2, 0x3000000000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x8L, active3, 0x1800000000L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xe2000000001000L, active1, 0x7f00000010000000L, active2, 0x180000000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c000010000000L, active1, 0L, active2, 0x1fe00000000L, active3, 0x400000000000000L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000004800L, active2, 0x800000000030000L, active3, 0x1e000007ff81f80L, active4, 0xfc000078L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000040000000L, active1, 0x40L, active2, 0x100000L, active3, 0x3800030000000000L, active4, 0x4L);
      case 114:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 22);
         return jjMoveStringLiteralDfa3_0(active0, 0x18005060000L, active1, 0L, active2, 0x8000000L, active3, 0x2000000000L, active4, 0x800000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0x60000000L, active2, 0xc0000L, active3, 0L, active4, 0x3000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8020000602010000L, active2, 0x4000007L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 22);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x38000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L, active2, 0xc000000000000000L, active3, 0x7fL, active4, 0x3f0000L);
      case 121:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1c000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x38000002000L, active2, 0xf000000000000000L, active3, 0x1c00003ffc0187L, active4, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000010002L, active2, 0xe00fL, active3, 0L, active4, 0x78L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000200000L, active1, 0x2000000000000L, active2, 0x800000000000000L, active3, 0xe0000000000000L, active4, 0xfc000000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 22);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0xfc007810100000L, active1, 0L, active2, 0x1fe70000000L, active3, 0x200000000002000L, active4, 0L);
      case 102:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0x10000000000L, active4, 0L);
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 22);
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x60000000L, active2, 0xc0000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0x3000000L);
      case 107:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0x780000000L, active1, 0xc0007001800000L, active2, 0x780000000000000L, active3, 0L, active4, 0x1f80L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x660000000400L, active1, 0x7f00000000000000L, active2, 0x60180000000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x7000000000c0000L, active1, 0x5000000080180L, active2, 0L, active3, 0xc000000000000208L, active4, 0xe000L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000018004000000L, active1, 0xc821L, active2, 0x11ff0L, active3, 0xcd800004c30L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000008000000L, active1, 0x2000019c000008L, active2, 0x3e00000L, active3, 0x1f00000020000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L, active2, 0x7fc00000100000L, active3, 0x20000001040L, active4, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0xe02200004L, active2, 0x380004000000L, active3, 0L, active4, 0x3L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L, active1, 0x8000000001400L, active2, 0L, active3, 0x100000000018000L, active4, 0L);
      case 116:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 229, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L, active2, 0x20000L, active3, 0L, active4, 0x3f0000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L, active2, 0L, active3, 0x3800000000000000L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0xfc0000540000L, active2, 0L, active3, 0x780000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x401e667ff4202000L, active1, 0x7fe8001061000180L, active2, 0x7803bfe101c0000L, active3, 0xae2000000000000L, active4, 0xfc3fe000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0x1006602800000L, active2, 0x7fc00004000000L, active3, 0xa0000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0x100000L, active4, 0x3000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc000000240000L, active4, 0L);
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 22);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x18000000000L, active2, 0x9000000000000000L, active3, 0xc000400181L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000L, active1, 0xfc0000540200L, active2, 0x10000L, active3, 0x100020780000c30L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x60000000L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0xe0000000000000L, active1, 0x8021L, active2, 0x1ff0L, active3, 0x2L, active4, 0L);
      case 104:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000000000L, active2, 0xc007L, active3, 0L, active4, 0x78L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000080400L, active1, 0x4000000080000L, active2, 0x40008000000L, active3, 0xc000010000018000L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L, active2, 0x8L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000040000000L, active4, 0x1f80L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L, active2, 0x800000000000000L, active3, 0x10000001800000L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0x3000000002000000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1700000000020000L, active1, 0x12000000006800L, active2, 0L, active3, 0x5248L, active4, 0xc00000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x18c000000L, active2, 0x3e20000L, active3, 0x10000c000000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000L, active2, 0x180000000L, active3, 0x10000000L, active4, 0L);
      case 116:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800200000L, active2, 0x2000000000000000L, active3, 0xc1820000004L, active4, 0x3L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1400L, active2, 0L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0x1e00000000000L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8010000612000002L, active2, 0x400dff9L, active3, 0x10000d800000000L, active4, 0x7bL);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20e0000000200000L, active1, 0x100018000000200L, active2, 0xd800000000040006L, active3, 0x400000025800185L, active4, 0x4002000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0x6000801000L, active2, 0x100000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L, active2, 0x10000L, active3, 0x20000000020c30L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000000000L, active1, 0x240000000000000L, active2, 0x80008000000L, active3, 0xa00100000018000L, active4, 0x8000000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000008000000L, active1, 0x8029L, active2, 0x40000000000L, active3, 0x3001e00018100000L, active4, 0x1f84L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L, active4, 0x10400000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000000L, active1, 0x800200000L, active2, 0x2000100000000000L, active3, 0xc0000400000L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0x67800000000L, active1, 0L, active2, 0x10000000L, active3, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 22);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 22);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xfe00000000L, active3, 0x10000080000L, active4, 0x33f4000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0x2a000000000000L, active2, 0x200000000000L, active3, 0x208L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000004080000L, active1, 0x4000000080080L, active2, 0L, active3, 0xc000000000000000L, active4, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1b0000000L, active1, 0L, active2, 0x80010060020000L, active3, 0xc000000240002L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000060000000L, active2, 0x100000000080000L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 22);
         return jjMoveStringLiteralDfa6_0(active0, 0x700018000000000L, active1, 0x400fc1001540000L, active2, 0x600000000000000L, active3, 0x20782004000L, active4, 0xc0008000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3800000000000000L, active2, 0L, active3, 0x52000000000000L, active4, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x4002000000000000L, active1, 0x2018c004800L, active2, 0x183e00000L, active3, 0x40002000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000000000L, active4, 0L);
      case 119:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 22);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0x4000000000000000L, active2, 0x7fc20000000000L, active3, 0x1040L, active4, 0L);
      case 120:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x18008000000L, active1, 0x2fc018c54e821L, active2, 0x4000be00000L, active3, 0x120782000000L, active4, 0xdf80L);
      case 97:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0x4cc021801280080L, active2, 0x67fe00180100010L, active3, 0xc20c000008240002L, active4, 0xc0000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000002L, active2, 0x6L, active3, 0x100000000000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x110000000000000L, active2, 0x4000000000000000L, active3, 0x4L, active4, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x60L, active3, 0L, active4, 0x4L);
      case 101:
         if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 232, 22);
         else if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 279, 22);
         return jjMoveStringLiteralDfa7_0(active0, 0xf01800004000000L, active1, 0x4200000000000000L, active2, 0x80000000000L, active3, 0x19248L, active4, 0x3000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x180000000L, active1, 0L, active2, 0x80000000000000L, active3, 0xc000100000L, active4, 0x400000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000000L, active4, 0x3L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L, active2, 0x4000000L, active3, 0x20000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2067800000000L, active1, 0x800000000000000L, active2, 0x20010000080L, active3, 0x80000000000000L, active4, 0x8000000L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000c30L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0xe0000000000000L, active1, 0x6000800000L, active2, 0x20000L, active3, 0x80000L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000200L, active2, 0x2000000000000708L, active3, 0x4000L, active4, 0x18L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 22);
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000600200000L, active1, 0L, active2, 0x100000040000L, active3, 0x4000000L, active4, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000002000L, active1, 0x20000060000000L, active2, 0x10000fe00080000L, active3, 0x820000000000000L, active4, 0x303f0020L);
      case 112:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x1000000000000000L, active2, 0x4001L, active3, 0L, active4, 0L);
      case 114:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L, active2, 0x800000060000800L, active3, 0x1e00000002000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x18602001000L, active2, 0x8000000000000000L, active3, 0x3000000000400181L, active4, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x1000000000010000L, active3, 0x442001810000000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L, active2, 0x10000000000L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x9000L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active3, 0x1800000L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000L, active4, 0L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc0000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x17e9800600000000L, active1, 0x4000800281600L, active2, 0x38000L, active3, 0xc091e00041838000L, active4, 0x3000004L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000102L, active2, 0x4000008L, active3, 0xc080006410L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80L);
      case 99:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 172, 22);
         return jjMoveStringLiteralDfa8_0(active0, 0x800067804000000L, active1, 0x300000000004000L, active2, 0x80010000000L, active3, 0xc000000240000L, active4, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0x200c0000100000L, active2, 0x20000600010L, active3, 0xc000000L, active4, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0x1000006000800000L, active2, 0x3000010000000760L, active3, 0x420c0020000000L, active4, 0x440L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000000L, active1, 0L, active2, 0x80000000000000L, active3, 0L, active4, 0x20L);
      case 103:
         if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 282, 22);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L, active2, 0xfe00040000L, active3, 0x20000000000L, active4, 0x3f0000L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x18000000000L, active2, 0x8000000000000000L, active3, 0x181L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x3801000L, active3, 0L, active4, 0x8L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0x18008000000L, active1, 0L, active2, 0x4800000008000000L, active3, 0x2000004L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0L, active2, 0x100006L, active3, 0x2L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0x2018c000081L, active2, 0x40060000000L, active3, 0x20100000000820L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400001001000000L, active2, 0x600000000000080L, active3, 0x208L, active4, 0xe0000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x4000L, active3, 0x500001800180000L, active4, 0x13L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0x800L);
      case 114:
         if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 198, 22);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 204, 22);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 283, 22);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0x100000000L, active4, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc2700000440800L, active2, 0L, active3, 0x3200000200000000L, active4, 0x40c000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0x800602002000L, active2, 0x180000000L, active3, 0x400000L, active4, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2010000010000000L, active2, 0x800L, active3, 0x10000000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x60000000L, active2, 0x100000000080000L, active3, 0x800000400000000L, active4, 0x1000L);
      case 120:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 115, 22);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 173, 22);
         break;
      case 121:
         if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L, active2, 0x7f800000000000L, active3, 0L, active4, 0L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x6000000180000000L, active1, 0x1e000800000L, active2, 0xd8ff807e60000000L, active3, 0x30000c1800402183L, active4, 0x1f0000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000686000000L, active2, 0xc0000000000L, active3, 0x100008000L, active4, 0x1000083L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x1040000000000000L, active1, 0x2000000000000000L, active2, 0L, active3, 0x400000c080000000L, active4, 0x10000008L);
      case 100:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 122, 22);
         else if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000L, active2, 0x600000000000000L, active3, 0x100600000000000L, active4, 0x82000010L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 22);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 22);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 117, 22);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 123, 22);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 285, 22);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0x11020c0060100080L, active2, 0x100000180680006L, active3, 0x100400800000L, active4, 0x40L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L, active2, 0xa0L, active3, 0L, active4, 0x20L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x8000000000L, active3, 0x1000000L, active4, 0x200000L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000006000L, active2, 0L, active3, 0x20c000000240000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x18008000000L, active1, 0x4120108488000L, active2, 0x8000000L, active3, 0x800002000000L, active4, 0x401200L);
      case 107:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 22);
         return jjMoveStringLiteralDfa9_0(active0, 0x67800000000L, active1, 0L, active2, 0x10000000L, active3, 0x10000L, active4, 0L);
      case 108:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 22);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 22);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0x10001022L, active2, 0x4140840L, active3, 0x4004L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0x800200000L, active2, 0L, active3, 0x8021000000000000L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x3801000L, active3, 0x800000020000410L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0x1L, active2, 0x1L, active3, 0x20004000820L, active4, 0x800L);
      case 112:
         if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 241, 22);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 246, 22);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0x600000040500L, active2, 0L, active3, 0x210020000L, active4, 0L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 22);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 22);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 22);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000002c008L, active3, 0x400000000100000L, active4, 0L);
      case 115:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 189, 22);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000000000L, active2, 0x300L, active3, 0x90000040000000L, active4, 0L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 59, 22);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 195, 22);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 201, 22);
         return jjMoveStringLiteralDfa9_0(active0, 0x300000000000000L, active1, 0x10000000000000L, active2, 0x20000000400L, active3, 0L, active4, 0xc000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L, active4, 0x2000L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0L, active2, 0x10000L, active3, 0x80000L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0x8000000L, active4, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x67800000000L, active1, 0x8050001000000000L, active2, 0x600010190101046L, active3, 0xe0c0000382c4000L, active4, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x6020L, active2, 0x8000000000030400L, active3, 0xc000020000000080L, active4, 0xe004L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0x800L, active2, 0x1L, active3, 0x800000000L, active4, 0L);
      case 99:
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x18008000000L, active1, 0xc0000100000L, active2, 0x209400000L, active3, 0x82008000L, active4, 0x10180L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000001L, active2, 0xc00000000L, active3, 0x1000000000L, active4, 0x461000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 21, 22);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 260, 22);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 284, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0x300000000000000L, active1, 0x82600000049000L, active2, 0x48800L, active3, 0x600200100004L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1800003004000000L, active3, 0L, active4, 0x180000L);
      case 103:
         if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 196, 22);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 202, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L, active4, 0L);
      case 104:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 169, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000000100L, active2, 0L, active3, 0x40002000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L, active2, 0x8002000030L, active3, 0x11000400010000L, active4, 0x2200000L);
      case 107:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0x2L, active4, 0L);
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 22);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(9, 65, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0x100000000000400L, active2, 0x1f800000000000L, active3, 0L, active4, 0x3L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x6000000000000000L, active1, 0x6602800000L, active2, 0L, active3, 0x4000820L, active4, 0L);
      case 110:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0x4020100080000L, active2, 0L, active3, 0x800100000000L, active4, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x1060000000000000L, active1, 0x800200200L, active2, 0x80L, active3, 0x3000000001020000L, active4, 0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x818000000000L, active2, 0L, active3, 0x101L, active4, 0x400L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 32, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x60000000L, active2, 0x100000000080000L, active3, 0L, active4, 0x8L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(9, 71, 22);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 245, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20000020000300L, active3, 0x1c0000000000L, active4, 0x220L);
      case 116:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 142, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000L, active2, 0x4000000000000000L, active3, 0x8000c000000000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0xc0000040000000L, active3, 0L, active4, 0x800L);
      case 120:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 214, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000L, active2, 0x40000000000L, active3, 0x800000L, active4, 0L);
      case 121:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 121, 22);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 171, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000400000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x31000001f0000800L, active2, 0x1000400054c0f80L, active3, 0x100000004100004L, active4, 0x3L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x4700000000000000L, active1, 0xe6000900400L, active2, 0x4080000440000007L, active3, 0x801002000L, active4, 0x20000L);
      case 99:
         if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8004000000080000L, active2, 0x10L, active3, 0x4400000010000L, active4, 0L);
      case 100:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 113, 22);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 224, 22);
         return jjMoveStringLiteralDfa11_0(active0, 0x30000000000000L, active1, 0x10001000000000L, active2, 0x20000L, active3, 0L, active4, 0L);
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(10, 64, 22);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 10;
         }
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 278, 22);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xf00000040000L, active2, 0x804020000000L, active3, 0x80000280000820L, active4, 0x820L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0x6000000000L, active1, 0x1000L, active2, 0x600000010008000L, active3, 0x800000000000000L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0x1000000L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x44000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x602000100L, active2, 0x840003800010008L, active3, 0x800000000002L, active4, 0x1c0000L);
      case 106:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa11_0(active0, 0x18008000000L, active1, 0L, active2, 0x8000000L, active3, 0x2000000L, active4, 0x80L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 36, 22);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 42, 22);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(10, 159, 22);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0x104L);
      case 109:
         if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(10, 287, 22);
         return jjMoveStringLiteralDfa11_0(active0, 0x1040000000000000L, active1, 0x800200000L, active2, 0L, active3, 0x8000000280000L, active4, 0L);
      case 110:
         if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 240, 22);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L, active2, 0x8000008000000020L, active3, 0x3000000000000080L, active4, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0x18000000000L, active2, 0x101f000200000000L, active3, 0xc040000101L, active4, 0x10448L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 35, 22);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 22);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 160, 22);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0x200000000020000L, active4, 0xc000L);
      case 115:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 119, 22);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0x400100000000000L, active4, 0x2000000L);
      case 116:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 126, 22);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(10, 153, 22);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 265, 22);
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0x2000L, active2, 0x20000000100000L, active3, 0xc0000808000L, active4, 0x3000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0x1000000000L, active4, 0L);
      case 119:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(10, 79, 22);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x10000000040L, active3, 0x38000000L, active4, 0L);
      case 120:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 255, 22);
         break;
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 122:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x18008000000L, active1, 0x4120000082000L, active2, 0x8000000L, active3, 0x3000420000000000L, active4, 0x88L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x6000000000L, active1, 0x2040000000000000L, active2, 0x620010010000000L, active3, 0x4a00100038004000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0L, active4, 0L);
      case 99:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(11, 72, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0x2L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x600190040000L, active2, 0x40000000000100L, active3, 0x200000000L, active4, 0L);
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 53, 22);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 244, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0x90000000000000L, active1, 0x1800200020L, active2, 0x8030L, active3, 0xc0000040000L, active4, 0x100L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L);
      case 103:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 167, 22);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 277, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000L, active2, 0x801f000000000000L, active3, 0x80L, active4, 0L);
      case 104:
         if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 268, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000000000000L, active2, 0x80000040121040L, active3, 0x8000L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L, active4, 0L);
      case 108:
         if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(11, 256, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0x81002000L, active4, 0x1000004L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x1340000000000000L, active1, 0x1100000000000000L, active2, 0x40200000000L, active3, 0L, active4, 0x10000L);
      case 110:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 131, 22);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(11, 227, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0x602000200L, active2, 0x800020000000L, active3, 0x4000000000820L, active4, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40200000L, active4, 0x2000L);
      case 112:
         if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 247, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0x4L, active4, 0L);
      case 114:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(11, 163, 22);
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(11, 257, 22);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(11, 274, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x6060800000L, active2, 0x1100004000080006L, active3, 0xd000800000L, active4, 0x800L);
      case 115:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 111, 22);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 217, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0x108000000100000L, active4, 0L);
      case 116:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 76, 22);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 144, 22);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 209, 22);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 239, 22);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(11, 261, 22);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(11, 270, 22);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(11, 271, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x405400000L, active3, 0x400000000000000L, active4, 0x2020000L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x18000000800L, active2, 0xc80L, active3, 0x4000101L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x3000000000L, active3, 0L, active4, 0x180000L);
      case 121:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L, active1, 0x80000c0000000400L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, active3, active4);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0x300000000000000L, active1, 0x6c0000040000L, active2, 0xf000000000030L, active3, 0xc280010000L, active4, 0x804L);
      case 97:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x1040000000000000L, active1, 0x1100000660000000L, active2, 0x100000000080000L, active3, 0x1000840000L, active4, 0x2000000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L, active1, 0x8000000000000000L, active2, 0x600000000000000L, active3, 0x4800000000000000L, active4, 0L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 52, 22);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(12, 73, 22);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000000000L, active2, 0x20000000L, active3, 0L, active4, 0x80L);
      case 101:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 187, 22);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(12, 280, 22);
         return jjMoveStringLiteralDfa13_0(active0, 0x2400000000000000L, active1, 0x18190004400L, active2, 0x3400000306L, active3, 0x400000000100101L, active4, 0x1a0400L);
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000L, active4, 0x40L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x6000800000L, active2, 0x10800000000000L, active3, 0x8100000000000L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800L, active2, 0x1400000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000000000L, active2, 0x10004000c81L, active3, 0x3d000000L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0x20000000002L, active4, 0L);
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 40, 22);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000000L, active2, 0x8000000000000000L, active3, 0x84080L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000000080000L, active2, 0x1000000000100000L, active3, 0L, active4, 0L);
      case 110:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(12, 134, 22);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800200000L, active2, 0L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000008000000L, active1, 0L, active2, 0x40008000000L, active3, 0x4L, active4, 0L);
      case 112:
         if ((active3 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0x80000000000L, active4, 0x10000L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 39, 22);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000000000000020L, active2, 0x20000000008000L, active3, 0L, active4, 0x2000L);
      case 115:
         if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(12, 264, 22);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000000000000L, active2, 0x4000000000L, active3, 0L, active4, 0x8L);
      case 116:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 183, 22);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(12, 197, 22);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(12, 203, 22);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(12, 226, 22);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000000002000L, active2, 0x40000040040000L, active3, 0x3304400040000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x6000000000L, active1, 0L, active2, 0x10020000L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x208000L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 122:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2, active3, active4);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000000L, active1, 0x600004020L, active2, 0x60000000L, active3, 0xc080040800000L, active4, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4000000080000L, active2, 0x1000000000000006L, active3, 0L, active4, 0L);
      case 100:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(13, 162, 22);
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 13;
         }
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(13, 273, 22);
         else if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0xc0000000000L, active2, 0x3002000000000L, active3, 0L, active4, 0x100000L);
      case 101:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 118, 22);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(13, 140, 22);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 148, 22);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 191, 22);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(13, 199, 22);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 249, 22);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000100000000000L, active2, 0x48000L, active3, 0x100100001208000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000L, active1, 0x10000000L, active2, 0xc000008000000L, active3, 0x4000L, active4, 0L);
      case 104:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 182, 22);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x6000800800L, active2, 0x10004000000000L, active3, 0x4000020000000000L, active4, 0x80L);
      case 108:
         if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 230, 22);
         return jjMoveStringLiteralDfa14_0(active0, 0x6000000000L, active1, 0x8000000180000000L, active2, 0x4000000010000101L, active3, 0L, active4, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x600000040000L, active2, 0x4000000L, active3, 0x280010000L, active4, 0L);
      case 110:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(13, 135, 22);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(13, 138, 22);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(13, 139, 22);
         return jjMoveStringLiteralDfa14_0(active0, 0x1040000000000000L, active1, 0x20000000000L, active2, 0L, active3, 0x4000000L, active4, 0x2000400L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x300000000000000L, active1, 0L, active2, 0L, active3, 0x3000000000000000L, active4, 0L);
      case 112:
         if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 250, 22);
         break;
      case 114:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(13, 74, 22);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(13, 150, 22);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(13, 152, 22);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(13, 192, 22);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(13, 200, 22);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 210, 22);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 231, 22);
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L, active1, 0x18000000000L, active2, 0x200000200L, active3, 0L, active4, 0x10800L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 61, 22);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(13, 145, 22);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(13, 193, 22);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(13, 205, 22);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L);
      case 116:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 13;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 116, 22);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 168, 22);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 181, 22);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(13, 219, 22);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(13, 220, 22);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(13, 221, 22);
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L, active1, 0x1860000000L, active2, 0x700800000080000L, active3, 0x800001000180000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0L, active4, 0x4L);
      case 119:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x30L, active3, 0x4L, active4, 0L);
      case 120:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 120, 22);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 124, 22);
         break;
      case 121:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, active2, active3, active4);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0x480000000000000L, active1, 0x18800000000L, active2, 0x2000000206L, active3, 0x1088000L, active4, 0x100000L);
      case 97:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 125, 22);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x601010040000L, active2, 0x1000000000100L, active3, 0x280010000L, active4, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0x20000000000L, active4, 0x2000000L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 60, 22);
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000000000L, active1, 0x600000000L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 127, 22);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(14, 143, 22);
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 14;
         }
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(14, 154, 22);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 184, 22);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0xc0060000000L, active2, 0x4000040200000000L, active3, 0x4L, active4, 0x1004cL);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(14, 27, 22);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L);
      case 104:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 175, 22);
         break;
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0xe000000000031L, active3, 0x1000000000L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L, active4, 0L);
      case 108:
         if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 235, 22);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x100000000800L, active2, 0L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L);
      case 110:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x6000000000L, active2, 0x10000000000000L, active3, 0x4000000L, active4, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x600004000000000L, active3, 0x800000040000000L, active4, 0L);
      case 112:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(14, 146, 22);
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 248, 22);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2000L, active2, 0x60000000L, active3, 0x3000000000000000L, active4, 0L);
      case 114:
         if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 238, 22);
         return jjMoveStringLiteralDfa15_0(active0, 0x300000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 115:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(14, 206, 22);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 236, 22);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000200000L, active4, 0x80L);
      case 116:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 188, 22);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(14, 266, 22);
         return jjMoveStringLiteralDfa15_0(active0, 0x8006000000000L, active1, 0x180000020L, active2, 0x10000000L, active3, 0x4000000000000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4, 0L);
      case 120:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(13, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, active2, active3, active4);
      return 15;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa16_0(active0, 0x348006000000000L, active1, 0x4027060000000L, active2, 0x4000000008000000L, active3, 0x3000000000200000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x180000000L, active2, 0L, active3, 0x4000000008000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0x1000000L, active4, 0L);
      case 101:
         if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(15, 281, 22);
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000000L, active1, 0x600002800L, active2, 0x60000000L, active3, 0x4000000L, active4, 0x8L);
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 180, 22);
         break;
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000800000L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000080000L, active4, 0L);
      case 108:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(15, 129, 22);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(15, 258, 22);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0xc0000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 110:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(15, 132, 22);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(15, 133, 22);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 166, 22);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000000L, active1, 0x4000L, active2, 0L, active3, 0x1000000000L, active4, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4, 0L);
      case 114:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 177, 22);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(15, 194, 22);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 251, 22);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x18000000000L, active2, 0x600000000000000L, active3, 0x10000L, active4, 0L);
      case 115:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(15, 156, 22);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 170, 22);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L, active4, 0x10000L);
      case 116:
         if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(15, 262, 22);
         else if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(15, 263, 22);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x100000000000L, active2, 0x1000000000001L, active3, 0L, active4, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0x40000000L, active4, 0L);
      case 119:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(15, 130, 22);
         break;
      case 120:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 15;
         }
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(15, 223, 22);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x600000000000L, active2, 0xc000000000000L, active3, 0x200000000L, active4, 0L);
      case 121:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(15, 136, 22);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 254, 22);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(14, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1, active2, active3, active4);
      return 16;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x600180002800L, active2, 0x600000000000000L, active3, 0x200100000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000L, active1, 0x118000004000L, active2, 0x2000000000L, active3, 0L, active4, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x4006060000000L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
         if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(16, 267, 22);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x800000000L, active2, 0xd000000000000L, active3, 0L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000000000L, active1, 0x1000000000L, active2, 0L, active3, 0x3000000000000000L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1080000L, active4, 0x2000L);
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 38, 22);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x610000000L, active2, 0L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 110:
         if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 228, 22);
         break;
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000000L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 112:
         if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(16, 259, 22);
         return jjMoveStringLiteralDfa17_0(active0, 0x300000000000000L, active1, 0x20L, active2, 0x4000000000000000L, active3, 0x200000L, active4, 0L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 37, 22);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(16, 218, 22);
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000000000L, active1, 0L, active2, 0x60000000L, active3, 0x8000L, active4, 0L);
      case 115:
         if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 233, 22);
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x200000000L, active3, 0L, active4, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0xc0000000000L, active2, 0L, active3, 0x40000000L, active4, 0L);
      case 120:
         if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 242, 22);
         break;
      case 121:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(16, 128, 22);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L, active4, 0L);
      case 122:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(15, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1, active2, active3, active4);
      return 17;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa18_0(active0, 0x408000000000000L, active1, 0x100000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0xe1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0x80000L, active4, 0L);
      case 100:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 176, 22);
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 17;
         }
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x600000000000L, active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(17, 69, 22);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 243, 22);
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x4006060000000L, active2, 0L, active3, 0x8000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x180000000L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x260000000L, active3, 0x10000L, active4, 0x10000L);
      case 107:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L, active4, 0L);
      case 108:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 185, 22);
         return jjMoveStringLiteralDfa18_0(active0, 0x300000000000000L, active1, 0x800004000L, active2, 0L, active3, 0x200000L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0x200000000L, active4, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x40000000000000L, active1, 0x2000L, active2, 0x4000000000000000L, active3, 0x3000000000000000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 186, 22);
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 115:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(17, 222, 22);
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0x1000000L, active4, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x18610000000L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(16, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1, active2, active3, active4);
      return 18;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0xc0010000000L, active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa19_0(active0, 0x4300000000000000L, active1, 0x780000000L, active2, 0L, active3, 0x308000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 165, 22);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(18, 269, 22);
         else if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(18, 276, 22);
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x618000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x100000000000L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0x200000000L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x4006060000800L, active2, 0x200L, active3, 0L, active4, 0L);
      case 109:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 55, 22);
         break;
      case 110:
         if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(18, 208, 22);
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x260000000L, active3, 0L, active4, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0x3000000000000000L, active4, 0L);
      case 115:
         if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(18, 215, 22);
         break;
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000000000000L, active1, 0x800000000L, active2, 0L, active3, 0x1000000L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(17, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1, active2, active3, active4);
      return 19;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x38600002000L, active2, 0L, active3, 0x3000000001008000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x100800000800L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x180000000L, active2, 0L, active3, 0L, active4, 0L);
      case 100:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(19, 157, 22);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(19, 158, 22);
         break;
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(19, 78, 22);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(19, 137, 22);
         return jjMoveStringLiteralDfa20_0(active0, 0x8000000000000L, active1, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x600000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 109:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 54, 22);
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0xc0000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 110:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(19, 161, 22);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(19, 225, 22);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(19, 272, 22);
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 115:
         if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(19, 211, 22);
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x4007070000000L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa20_0(active0, 0x300000000000000L, active1, 0L, active2, 0L, active3, 0x200000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(18, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1, active2, active3, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x408000000000000L, active1, 0x4046060000000L, active2, 0x8000000000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x38000000000L, active2, 0L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x4300000000000000L, active1, 0L, active2, 0L, active3, 0x200000L);
      case 102:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x80000000000L, active2, 0x8000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000000L);
      case 109:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x600000000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L);
      case 114:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 190, 22);
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000000L);
      case 115:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L);
      case 116:
         if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(20, 212, 22);
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x600180000000L, active2, 0L, active3, 0L);
      case 120:
         if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(20, 216, 22);
         break;
      case 121:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x10000800L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(19, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1, active2, active3, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x4006060000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x600200000000L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x38000000000L, active2, 0L, active3, 0x1000000000000000L);
      case 102:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x400002000L, active2, 0L, active3, 0x2000000000008000L);
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 109:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 51, 22);
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L);
      case 110:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 107, 22);
         break;
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x180000800L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L);
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 21;
         }
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 100, 22);
         return jjMoveStringLiteralDfa22_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0x200000L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 62, 22);
         break;
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 120:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 106, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(20, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, active1, active2, active3, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa23_0(active0, 0x200000000000000L, active1, 0x600000000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(22, 92, 22);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(22, 155, 22);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 179, 22);
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0x1000000000000000L);
      case 103:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x38000000000L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x6060000000L, active2, 0L, active3, 0L);
      case 110:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(22, 75, 22);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(22, 98, 22);
         break;
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 114:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(22, 95, 22);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(22, 96, 22);
         break;
      case 115:
         if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(22, 213, 22);
         break;
      case 120:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(22, 97, 22);
         break;
      case 122:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(21, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, active1, 0L, active3, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x4002020000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x800000000L, active3, 0L);
      case 101:
         if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(23, 207, 22);
         return jjMoveStringLiteralDfa24_0(active0, 0x400000000000000L, active1, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0L, active3, 0x2000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x4040000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x2000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x600000000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x200000000000000L, active1, 0L, active3, 0L);
      case 114:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 108, 22);
         break;
      case 116:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x38000000000L, active3, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, active1, 0L, active3, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0, long old1, long active1, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(22, old0, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, active1, 0L, active3, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa25_0(active0, 0x400000000000000L, active1, 0L, active3, 0x1000000000000000L);
      case 97:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x238000000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x4000000000000L, active3, 0L);
      case 100:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(24, 77, 22);
         break;
      case 105:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x400000000000L, active3, 0L);
      case 110:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(24, 94, 22);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(24, 102, 22);
         break;
      case 114:
         return jjMoveStringLiteralDfa25_0(active0, 0x200000000000000L, active1, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x800000000L, active3, 0x2000000000000000L);
      case 120:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(24, 93, 22);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(24, 101, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0, active1, 0L, active3, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0, long old1, long active1, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(23, old0, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, active1, 0L, active3, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa26_0(active0, 0x200000000000000L, active1, 0x38000000000L, active3, 0x2000000000000000L);
      case 110:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(25, 110, 22);
         break;
      case 111:
         return jjMoveStringLiteralDfa26_0(active0, 0x400000000000000L, active1, 0x800000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x4000000000000L, active3, 0x1000000000000000L);
      case 120:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(25, 109, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, active0, active1, 0L, active3, 0L);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0, long old1, long active1, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(24, old0, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, active1, 0L, active3, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0L, active3, 0x1000000000000000L);
      case 102:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x20000000000L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa27_0(active0, 0x200000000000000L, active1, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x18000000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x4000000000000L, active3, 0L);
      case 114:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(26, 99, 22);
         return jjMoveStringLiteralDfa27_0(active0, 0x400000000000000L, active1, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0L, active3, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, active1, 0L, active3, 0L);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0, long old1, long active1, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(25, old0, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, active1, 0L, active3, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa28_0(active0, 0x400000000000000L, active1, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x28000000000L, active3, 0x1000000000000000L);
      case 101:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0L, active3, 0x2000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x10000000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa28_0(active0, 0x200000000000000L, active1, 0L, active3, 0L);
      case 114:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(27, 114, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(26, active0, active1, 0L, active3, 0L);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0, long old1, long active1, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(26, old0, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, active1, 0L, active3, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa29_0(active0, 0x200000000000000L, active1, 0L, active3, 0x2000000000000000L);
      case 99:
         return jjMoveStringLiteralDfa29_0(active0, 0L, active1, 0x20000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa29_0(active0, 0x400000000000000L, active1, 0L, active3, 0L);
      case 109:
         if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(28, 252, 22);
         break;
      case 110:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(28, 104, 22);
         break;
      case 120:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(28, 103, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(27, active0, active1, 0L, active3, 0L);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0, long old1, long active1, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(27, old0, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, active1, 0L, active3, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa30_0(active0, 0x600000000000000L, active1, 0L, active3, 0L);
      case 109:
         if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(29, 253, 22);
         break;
      case 116:
         return jjMoveStringLiteralDfa30_0(active0, 0L, active1, 0x20000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, active1, 0L, active3, 0L);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0, long old1, long active1, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(28, old0, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, active1, 0L, 0L, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa31_0(active0, 0x200000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa31_0(active0, 0x400000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa31_0(active0, 0L, active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0, active1, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(29, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0, active1, 0L, 0L, 0L);
      return 31;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(31, 57, 22);
         return jjMoveStringLiteralDfa32_0(active0, 0x400000000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(31, 105, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(30, active0, active1, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(30, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0, 0L, 0L, 0L, 0L);
      return 32;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa33_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0, 0L, 0L, 0L, 0L);
      return 33;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa34_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0, 0L, 0L, 0L, 0L);
      return 34;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa35_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0, 0L, 0L, 0L, 0L);
      return 35;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa36_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0, 0L, 0L, 0L, 0L);
      return 36;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa37_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0, 0L, 0L, 0L, 0L);
      return 37;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa38_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(36, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(36, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, active0, 0L, 0L, 0L, 0L);
      return 38;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa39_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(37, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(37, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, active0, 0L, 0L, 0L, 0L);
      return 39;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa40_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(38, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(38, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, active0, 0L, 0L, 0L, 0L);
      return 40;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa41_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(39, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(39, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, active0, 0L, 0L, 0L, 0L);
      return 41;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa42_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(40, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(40, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, active0, 0L, 0L, 0L, 0L);
      return 42;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa43_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(41, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa43_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(41, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, active0, 0L, 0L, 0L, 0L);
      return 43;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa44_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(42, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa44_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(42, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, active0, 0L, 0L, 0L, 0L);
      return 44;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa45_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(43, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa45_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(43, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(44, active0, 0L, 0L, 0L, 0L);
      return 45;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa46_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(44, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa46_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(44, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(45, active0, 0L, 0L, 0L, 0L);
      return 46;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa47_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(45, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa47_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(45, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(46, active0, 0L, 0L, 0L, 0L);
      return 47;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa48_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(46, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa48_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(46, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(47, active0, 0L, 0L, 0L, 0L);
      return 48;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa49_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(47, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa49_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(47, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(48, active0, 0L, 0L, 0L, 0L);
      return 49;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(49, 58, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(48, active0, 0L, 0L, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 38;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
               case 22:
                  if ((0x3ffe02000000000L & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(22);
                  break;
               case 9:
                  if ((0x3ffe02000000000L & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(22);
                  break;
               case 27:
                  if ((0x3ffe02000000000L & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(22);
                  break;
               case 0:
                  if ((0x3ff400000000000L & l) != 0L)
                  {
                     if (kind > 294)
                        kind = 294;
                     jjCheckNAddTwoStates(18, 19);
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 20;
                  if ((0xe02000000000L & l) != 0L)
                  {
                     if (kind > 295)
                        kind = 295;
                     jjCheckNAdd(22);
                  }
                  break;
               case 29:
                  if ((0x3ffe02000000000L & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(22);
                  break;
               case 10:
                  if ((0x3ffe02000000000L & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(22);
                  break;
               case 26:
                  if ((0x3ffe02000000000L & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(22);
                  break;
               case 30:
                  if ((0x3ffe02000000000L & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(22);
                  break;
               case 18:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 294)
                     kind = 294;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 294)
                     kind = 294;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 21:
                  if ((0xe02000000000L & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(22);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjstateSet[jjnewStateCnt++] = 32;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 295)
                        kind = 295;
                     jjCheckNAdd(22);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 34;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 295)
                        kind = 295;
                     jjCheckNAdd(22);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 295)
                        kind = 295;
                     jjCheckNAdd(22);
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 33;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 295)
                        kind = 295;
                     jjCheckNAdd(22);
                  }
                  if ((0x8000000080L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if ((0x100000001000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if ((0x1000000010000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if ((0x4000000040L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if ((0x400000004L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  else if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 10;
                  if (curChar == 103)
                     jjAddStates(0, 1);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 295)
                        kind = 295;
                     jjCheckNAdd(22);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 35;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 295)
                        kind = 295;
                     jjCheckNAdd(22);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 295)
                        kind = 295;
                     jjCheckNAdd(22);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 295)
                        kind = 295;
                     jjCheckNAdd(22);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 36;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 1:
                  if ((0x4000000040L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if ((0x1000000010000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if ((0x100000001000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 4:
                  if ((0x8000000080L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 5:
                  if (curChar == 101 && kind > 11)
                     kind = 11;
                  break;
               case 6:
               case 12:
                  if (curChar == 101)
                     jjCheckNAdd(5);
                  break;
               case 7:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if (curChar == 103)
                     jjAddStates(0, 1);
                  break;
               case 24:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 31:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 33:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   30, 37, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, 
"\147\157\141\154\151\145", null, "\163\145\154\146", "\166\151\145\167\137\155\157\144\145", 
"\150\151\147\150", "\154\157\167", "\167\151\144\145", "\156\141\162\162\157\167", 
"\156\157\162\155\141\154", "\163\164\141\155\151\156\141", "\163\160\145\145\144", 
"\150\145\141\144\137\141\156\147\154\145", "\153\151\143\153", "\144\141\163\150", "\164\165\162\156", "\163\141\171", 
"\164\165\162\156\137\156\145\143\153", "\142\145\146\157\162\145\137\153\151\143\153\137\157\146\146", 
"\164\151\155\145\137\157\166\145\162", "\160\154\141\171\137\157\156", "\144\162\157\160\137\142\141\154\154", 
"\153\151\143\153\137\157\146\146\137\154", "\153\151\143\153\137\157\146\146\137\162", 
"\153\151\143\153\137\151\156\137\154", "\153\151\143\153\137\151\156\137\162", 
"\146\162\145\145\137\153\151\143\153\137\162", "\146\162\145\145\137\153\151\143\153\137\154", 
"\146\162\145\145\137\153\151\143\153\137\146\141\165\154\164\137\162", "\146\162\145\145\137\153\151\143\153\137\146\141\165\154\164\137\154", 
"\143\157\162\156\145\162\137\153\151\143\153\137\162", "\143\157\162\156\145\162\137\153\151\143\153\137\154", 
"\147\157\141\154\137\153\151\143\153\137\162", "\147\157\141\154\137\153\151\143\153\137\154", null, null, 
"\146\157\165\154\137\162", "\146\157\165\154\137\154", "\157\146\146\163\151\144\145\137\162", 
"\157\146\146\163\151\144\145\137\154", "\150\141\154\146\137\164\151\155\145", "\164\151\155\145\137\165\160", 
"\164\151\155\145\137\165\160\137\167\151\164\150\157\165\164\137\141\137\164\145\141\155", "\164\151\155\145\137\145\170\164\145\156\144\145\144", 
"\151\154\154\145\147\141\154\137\155\157\144\145", 
"\151\154\154\145\147\141\154\137\143\157\155\155\141\156\144\137\146\157\162\155", 
"\151\154\154\145\147\141\154\137\157\142\152\145\143\164\137\146\157\162\155", 
"\156\157\137\155\157\162\145\137\164\145\141\155\137\157\162\137\160\154\141\171\145\162", 
"\156\157\137\155\157\162\145\137\164\145\141\155\137\157\162\137\160\154\141\171\145\162\137\157\162\137\147\157\141\154\151\145", 
"\156\157\137\155\157\162\145\137\160\154\141\171\145\162\137\157\162\137\147\157\141\154\151\145\137\157\162\137\151\154\154\145\147\141\154\137\143\154\151\145\156\164\137\166\145\162\163\151\157\156", "\162\145\143\157\156\156\145\143\164", 
"\165\156\153\156\157\167\156\137\143\157\155\155\141\156\144", "\164\157\157\137\155\141\156\171\137\155\157\166\145\163", 
"\163\141\151\144\137\164\157\157\137\155\141\156\171\137\155\145\163\163\141\147\145\163", "\155\157\166\145", "\143\150\141\156\147\145\137\155\157\144\145", 
"\143\150\145\143\153\137\142\141\154\154", "\163\164\141\162\164", "\162\145\143\157\166\145\162", "\145\141\162", 
"\143\150\141\156\147\145\137\160\154\141\171\145\162\137\164\171\160\145", "\154\157\157\153", "\164\145\141\155\137\156\141\155\145\163", 
"\164\145\141\155\137\147\162\141\160\150\151\143", "\156\157\137\164\145\141\155\137\146\157\165\156\144", 
"\156\157\137\163\165\143\150\137\160\154\141\171\145\162", 
"\143\141\156\156\157\164\137\163\165\142\137\167\150\151\154\145\137\160\154\141\171\157\156", "\156\157\137\163\165\142\163\137\154\145\146\164", 
"\155\141\170\137\157\146\137\164\150\141\164\137\164\171\160\145\137\157\156\137\146\151\145\154\144", 
"\143\141\156\156\157\164\137\143\150\141\156\147\145\137\147\157\141\154\151\145", "\143\150\141\156\147\145\137\166\151\145\167", "\143\141\164\143\150", 
"\151\144", "\160\154\141\171\145\162\137\163\160\145\145\144\137\155\141\170", 
"\163\164\141\155\151\156\141\137\151\156\143\137\155\141\170", "\160\154\141\171\145\162\137\144\145\143\141\171", 
"\151\156\145\162\164\151\141\137\155\157\155\145\156\164", "\160\154\141\171\145\162\137\163\151\172\145", 
"\153\151\143\153\141\142\154\145\137\155\141\162\147\151\156", "\153\151\143\153\137\162\141\156\144", 
"\145\170\164\162\141\137\163\164\141\155\151\156\141", "\145\146\146\157\162\164\137\155\141\170", 
"\145\146\146\157\162\164\137\155\151\156", 
"\141\154\154\157\167\137\155\165\154\164\137\144\145\146\141\165\154\164\137\164\171\160\145", 
"\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145\137\144\145\154\164\141\137\155\141\170", 
"\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145\137\144\145\154\164\141\137\155\151\156", 
"\145\146\146\157\162\164\137\155\141\170\137\144\145\154\164\141\137\146\141\143\164\157\162", 
"\145\146\146\157\162\164\137\155\151\156\137\144\145\154\164\141\137\146\141\143\164\157\162", 
"\145\170\164\162\141\137\163\164\141\155\151\156\141\137\144\145\154\164\141\137\155\141\170", 
"\145\170\164\162\141\137\163\164\141\155\151\156\141\137\144\145\154\164\141\137\155\151\156", 
"\151\156\145\162\164\151\141\137\155\157\155\145\156\164\137\144\145\154\164\141\137\146\141\143\164\157\162", 
"\153\151\143\153\137\162\141\156\144\137\144\145\154\164\141\137\146\141\143\164\157\162", 
"\153\151\143\153\141\142\154\145\137\155\141\162\147\151\156\137\144\145\154\164\141\137\155\141\170", 
"\153\151\143\153\141\142\154\145\137\155\141\162\147\151\156\137\144\145\154\164\141\137\155\151\156", 
"\156\145\167\137\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145\137\144\145\154\164\141\137\155\141\170", 
"\156\145\167\137\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145\137\144\145\154\164\141\137\155\151\156", 
"\156\145\167\137\163\164\141\155\151\156\141\137\151\156\143\137\155\141\170\137\144\145\154\164\141\137\146\141\143\164\157\162", 
"\160\154\141\171\145\162\137\144\145\143\141\171\137\144\145\154\164\141\137\155\141\170", 
"\160\154\141\171\145\162\137\144\145\143\141\171\137\144\145\154\164\141\137\155\151\156", 
"\160\154\141\171\145\162\137\163\151\172\145\137\144\145\154\164\141\137\146\141\143\164\157\162", 
"\160\154\141\171\145\162\137\163\160\145\145\144\137\155\141\170\137\144\145\154\164\141\137\155\141\170", 
"\160\154\141\171\145\162\137\163\160\145\145\144\137\155\141\170\137\144\145\154\164\141\137\155\151\156", "\160\154\141\171\145\162\137\164\171\160\145\163", 
"\160\164\137\155\141\170", "\162\141\156\144\157\155\137\163\145\145\144", 
"\163\164\141\155\151\156\141\137\151\156\143\137\155\141\170\137\144\145\154\164\141\137\146\141\143\164\157\162", "\163\165\142\163\137\155\141\170", 
"\141\165\144\151\157\137\143\165\164\137\144\151\163\164", "\141\165\164\157\137\155\157\144\145", 
"\142\141\143\153\137\144\141\163\150\137\162\141\164\145", "\142\141\143\153\137\160\141\163\163\145\163", 
"\142\141\154\154\137\141\143\143\145\154\137\155\141\170", "\142\141\154\154\137\144\145\143\141\171", 
"\142\141\154\154\137\162\141\156\144", "\142\141\154\154\137\163\151\172\145", 
"\142\141\154\154\137\163\160\145\145\144\137\155\141\170", "\142\141\154\154\137\163\164\165\143\153\137\141\162\145\141", 
"\142\141\154\154\137\167\145\151\147\150\164", "\143\141\164\143\150\137\142\141\156\137\143\171\143\154\145", 
"\143\141\164\143\150\137\160\162\157\142\141\142\151\154\151\164\171", "\143\141\164\143\150\141\142\154\145\137\141\162\145\141\137\154", 
"\143\141\164\143\150\141\142\154\145\137\141\162\145\141\137\167", "\143\153\151\143\153\137\155\141\162\147\151\156", 
"\143\154\141\156\147\137\141\144\166\151\143\145\137\167\151\156", "\143\154\141\156\147\137\144\145\146\151\156\145\137\167\151\156", 
"\143\154\141\156\147\137\144\145\154\137\167\151\156", "\143\154\141\156\147\137\151\156\146\157\137\167\151\156", 
"\143\154\141\156\147\137\155\145\163\163\137\144\145\154\141\171", 
"\143\154\141\156\147\137\155\145\163\163\137\160\145\162\137\143\171\143\154\145", "\143\154\141\156\147\137\155\145\164\141\137\167\151\156", 
"\143\154\141\156\147\137\162\165\154\145\137\167\151\156", "\143\154\141\156\147\137\167\151\156\137\163\151\172\145", 
"\143\157\141\143\150", "\143\157\141\143\150\137\160\157\162\164", 
"\143\157\141\143\150\137\167\137\162\145\146\145\162\145\145", "\143\157\156\156\145\143\164\137\167\141\151\164", 
"\143\157\156\164\162\157\154\137\162\141\144\151\165\163", "\144\141\163\150\137\141\156\147\154\145\137\163\164\145\160", 
"\144\141\163\150\137\160\157\167\145\162\137\162\141\164\145", "\144\162\157\160\137\142\141\154\154\137\164\151\155\145", 
"\145\146\146\157\162\164\137\144\145\143", "\145\146\146\157\162\164\137\144\145\143\137\164\150\162", 
"\145\146\146\157\162\164\137\151\156\143", "\145\146\146\157\162\164\137\151\156\143\137\164\150\162", 
"\145\146\146\157\162\164\137\151\156\151\164", "\145\170\164\162\141\137\150\141\154\146\137\164\151\155\145", 
"\146\157\162\142\151\144\137\153\151\143\153\137\157\146\146\137\157\146\146\163\151\144\145", "\146\162\145\145\137\153\151\143\153\137\146\141\165\154\164\163", 
"\146\162\145\145\146\157\162\155\137\163\145\156\144\137\160\145\162\151\157\144", 
"\146\162\145\145\146\157\162\155\137\167\141\151\164\137\160\145\162\151\157\144", "\146\165\154\154\163\164\141\164\145\137\154", 
"\146\165\154\154\163\164\141\164\145\137\162", 
"\147\141\155\145\137\154\157\147\137\143\157\155\160\162\145\163\163\151\157\156", "\147\141\155\145\137\154\157\147\137\144\141\164\145\144", 
"\147\141\155\145\137\154\157\147\137\144\151\162", "\147\141\155\145\137\154\157\147\137\146\151\170\145\144", 
"\147\141\155\145\137\154\157\147\137\146\151\170\145\144\137\156\141\155\145", "\147\141\155\145\137\154\157\147\137\166\145\162\163\151\157\156", 
"\147\141\155\145\137\154\157\147\147\151\156\147", "\147\141\155\145\137\157\166\145\162\137\167\141\151\164", 
"\147\157\141\154\137\167\151\144\164\150", "\147\157\141\154\151\145\137\155\141\170\137\155\157\166\145\163", 
"\150\145\141\162\137\144\145\143\141\171", "\150\145\141\162\137\151\156\143", "\150\145\141\162\137\155\141\170", 
"\153\145\145\160\141\167\141\171", "\153\145\145\160\141\167\141\171\137\154\145\156\147\164\150", 
"\153\145\145\160\141\167\141\171\137\154\157\147\137\144\141\164\145\144", "\153\145\145\160\141\167\141\171\137\154\157\147\137\144\151\162", 
"\153\145\145\160\141\167\141\171\137\154\157\147\137\146\151\170\145\144", 
"\153\145\145\160\141\167\141\171\137\154\157\147\137\146\151\170\145\144\137\156\141\155\145", "\153\145\145\160\141\167\141\171\137\154\157\147\147\151\156\147", 
"\153\145\145\160\141\167\141\171\137\163\164\141\162\164", "\153\145\145\160\141\167\141\171\137\167\151\144\164\150", 
"\153\151\143\153\137\157\146\146\137\167\141\151\164", "\153\151\143\153\137\160\157\167\145\162\137\162\141\164\145", 
"\153\151\143\153\137\162\141\156\144\137\146\141\143\164\157\162\137\154", "\153\151\143\153\137\162\141\156\144\137\146\141\143\164\157\162\137\162", 
"\154\141\156\144\155\141\162\153\137\146\151\154\145", "\154\157\147\137\144\141\164\145\137\146\157\162\155\141\164", 
"\154\157\147\137\164\151\155\145\163", 
"\155\141\170\137\142\141\143\153\137\164\141\143\153\154\145\137\160\157\167\145\162", "\155\141\170\137\144\141\163\150\137\141\156\147\154\145", 
"\155\141\170\137\144\141\163\150\137\160\157\167\145\162", "\155\141\170\137\147\157\141\154\137\153\151\143\153\163", 
"\155\141\170\137\164\141\143\153\154\145\137\160\157\167\145\162", "\155\141\170\155\157\155\145\156\164", 
"\155\141\170\156\145\143\153\141\156\147", "\155\141\170\156\145\143\153\155\157\155\145\156\164", 
"\155\141\170\160\157\167\145\162", "\155\151\156\137\144\141\163\150\137\141\156\147\154\145", 
"\155\151\156\137\144\141\163\150\137\160\157\167\145\162", "\155\151\156\155\157\155\145\156\164", 
"\155\151\156\156\145\143\153\141\156\147", "\155\151\156\156\145\143\153\155\157\155\145\156\164", 
"\155\151\156\160\157\167\145\162", "\156\162\137\145\170\164\162\141\137\150\141\154\146\163", 
"\156\162\137\156\157\162\155\141\154\137\150\141\154\146\163", 
"\157\146\146\163\151\144\145\137\141\143\164\151\166\145\137\141\162\145\141\137\163\151\172\145", 
"\157\146\146\163\151\144\145\137\153\151\143\153\137\155\141\162\147\151\156", "\157\154\143\157\141\143\150\137\160\157\162\164", 
"\157\154\144\137\143\157\141\143\150\137\150\145\141\162", 
"\160\145\156\137\141\154\154\157\167\137\155\165\154\164\137\153\151\143\153\163", 
"\160\145\156\137\142\145\146\157\162\145\137\163\145\164\165\160\137\167\141\151\164", 
"\160\145\156\137\143\157\141\143\150\137\155\157\166\145\163\137\160\154\141\171\145\162\163", "\160\145\156\137\144\151\163\164\137\170", 
"\160\145\156\137\155\141\170\137\145\170\164\162\141\137\153\151\143\153\163", 
"\160\145\156\137\155\141\170\137\147\157\141\154\151\145\137\144\151\163\164\137\170", "\160\145\156\137\156\162\137\153\151\143\153\163", 
"\160\145\156\137\162\141\156\144\157\155\137\167\151\156\156\145\162", "\160\145\156\137\162\145\141\144\171\137\167\141\151\164", 
"\160\145\156\137\163\145\164\165\160\137\167\141\151\164", "\160\145\156\137\164\141\153\145\156\137\167\141\151\164", 
"\160\145\156\141\154\164\171\137\163\150\157\157\164\137\157\165\164\163", "\160\154\141\171\145\162\137\141\143\143\145\154\137\155\141\170", 
"\160\154\141\171\145\162\137\162\141\156\144", 
"\160\154\141\171\145\162\137\163\160\145\145\144\137\155\141\170\137\155\151\156", "\160\154\141\171\145\162\137\167\145\151\147\150\164", 
"\160\157\151\156\164\137\164\157\137\142\141\156", "\160\157\151\156\164\137\164\157\137\144\165\162\141\164\151\157\156", 
"\160\157\162\164", "\160\162\141\156\144\137\146\141\143\164\157\162\137\154", 
"\160\162\141\156\144\137\146\141\143\164\157\162\137\162", "\160\162\157\146\151\154\145", 
"\160\162\157\160\145\162\137\147\157\141\154\137\153\151\143\153\163", "\161\165\141\156\164\151\172\145\137\163\164\145\160", 
"\161\165\141\156\164\151\172\145\137\163\164\145\160\137\154", "\162\145\143\157\162\144\137\155\145\163\163\141\147\145\163", 
"\162\145\143\157\166\145\162\137\144\145\143", "\162\145\143\157\166\145\162\137\144\145\143\137\164\150\162", 
"\162\145\143\157\166\145\162\137\151\156\151\164", "\162\145\143\157\166\145\162\137\155\151\156", 
"\162\145\143\166\137\163\164\145\160", "\163\141\171\137\143\157\141\143\150\137\143\156\164\137\155\141\170", 
"\163\141\171\137\143\157\141\143\150\137\155\163\147\137\163\151\172\145", "\163\141\171\137\155\163\147\137\163\151\172\145", 
"\163\145\156\144\137\143\157\155\155\163", "\163\145\156\144\137\163\164\145\160", 
"\163\145\156\144\137\166\151\137\163\164\145\160", "\163\145\156\163\145\137\142\157\144\171\137\163\164\145\160", 
"\163\151\144\145\137\144\141\163\150\137\162\141\164\145", "\163\151\155\165\154\141\164\157\162\137\163\164\145\160", 
"\163\154\157\167\137\144\157\167\156\137\146\141\143\164\157\162", 
"\163\154\157\167\156\145\163\163\137\157\156\137\164\157\160\137\146\157\162\137\154\145\146\164\137\164\145\141\155", 
"\163\154\157\167\156\145\163\163\137\157\156\137\164\157\160\137\146\157\162\137\162\151\147\150\164\137\164\145\141\155", "\163\164\141\155\151\156\141\137\143\141\160\141\143\151\164\171", 
"\163\164\141\155\151\156\141\137\155\141\170", "\163\164\141\162\164\137\147\157\141\154\137\154", 
"\163\164\141\162\164\137\147\157\141\154\137\162", "\163\164\157\160\160\145\144\137\142\141\154\154\137\166\145\154", 
"\163\171\156\143\150\137\155\151\143\162\157\137\163\154\145\145\160", "\163\171\156\143\150\137\155\157\144\145", 
"\163\171\156\143\150\137\157\146\146\163\145\164", "\163\171\156\143\150\137\163\145\145\137\157\146\146\163\145\164", 
"\164\141\143\153\154\145\137\142\141\143\153\137\144\151\163\164", "\164\141\143\153\154\145\137\143\171\143\154\145\163", 
"\164\141\143\153\154\145\137\144\151\163\164", "\164\141\143\153\154\145\137\145\170\160\157\156\145\156\164", 
"\164\141\143\153\154\145\137\160\157\167\145\162\137\162\141\164\145", "\164\141\143\153\154\145\137\167\151\144\164\150", 
"\164\145\141\155\137\141\143\164\165\141\164\157\162\137\156\157\151\163\145", "\164\145\141\155\137\154\137\163\164\141\162\164", 
"\164\145\141\155\137\162\137\163\164\141\162\164", 
"\164\145\170\164\137\154\157\147\137\143\157\155\160\162\145\163\163\151\157\156", "\164\145\170\164\137\154\157\147\137\144\141\164\145\144", 
"\164\145\170\164\137\154\157\147\137\144\151\162", "\164\145\170\164\137\154\157\147\137\146\151\170\145\144", 
"\164\145\170\164\137\154\157\147\137\146\151\170\145\144\137\156\141\155\145", "\164\145\170\164\137\154\157\147\147\151\156\147", 
"\165\163\145\137\157\146\146\163\151\144\145", "\166\145\162\142\157\163\145", 
"\166\151\163\151\142\154\145\137\141\156\147\154\145", "\166\151\163\151\142\154\145\137\144\151\163\164\141\156\143\145", 
"\167\151\156\144\137\141\156\147", "\167\151\156\144\137\144\151\162", 
"\167\151\156\144\137\146\157\162\143\145", "\167\151\156\144\137\156\157\156\145", 
"\167\151\156\144\137\162\141\156\144", "\167\151\156\144\137\162\141\156\144\157\155", "\143", "\164", "\162", "\50", 
"\51", "\40", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[38];
private final int[] jjstateSet = new int[76];
protected char curChar;
/** Constructor. */
public CmdParserPlayerTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CmdParserPlayerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 38; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 34 && (0x400002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
