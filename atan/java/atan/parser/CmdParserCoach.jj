options {
  STATIC = false;
  LOOKAHEAD = 2;
//  FORCE_LA_CHECK = false;
}
PARSER_BEGIN(CmdParserCoach)
package atan.parser.coach;

//~--- non-JDK imports --------------------------------------------------------

import atan.model.enums.Errors;
import atan.model.enums.Ok;
import atan.model.enums.PlayMode;
import atan.model.enums.RefereeMessage;
import atan.model.enums.Warning;

import atan.model.ActionsCoach;
import atan.model.ControllerCoach;

//~--- JDK imports ------------------------------------------------------------

import java.io.StringReader;

  public class CmdParserCoach {

    ControllerCoach controller;
    ActionsCoach coach;

    public void parseSeeCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
			ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startSeeCommand();
    }
    public void parseOkCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          	ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startOkCommand();
    }
    public void parseErrorCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
			ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startErrorCommand();
    }
    public void parseWarningCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startWarningCommand();
    }
    public void parseInitCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startInitCommand();
    }
    public void parseChangePlayerTypeCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startCPTCommand();
    }
    public void parseServerParamCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startServerParamCommand();
    }
    public void parsePlayerParamCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startPlayerParamCommand();
    }
    public void parsePlayerTypeCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startPlayerTypeCommand();
    }
    public void parseHearCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startHearCommand();
    }
}
PARSER_END(CmdParserCoach)

SKIP: {
  "\t"|"\n"|"\r"|"\""
}
TOKEN :
{
  < B: "b"|"B">|
  < FLAG: "f"|"F">|
  < P: "p"|"P">|
  < L: "l"|"L">|
  < GOAL: "g"|"G">|
  < GOALIE: "goalie">|
  < REFEREE: "referee"|"Referee">|
  < SELF: "self">|
  < VIEW_MODE: "view_mode">|
  < HIGH: "high">|
  < LOW: "low">|
  < WIDE: "wide">|
  < NARROW: "narrow">|
  < NORMAL: "normal">|
  < STAMINA: "stamina">|
  < SPEED: "speed">|
  < HEAD_ANGLE: "head_angle">|
  < KICK: "kick">|
  < DASH: "dash">|
  < TURN: "turn">|
  < SAY: "say">|
  < TURN_NECK: "turn_neck">|
  < BEFORE_KICK_OFF: "before_kick_off">|
  < TIME_OVER: "time_over">|
  < PLAY_ON: "play_on">|
  < DROP_BALL: "drop_ball">|
  < KICK_OFF_L: "kick_off_l">|
  < KICK_OFF_R: "kick_off_r">|
  < KICK_IN_L: "kick_in_l">|
  < KICK_IN_R: "kick_in_r">|
  < FREE_KICK_R: "free_kick_r">|
  < FREE_KICK_L: "free_kick_l">|
  < FREE_KICK_FAULT_R: "free_kick_fault_r">|
  < FREE_KICK_FAULT_L: "free_kick_fault_l">|
  < CORNER_KICK_R: "corner_kick_r">|
  < CORNER_KICK_L: "corner_kick_l">|
  < GOAL_KICK_R: "goal_kick_r">|
  < GOAL_KICK_L: "goal_kick_l">|
  < GOAL_R: "goal_r_"(["0"-"9"])+>|
  < GOAL_L: "goal_l_"(["0"-"9"])+>|
  < FOUL_R: "foul_r">|
  < FOUL_L: "foul_l">|
  < OFFSIDE_R: "offside_r">|
  < OFFSIDE_L: "offside_l">|
  < HALF_TIME: "half_time">|
  < TIME_UP: "time_up">|
  < TIME_UP_WITHOUT_A_TEAM: "time_up_without_a_team">|
  < TIME_EXTENDED: "time_extended">|
  < ILLEGAL_MODE: "illegal_mode">|
  < ILLEGAL_COMMAND_FORM: "illegal_command_form">|
  < ILLEGAL_OBJECT_FORM: "illegal_object_form">|
  < NO_MORE_TEAM_OR_PLAYER: "no_more_team_or_player">|
  < NO_MORE_TEAM_OR_PLAYER_OR_GOALIE: "no_more_team_or_player_or_goalie">|
  < NO_MORE_PLAYER_OR_GOALIE_OR_ILLEGAL_CLIENT_VERSION: "no_more_player_or_goalie_or_illegal_client_version">|	
  < RECONNECT: "reconnect">|
  < UNKNOWN_COMMAND: "unknown_command">|
  < TOO_MANY_MOVES: "too_many_moves">|
  < SAID_TOO_MANY_MESSAGES: "said_too_many_messages">|
  < MOVE: "move">|
  < CHANGE_MODE: "change_mode">|
  < CHECK_BALL: "check_ball">|
  < START: "start">|
  < RECOVER: "recover">|
  < EAR: "ear">|
  < CHANGE_PLAYER_TYPE: "change_player_type">|
  < LOOK: "look">|
  < TEAM_NAMES: "team_names">|
  < TEAM_GRAPHIC: "team_graphic">|
  < NO_TEAM_FOUND: "no_team_found">|
  < NO_SUCH_PLAYER: "no_such_player">|
  < CANNOT_SUB_WHILE_PLAYON: "cannot_sub_while_playon">|
  < NO_SUBS_LEFT: "no_subs_left">|
  < MAX_OF_THAT_TYPE_ON_FIELD: "max_of_that_type_on_field">|
  < CANNOT_CHANGE_GOALIE: "cannot_change_goalie">|
  < CHANGE_VIEW: "change_view">|
  < CATCH: "catch">|
  < ID: "id" >|
  < PLAYER_SPEED_MAX: "player_speed_max" >|
  < STAMINA_INC_MAX: "stamina_inc_max" >|
  < PLAYER_DECAY: "player_decay" >|
  < INERTIA_MOMENT: "inertia_moment" >|
  < DASH_POWER_RATE: "dash_power_rate" >|
  < PLAYER_SIZE: "player_size" >|
  < KICKABLE_MARGIN: "kickable_margin" >|
  < KICK_RAND: "kick_rand" >|
  < EXTRA_STAMINA: "extra_stamina" >|
  < EFFORT_MAX: "effort_max" >|
  < EFFORT_MIN: "effort_min" >|
  < ALLOW_MULT_DEFAULT_TYPE: "allow_mult_default_type" >|
  < DASH_POWER_RATE_DELTA_MAX: "dash_power_rate_delta_max" >|
  < DASH_POWER_RATE_DELTA_MIN: "dash_power_rate_delta_min" >|
  < EFFORT_MAX_DELTA_FACTOR: "effort_max_delta_factor" >|
  < EFFORT_MIN_DELTA_FACTOR: "effort_min_delta_factor" >|
  < EXTRA_STAMINA_DELTA_MAX: "extra_stamina_delta_max" >|
  < EXTRA_STAMINA_DELTA_MIN: "extra_stamina_delta_min" >|
  < INERTIA_MOMENT_DELTA_FACTOR: "inertia_moment_delta_factor" >|
  < KICK_RAND_DELTA_FACTOR: "kick_rand_delta_factor" >|
  < KICKABLE_MARGIN_DELTA_MAX: "kickable_margin_delta_max" >|
  < KICKABLE_MARGIN_DELTA_MIN: "kickable_margin_delta_min" >|
  < NEW_DASH_POWER_RATE_DELTA_MAX: "new_dash_power_rate_delta_max" >|
  < NEW_DASH_POWER_RATE_DELTA_MIN: "new_dash_power_rate_delta_min" >|
  < NEW_STAMINA_INC_MAX_DELTA_FACTOR: "new_stamina_inc_max_delta_factor" >|
  < PLAYER_DECAY_DELTA_MAX: "player_decay_delta_max" >|
  < PLAYER_DECAY_DELTA_MIN: "player_decay_delta_min" >|
  < PLAYER_SIZE_DELTA_FACTOR: "player_size_delta_factor" >|
  < PLAYER_SPEED_MAX_DELTA_MAX: "player_speed_max_delta_max" >|
  < PLAYER_SPEED_MAX_DELTA_MIN: "player_speed_max_delta_min" >|
  < PLAYER_TYPES: "player_types" >|
  < PT_MAX: "pt_max" >|
  < RANDOM_SEED: "random_seed" >|
  < STAMINA_INC_MAX_DELTA_FACTOR: "stamina_inc_max_delta_factor" >|
  < SUBS_MAX: "subs_max" >|
  < C: "c">|
  < T: "t">|
  < R: "r">|
  < OB: "(">|
  < CB: ")">|
  < SEP: " ">|
  < NAM: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >|
  < NUM: ( ["0"-"9"]|"."|"-" )+ >
}

//The see_global command.
void startSeeCommand() : 
    {}{{}}

//Param & type commands.
void startCPTCommand() :
    {}{{}}

void startServerParamCommand() :
    {}{{}}

void startPlayerParamCommand() :
    {Token allowMultDefaultType=null; Token dashPowerRateDeltaMax=null;
     Token dashPowerRateDeltaMin=null; Token effortMaxDeltaFactor=null;
     Token effortMinDeltaFactor=null; Token extraStaminaDeltaMax=null;
     Token extraStaminaDeltaMin=null; Token inertiaMomentDeltaFactor=null;
     Token kickRandDeltaFactor=null; Token kickableMarginDeltaMax=null;
     Token kickableMarginDeltaMin=null; Token newDashPowerRateDeltaMax=null;
     Token newDashPowerRateDeltaMin=null; Token newStaminaIncMaxDeltaFactor=null;
     Token playerDecayDeltaMax=null; Token playerDecayDeltaMin=null;
     Token playerSizeDeltaFactor=null; Token playerSpeedMaxDeltaMax=null;
     Token playerSpeedMaxDeltaMin=null; Token playerTypes=null; Token ptMax=null;
     Token randomSeed=null; Token staminaIncMaxDeltaFactor=null; Token subsMax=null;}
     {
       < OB ><ALLOW_MULT_DEFAULT_TYPE ><SEP >allowMultDefaultType=< NUM ><CB >
       < OB ><DASH_POWER_RATE_DELTA_MAX ><SEP >dashPowerRateDeltaMax=< NUM ><CB >
       < OB ><DASH_POWER_RATE_DELTA_MIN ><SEP >dashPowerRateDeltaMin=< NUM ><CB >
       < OB ><EFFORT_MAX_DELTA_FACTOR ><SEP >effortMaxDeltaFactor=< NUM ><CB >
       < OB ><EFFORT_MIN_DELTA_FACTOR ><SEP >effortMinDeltaFactor=< NUM ><CB >
       < OB ><EXTRA_STAMINA_DELTA_MAX ><SEP >extraStaminaDeltaMax=< NUM ><CB >
       < OB ><EXTRA_STAMINA_DELTA_MIN ><SEP >extraStaminaDeltaMin=< NUM ><CB >
       < OB ><INERTIA_MOMENT_DELTA_FACTOR ><SEP >inertiaMomentDeltaFactor=< NUM ><CB >
       < OB ><KICK_RAND_DELTA_FACTOR ><SEP >kickRandDeltaFactor=< NUM ><CB >
       < OB ><KICKABLE_MARGIN_DELTA_MAX ><SEP >kickableMarginDeltaMax=< NUM ><CB >
       < OB ><KICKABLE_MARGIN_DELTA_MIN ><SEP >kickableMarginDeltaMin=< NUM ><CB >
       < OB ><NEW_DASH_POWER_RATE_DELTA_MAX ><SEP >newDashPowerRateDeltaMax=< NUM ><CB >
	   < OB ><NEW_DASH_POWER_RATE_DELTA_MIN ><SEP >newDashPowerRateDeltaMin=< NUM ><CB >
	   < OB ><NEW_STAMINA_INC_MAX_DELTA_FACTOR ><SEP >newStaminaIncMaxDeltaFactor=< NUM ><CB >
	   < OB ><PLAYER_DECAY_DELTA_MAX ><SEP >playerDecayDeltaMax=< NUM ><CB >
	   < OB ><PLAYER_DECAY_DELTA_MIN ><SEP >playerDecayDeltaMin=< NUM ><CB >
	   < OB ><PLAYER_SIZE_DELTA_FACTOR ><SEP >playerSizeDeltaFactor=< NUM ><CB >
	   < OB ><PLAYER_SPEED_MAX_DELTA_MAX ><SEP >playerSpeedMaxDeltaMax=< NUM ><CB >
	   < OB ><PLAYER_SPEED_MAX_DELTA_MIN ><SEP >playerSpeedMaxDeltaMin=< NUM ><CB >
	   < OB ><PLAYER_TYPES ><SEP >playerTypes=< NUM ><CB >
	   < OB ><PT_MAX ><SEP >ptMax=< NUM ><CB >
	   < OB ><RANDOM_SEED ><SEP >randomSeed=< NUM ><CB >
	   < OB ><STAMINA_INC_MAX_DELTA_FACTOR ><SEP >staminaIncMaxDeltaFactor=< NUM ><CB >
	   < OB ><SUBS_MAX ><SEP >subsMax=< NUM ><CB >
       {
		Double dAllowMultDefaultType = new Double(allowMultDefaultType.image);
		Double dDashPowerRateDeltaMax = new Double(dashPowerRateDeltaMax.image);		
		Double dDashPowerRateDeltaMin = new Double(dashPowerRateDeltaMin.image);
		Double dEffortMaxDeltaFactor = new Double(effortMaxDeltaFactor.image);
		Double dEffortMinDeltaFactor = new Double(effortMinDeltaFactor.image);
		Double dExtraStaminaDeltaMax = new Double(extraStaminaDeltaMax.image);
		Double dExtraStaminaDeltaMin = new Double(extraStaminaDeltaMin.image);
		Double dInertiaMomentDeltaFactor = new Double(inertiaMomentDeltaFactor.image);
		Double dKickRandDeltaFactor = new Double(kickRandDeltaFactor.image);
		Double dKickableMarginDeltaMax = new Double(kickableMarginDeltaMax.image);
		Double dKickableMarginDeltaMin = new Double(kickableMarginDeltaMin.image);
		Double dNewDashPowerRateDeltaMax = new Double(newDashPowerRateDeltaMax.image);
		Double dNewDashPowerRateDeltaMin = new Double(newDashPowerRateDeltaMin.image);
		Double dNewStaminaIncMaxDeltaFactor = new Double(newStaminaIncMaxDeltaFactor.image);
		Double dPlayerDecayDeltaMax = new Double(playerDecayDeltaMax.image);
		Double dPlayerDecayDeltaMin = new Double(playerDecayDeltaMin.image);
		Double dPlayerTypes = new Double(playerTypes.image);
		Double dPtMax = new Double(ptMax.image);
		Double dRandomSeed = new Double(randomSeed.image);
		Double dStaminaIncMaxDeltaFactor = new Double(staminaIncMaxDeltaFactor.image);
		Double dSubsMax = new Double(subsMax.image);
		controller.infoPlayerParam(
		  dAllowMultDefaultType.doubleValue(), dDashPowerRateDeltaMax.doubleValue(),
		  dDashPowerRateDeltaMin.doubleValue(), dEffortMaxDeltaFactor.doubleValue(),
		  dEffortMinDeltaFactor.doubleValue(), dExtraStaminaDeltaMax.doubleValue(),
		  dExtraStaminaDeltaMin.doubleValue(), dInertiaMomentDeltaFactor.doubleValue(),
		  dKickRandDeltaFactor.doubleValue(), dKickableMarginDeltaMax.doubleValue(),
		  dKickableMarginDeltaMin.doubleValue(),
		  dNewDashPowerRateDeltaMax.doubleValue(), dNewDashPowerRateDeltaMin.doubleValue(),
		  dNewStaminaIncMaxDeltaFactor.doubleValue(), dPlayerDecayDeltaMax.doubleValue(),
		  dPlayerDecayDeltaMin.doubleValue(), dPlayerTypes.doubleValue(), dPtMax.doubleValue(),
		  dRandomSeed.doubleValue(), dStaminaIncMaxDeltaFactor.doubleValue(), dSubsMax.doubleValue());
	}
}

void startPlayerTypeCommand() :
    {Token id=null; Token playerSpeedMax=null; Token staminaIncMax=null; Token playerDecay=null;
     Token inertiaMoment=null; Token dashPowerRate=null; Token playerSize=null;
     Token kickableMargin=null; Token kickRand=null; Token extraStamina=null;
     Token effortMax=null; Token effortMin=null;}{
		< OB ><ID ><SEP >id=<NUM ><CB >
		< OB ><PLAYER_SPEED_MAX ><SEP >playerSpeedMax=< NUM ><CB >
		< OB ><STAMINA_INC_MAX ><SEP >staminaIncMax=< NUM ><CB >
		< OB ><PLAYER_DECAY ><SEP >playerDecay=< NUM ><CB >
		< OB ><INERTIA_MOMENT ><SEP >inertiaMoment=< NUM ><CB >
		< OB ><DASH_POWER_RATE ><SEP >dashPowerRate=< NUM ><CB >
		< OB ><PLAYER_SIZE ><SEP >playerSize=< NUM ><CB >
		< OB ><KICKABLE_MARGIN ><SEP >kickableMargin=< NUM ><CB >
		< OB ><KICK_RAND ><SEP >kickRand=< NUM ><CB >
		< OB ><EXTRA_STAMINA ><SEP >extraStamina=< NUM ><CB >
		< OB ><EFFORT_MAX ><SEP >effortMax=< NUM ><CB >
		< OB ><EFFORT_MIN ><SEP >effortMin=< NUM ><CB >
		{
		Integer iid = new Integer(id.image);
		Double dPlayerSpeedMax = new Double(playerSpeedMax.image);
		Double dStaminaIncMax = new Double(staminaIncMax.image);
		Double dPlayerDecay = new Double(playerDecay.image);
		Double dInertiaMoment = new Double(inertiaMoment.image);
		Double dDashPowerRate = new Double(dashPowerRate.image);
		Double dPlayerSize = new Double(playerSize.image);
		Double dKickableMargin = new Double(kickableMargin.image);
		Double dKickRand = new Double(kickRand.image);
		Double dExtraStamina = new Double(extraStamina.image);
		Double dEffortMax = new Double(effortMax.image);
		Double dEffortMin = new Double(effortMin.image);
		controller.infoPlayerType(
		  iid.intValue(), dPlayerSpeedMax.doubleValue(), dStaminaIncMax.doubleValue(),
		  dPlayerDecay.doubleValue(), dInertiaMoment.doubleValue(), dDashPowerRate.doubleValue(),
		  dPlayerSize.doubleValue(), dKickableMargin.doubleValue(), dKickRand.doubleValue(),
		  dExtraStamina.doubleValue(), dEffortMax.doubleValue(), dEffortMin.doubleValue());
	}
}

// Basic init command.
void startInitCommand() :
  {Token side=null;} {
    (side=<L>|side=<R>){
      coach.setTeamEast(side.image.charAt(0) == 'r');
    }
  }

// Simple enum commands.
void startErrorCommand() :
  {Errors error = null;}{
    error=error(){
        controller.infoHearError(error);
    }
  }

void startOkCommand() : //TODO Add support for look/team_names/team_graphic commands.
    {Ok ok = null;}{
        ok=ok(){
            controller.infoHearOk(ok);
     }
  }

void startWarningCommand() :
    {Warning warning = null;}{
        warning=warning(){
            controller.infoHearWarning(warning);
     }
  }

void startHearCommand() :
  {Token num;Token msg;} {
    <NUM><SEP>(
      <SELF>|
      <REFEREE><SEP>hearReferee()|
      num=<NUM><SEP>msg=<NAM>{
        Double dNum = new Double(num.image);
        controller.infoHearPlayer(dNum.doubleValue(), msg.image);
      }
    )
  }

void hearReferee() :
  {PlayMode playMode=null; RefereeMessage refereeMessage=null;}{
    playMode=playMode(){
      controller.infoHearPlayMode(playMode);
    }|
    refereeMessage=refereeMessage(){
      controller.infoHearReferee(refereeMessage);
    }
  }

//Enum Switches
Warning warning() :
    {}{
    <NO_TEAM_FOUND>{
        return Warning.NO_TEAM_FOUND;
        }|
    <NO_SUCH_PLAYER>{
        return Warning.NO_SUCH_PLAYER;
        }|
    <CANNOT_SUB_WHILE_PLAYON>{
        return Warning.CANNOT_SUB_WHILE_PLAYON;
        }|
    <NO_SUBS_LEFT>{
        return Warning.NO_SUBS_LEFT;
        }|
    <MAX_OF_THAT_TYPE_ON_FIELD>{
        return Warning.MAX_OF_THAT_TYPE_ON_FIELD;
        }|
    <CANNOT_CHANGE_GOALIE>{
        return Warning.CANNOT_CHANGE_GOALIE;
        }
}
Ok ok() :
    {}{
    <MOVE>{
        return Ok.MOVE;
        }|
    <CHANGE_MODE>{
        return Ok.CHANGE_MODE;
        }|
    <CHECK_BALL>{
        return Ok.CHECK_BALL;
        }|
    <START>{
        return Ok.START;
        }|
    <RECOVER>{
        return Ok.RECOVER;
        }|
    <EAR>{
        return Ok.EAR;
        }|
    <SAY>{
        return Ok.SAY;
        }|
    <CHANGE_PLAYER_TYPE>{
        return Ok.CHANGE_PLAYER_TYPE;
        }|
    <LOOK>{
        return Ok.LOOK;
        }|
    <TEAM_NAMES>{
        return Ok.TEAM_NAMES;
        }|
    <TEAM_GRAPHIC>{
        return Ok.TEAM_GRAPHIC;
        }
}
Errors error() :
  {}{
    <ILLEGAL_MODE>{
      return Errors.ILLEGAL_MODE;
    }|
    <ILLEGAL_COMMAND_FORM>{
      return Errors.ILLEGAL_COMMAND_FORM;
    }|
    <ILLEGAL_OBJECT_FORM>{
      return Errors.ILLEGAL_OBJECT_FORM;
    }|
    <NO_MORE_TEAM_OR_PLAYER>{
      return Errors.NO_MORE_TEAM_OR_PLAYER;
    }|
    <NO_MORE_TEAM_OR_PLAYER_OR_GOALIE>{
      return Errors.NO_MORE_TEAM_OR_PLAYER_OR_GOALIE;
    }|
    <NO_MORE_PLAYER_OR_GOALIE_OR_ILLEGAL_CLIENT_VERSION>{
      return Errors.NO_MORE_PLAYER_OR_GOALIE_OR_ILLEGAL_CLIENT_VERSION;
    }|
    <RECONNECT>{
      return Errors.RECONNECT;
    }|
    <UNKNOWN_COMMAND>{
      return Errors.UNKNOWN_COMMAND;
    }|
    <TOO_MANY_MOVES>{
      return Errors.TOO_MANY_MOVES;
    }|
    <SAID_TOO_MANY_MESSAGES>{
      return Errors.SAID_TOO_MANY_MESSAGES;
    }
  }
PlayMode playMode() :
  {}{
     <BEFORE_KICK_OFF>{
      return PlayMode.BEFORE_KICK_OFF;
    }|
    <TIME_OVER>{
      return PlayMode.TIME_OVER;
    }|
    <PLAY_ON>{
      return PlayMode.PLAY_ON;
    }|
    <KICK_OFF_L>{
      if (coach.isTeamEast())
        return PlayMode.KICK_OFF_OTHER;
      else
        return PlayMode.KICK_OFF_OWN;
    }|
    <KICK_OFF_R>{
      if (!coach.isTeamEast())
        return PlayMode.KICK_OFF_OTHER;
      else
        return PlayMode.KICK_OFF_OWN;
    }|
    <KICK_IN_L>{
      if (coach.isTeamEast())
        return PlayMode.KICK_IN_OTHER;
      else
        return PlayMode.KICK_IN_OWN;
    }|
    <KICK_IN_R>{
      if (!coach.isTeamEast())
        return PlayMode.KICK_IN_OTHER;
      else
        return PlayMode.KICK_IN_OWN;
    }|
    <FREE_KICK_R>{
      if (!coach.isTeamEast())
        return PlayMode.FREE_KICK_OTHER;
      else
        return PlayMode.FREE_KICK_OWN;
    }|
    <FREE_KICK_L>{
      if (coach.isTeamEast())
        return PlayMode.FREE_KICK_OTHER;
      else
        return PlayMode.FREE_KICK_OWN;
    }|
    <FREE_KICK_FAULT_R>{
      if (!coach.isTeamEast())
        return PlayMode.FREE_KICK_FAULT_OTHER;
      else
        return PlayMode.FREE_KICK_FAULT_OWN;
    }|
    <FREE_KICK_FAULT_L>{
      if (coach.isTeamEast())
        return PlayMode.FREE_KICK_FAULT_OTHER;
      else
        return PlayMode.FREE_KICK_FAULT_OWN;
    }|
    <CORNER_KICK_R>{
      if (!coach.isTeamEast())
        return PlayMode.CORNER_KICK_OTHER;
      else
        return PlayMode.CORNER_KICK_OWN;
    }|
    <CORNER_KICK_L>{
      if (coach.isTeamEast())
        return PlayMode.CORNER_KICK_OTHER;
      else
        return PlayMode.CORNER_KICK_OWN;
    }|
    <GOAL_KICK_R>{
      if (!coach.isTeamEast())
        return PlayMode.GOAL_KICK_OTHER;
      else
        return PlayMode.GOAL_KICK_OWN;
    }|
    <GOAL_KICK_L>{
      if (coach.isTeamEast())
        return PlayMode.GOAL_KICK_OTHER;
      else
        return PlayMode.GOAL_KICK_OWN;
    }|
    <GOAL_R>{
      if (!coach.isTeamEast())
        return PlayMode.GOAL_OTHER;
      else
        return PlayMode.GOAL_OWN;
    }|
    <GOAL_L>{
      if (coach.isTeamEast())
        return PlayMode.GOAL_OTHER;
      else
        return PlayMode.GOAL_OWN;
    }
  }
RefereeMessage refereeMessage() :
  {}{
    <OFFSIDE_R>{
      if (!coach.isTeamEast())
        return RefereeMessage.OFFSIDE_OTHER;
      else
        return RefereeMessage.OFFSIDE_OWN;
    }|
    <OFFSIDE_L>{
      if (coach.isTeamEast())
        return RefereeMessage.OFFSIDE_OTHER;
      else
        return RefereeMessage.OFFSIDE_OWN;
    }|
    <FOUL_R>{
      if (!coach.isTeamEast())
        return RefereeMessage.FOUL_OTHER;
      else
        return RefereeMessage.FOUL_OWN;
    }|
    <FOUL_L>{
      if (coach.isTeamEast())
        return RefereeMessage.FOUL_OTHER;
      else
        return RefereeMessage.FOUL_OWN;
    }|
    <HALF_TIME>{
        return RefereeMessage.HALF_TIME;
    }|
    <DROP_BALL>{
        return RefereeMessage.DROP_BALL;
    }|
    <TIME_UP>{
        return RefereeMessage.TIME_UP;
    }|
    <TIME_UP_WITHOUT_A_TEAM>{
        return RefereeMessage.TIME_UP_WITHOUT_A_TEAM;
    }|
    <TIME_EXTENDED>{
        return RefereeMessage.TIME_EXTENDED;
    }
}